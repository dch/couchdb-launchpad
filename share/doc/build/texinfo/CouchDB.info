This is CouchDB.info, produced by makeinfo version 4.13 from
CouchDB.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Databases
START-INFO-DIR-ENTRY
* CouchDB: (CouchDB.info). The Apache CouchDB database
END-INFO-DIR-ENTRY

     Apache CouchDB 1.6.0, May 06, 2014

     Copyright (C) 2014, The Apache Software Foundation


File: CouchDB.info,  Node: Top,  Next: Introduction,  Up: (dir)

Apache CouchDB
**************

     Apache CouchDB 1.6.0, May 06, 2014

     Copyright (C) 2014, The Apache Software Foundation

* Menu:

* Introduction::
* Installation::
* Configuring CouchDB::
* Replication: Replication<2>.
* CouchDB Maintenance::
* CouchApp::
* CouchDB Externals API::
* Query Server::
* Fauxton::
* API Reference: API Reference<2>.
* JSON Structure Reference::
* Experimental Features::
* Contributing to this Documentation::
* Release History::
* Security Issues Information::
* Reporting New Security Problems with Apache CouchDB::
* About CouchDB Documentation::
* HTTP API Reference::
* Configuration Reference::
* Index::

 --- The Detailed Node Listing ---

Introduction

* Technical Overview::
* Why CouchDB?::
* Eventual Consistency::
* Getting Started::
* The Core API::
* Security::
* Futon; Web GUI Administration Panel: Futon Web GUI Administration Panel.
* cURL; Your Command Line Friend: cURL Your Command Line Friend.

Technical Overview

* Document Storage::
* ACID Properties::
* Compaction::
* Views::
* Security and Validation::
* Distributed Updates and Replication::
* Implementation::

Views

* View Model::
* Javascript View Functions::
* View Indexes::

Security and Validation

* Administrator Access::
* Update Validation::

Distributed Updates and Replication

* Conflicts::
* Applications::

Why CouchDB?

* Relax::
* A Different Way to Model Your Data::
* A Better Fit for Common Applications::
* Building Blocks for Larger Systems::
* CouchDB Replication::
* Local Data Is King::
* Wrapping Up::

A Better Fit for Common Applications

* Self-Contained Data::
* Syntax and Semantics::

Eventual Consistency

* Working with the Grain::
* The CAP Theorem::
* Local Consistency::
* Validation::
* Distributed Consistency::
* Incremental Replication::
* Case Study::
* Wrapping Up: Wrapping Up<2>.

Local Consistency

* The Key to Your Data::
* No Locking::

Getting Started

* All Systems Are Go!::
* Welcome to Futon::
* Your First Database and Document::
* Running a Query Using MapReduce::
* Triggering Replication::
* Wrapping Up: Wrapping Up<3>.

The Core API

* Server::
* Databases::
* Documents::
* Replication::
* Wrapping Up: Wrapping Up<4>.

Documents

* Revisions::
* Documents in Detail::
* Attachments::

Security

* Authentication::
* Authentication Database::

Authentication

* The Admin Party::
* Basic Authentication::
* Cookie Authentication::

The Admin Party

* Creating New Admin User::
* Hashing Passwords::

Authentication Database

* Users Documents::
* Creating New User::
* Password Changing::
* Users Public Information::

Users Documents

* Why org.couchdb.user; prefix?: Why org couchdb user prefix?.

Futon: Web GUI Administration Panel

* Managing Databases and Documents::
* Configuring Replication::

Installation

* Installation on Unix-like systems::
* Installation on Windows::
* Installation on Mac OS X::
* Installation on FreeBSD::

Installation on Unix-like systems

* Troubleshooting::
* Dependencies::
* Installing::
* First Run::
* Security Considerations::
* Running as a Daemon::

Dependencies

* Debian-based Systems::
* RedHat-based (Fedora, Centos, RHEL) Systems: RedHat-based Fedora Centos RHEL Systems.
* Mac OS X::

Running as a Daemon

* SysV/BSD-style Systems::

Installation on Windows

* Installation from binaries::
* Installation from sources::

Installation from sources

* Troubleshooting: Troubleshooting<2>.
* Dependencies: Dependencies<2>.
* General Notes::
* Setting Up Cygwin::
* Building Erlang::
* Building CouchDB::
* First Run: First Run<2>.

Installation on Mac OS X

* Installation using the Apache CouchDB native application::
* Installation with HomeBrew::
* Installation from MacPorts::

Installation with HomeBrew

* Running as a Daemon: Running as a Daemon<2>.

Installation on FreeBSD

* Installation from ports::

Installation from ports

* Start script::
* Post install::

Configuring CouchDB

* Introduction Into Configuring::
* Base Configuration::
* CouchDB HTTP Server::
* Authentication and Authorization::
* Compaction Configuration::
* Logging::
* Replicator::
* Query Servers::
* External Processes::
* HTTP Resource Handlers::
* CouchDB Internal Services::
* Miscellaneous Parameters::
* Proxying Configuration::

Introduction Into Configuring

* Configuration files::
* Parameter names and values::
* Setting parameters via the configuration file::
* Setting parameters via the HTTP API::

Base Configuration

* Base CouchDB Options::

CouchDB HTTP Server

* HTTP Server Options::
* Secure Socket Level Options::
* Cross-Origin Resource Sharing::
* Virtual Hosts::

Cross-Origin Resource Sharing

* Per Virtual Host Configuration::

Virtual Hosts

* Rewriting Hosts to a Path::

Authentication and Authorization

* Server Administrators::
* Authentication Configuration::
* HTTP OAuth Configuration::
* OAuth Configuration::

Compaction Configuration

* Database Compaction Options::
* Compaction Daemon Rules::
* Configuration of Compaction Daemon::
* Views Compaction Options::

Logging

* Logging options::
* Per module logging::

Replicator

* Replicator Database Configuration::

Query Servers

* Query Servers Definition::
* Query Servers Configuration::
* Native Erlang Query Server::

External Processes

* OS Daemons::
* OS Daemons settings::
* Update notifications::

HTTP Resource Handlers

* Global HTTP Handlers::
* Database HTTP Handlers::
* Design Documents HTTP Handlers::

CouchDB Internal Services

* CouchDB Daemonized Mini Apps::

Miscellaneous Parameters

* Configuration of Attachment Storage::
* Statistic Calculation::
* UUIDs Configuration::
* Vendor information::

Proxying Configuration

* CouchDB As Proxy::

Replication

* Introduction Into Replications::
* CouchDB Replication Protocol::
* Replicator Database::
* Replication and conflict model::

Introduction Into Replications

* Triggering Replication: Triggering Replication<2>.
* Replication Procedure::
* Master - Master replication::
* Controlling which Documents to Replicate::
* Migrating Data to Clients::

CouchDB Replication Protocol

* Language::
* Goals::
* Definitions::
* Algorithm::
* Filter replication::
* Optimisations::
* API Reference::
* Reference::

API Reference

* Push Only::
* Pull Only::

Replicator Database

* Basics::
* Documents describing the same replication::
* Canceling replications::
* Server restart::
* Changing the Replicator Database::
* Replicating the replicator database::
* Delegations::

Replication and conflict model

* CouchDB replication::
* Conflict avoidance::
* Conflicts in batches::
* Revision tree::
* Working with conflicting documents::
* Multiple document API::
* View map functions::
* Merging and revision history::
* Comparison with other replicating data stores::

Comparison with other replicating data stores

* Unison::
* Git::

Git

* What is the CouchDB replication protocol? Is it like Git?::

CouchDB Maintenance

* Compaction: Compaction<2>.
* Performance::

Compaction

* Database Compaction::
* Views Compaction::
* Automatic Compaction::

Views Compaction

* Views cleanup::

Performance

* Disk I/O::
* System Resource Limits::
* Network::
* CouchDB::
* Views: Views<2>.

Disk I/O

* File Size::
* Disk and File System Performance::

System Resource Limits

* CouchDB Configuration Options::
* Erlang::
* PAM and ulimit::

CouchDB Configuration Options

* delayed_commits::
* max_dbs_open::

CouchDB

* DELETE operation::
* Document's ID::

Views

* Views Generation::
* Builtin Reduce Functions::

CouchApp

* Design Functions::
* Guide to Views::

Design Functions

* View functions::
* Show functions::
* List functions::
* Update functions::
* Filter functions::
* Validate document update functions::

View functions

* Map functions::
* Reduce and rereduce functions::

Reduce and rereduce functions

* Builtin reduce functions::

Filter functions

* Classic filters::
* View filters::

Guide to Views

* Introduction Into The Views::
* Views Collation::
* Joins With Views::
* View Cookbook for SQL Jockeys::
* Pagination Recipe::

Introduction Into The Views

* What Is a View?::
* Efficient Lookups::
* The View to Get Comments for Posts::
* Reduce/Rereduce::
* Lessons Learned::
* Wrapping Up: Wrapping Up<5>.

Efficient Lookups

* Find One::
* Find Many::
* Reversed Results::

Views Collation

* Basics: Basics<2>.
* Examples::
* Sorting by Dates::
* String Ranges::
* Collation Specification::
* _all_docs::
* Raw collation::

Collation Specification

* Key ranges::
* Complex keys::

Joins With Views

* Linked Documents::
* Using View Collation::

Using View Collation

* Approach #1; Comments Inlined: Approach #1 Comments Inlined.
* Approach #2; Comments Separate: Approach #2 Comments Separate.
* Optimization; Using the Power of View Collation: Optimization Using the Power of View Collation.

View Cookbook for SQL Jockeys

* Using Views::
* Look Up by Key::
* Look Up by Prefix::
* Aggregate Functions::
* Get Unique Values::
* Enforcing Uniqueness::

Using Views

* Defining a View::
* Querying a View::
* MapReduce Functions::
* Map functions: Map functions<2>.

Pagination Recipe

* Example Data::
* A View::
* Setup::
* Paging::
* Paging (Alternate Method): Paging Alternate Method.
* Jump to Page::

CouchDB Externals API

* The New Hotness::
* How does it work? - HTTP Proxying::
* How does it work? - OS Daemons::
* Neat. But So What?: Neat But So What?.

How does it work? - OS Daemons

* Configuration API::
* Logging API::
* Dynamic Daemons::

Query Server

* Query Server Protocol::
* JavaScript::
* Erlang: Erlang<2>.

Query Server Protocol

* reset::
* add_lib::
* map_doc::
* reduce::
* rereduce::
* ddoc::
* Raising errors::
* Logging: Logging<2>.

add_lib

* add_fun::

ddoc

* shows::
* lists::
* updates::
* filters::
* views::
* validate_doc_update::

Raising errors

* error::
* forbidden::
* unauthorized::

JavaScript

* Design functions context::
* CommonJS Modules::

Fauxton

* Installation: Installation<2>.
* Writting Addons::

Installation

* Get the source::
* Fauxton Setup::
* Dev Server::
* Deploy Fauxton::

Deploy Fauxton

* Understang Fauxton Code layout::
* ToDo items::

Writting Addons

* Generating an Addon::
* Routes and hooks::
* Hello world Addon::

Routes and hooks

* Routes::
* Hooks::

API Reference

* API Basics::
* Server: Server<2>.
* Databases: Databases<2>.
* Documents: Documents<2>.
* Design Documents::
* Local (non-replicating) Documents: Local non-replicating Documents.

API Basics

* Request Format and Responses::
* HTTP Headers::
* JSON Basics::
* HTTP Status Codes::

HTTP Headers

* Request Headers::
* Response Headers::

JSON Basics

* Number Handling::

Server

* /::
* /_active_tasks::
* /_all_dbs::
* /_db_updates::
* /_log::
* /_replicate::
* /_restart::
* /_stats::
* /_utils::
* /_uuids::
* /favicon.ico: /favicon ico.
* Authentication: Authentication<2>.
* Configuration::

/_replicate

* Replication Operation::
* Specifying the Source and Target Database::
* Single Replication::
* Continuous Replication::
* Canceling Continuous Replication::

/_stats

* couchdb::
* httpd_request_methods::
* httpd_status_codes::
* httpd::

Authentication

* Basic Authentication: Basic Authentication<2>.
* Cookie Authentication: Cookie Authentication<2>.
* Proxy Authentication::
* OAuth Authentication::

Cookie Authentication

* /_session::

Configuration

* /_config::
* /_config/section::
* /_config/section/key::

Databases

* /db::
* /db/_all_docs::
* /db/_bulk_docs::
* /db/_changes::
* /db/_compact::
* /db/_compact/design-doc::
* /db/_ensure_full_commit::
* /db/_view_cleanup::
* /db/_security::
* /db/_temp_view::
* /db/_purge::
* /db/_missing_revs::
* /db/_revs_diff::
* /db/_revs_limit::

/db

* Specifying the Document ID::
* Batch Mode Writes::

/db/_bulk_docs

* Inserting Documents in Bulk::
* Updating Documents in Bulk::
* Bulk Documents Transaction Semantics::
* Bulk Document Validation and Conflict Errors::

/db/_changes

* Changes Feeds::
* Filtering::

Changes Feeds

* Polling::
* Long Polling::
* Continuous::
* Event Source::

Filtering

* _doc_ids::
* _design::
* _view::

/db/_purge

* Updating Indexes::

Documents

* /db/doc::
* /db/doc/attachment::

/db/doc

* Attachments: Attachments<2>.
* Getting a List of Revisions::
* Obtaining an Extended Revision History::
* Obtaining a Specific Revision::
* Updating an Existing Document::
* Copying from a Specific Revision::
* Copying to an Existing Document::

Attachments

* Basic Attachments Info::
* Retrieving Attachments Content::
* Retrieving Attachments Encoding Info::
* Creating Multiple Attachments::

Retrieving Attachments Content

* Efficient Multiple Attachments Retrieving::

Obtaining a Specific Revision

* Retrieving Deleted Documents::

/db/doc/attachment

* HTTP Range Requests::

Design Documents

* /db/_design/design-doc::
* /db/_design/design-doc/attachment::
* /db/_design/design-doc/_info::
* /db/_design/design-doc/_view/view-name::
* /db/_design/design-doc/_show/show-name::
* /db/_design/design-doc/_show/show-name/doc-id::
* /db/_design/design-doc/_list/list-name/view-name::
* /db/_design/design-doc/_list/list-name/other-ddoc/view-name::
* /db/_design/design-doc/_update/update-name::
* /db/_design/design-doc/_update/update-name/doc-id::
* /db/_design/design-doc/_rewrite/path::

/db/_design/design-doc/_info

* View Index Information::

/db/_design/design-doc/_view/view-name

* View Options::
* Querying Views and Indexes::
* Sorting Returned Rows::
* Using Limits and Skipping Rows::

Sorting Returned Rows

* Sorting order and startkey/endkey::
* Raw collation: Raw collation<2>.

Local (non-replicating) Documents

* /db/_local/id::

JSON Structure Reference

* All Database Documents::
* Bulk Document Response::
* Bulk Documents::
* Changes information for a database::
* CouchDB Document::
* CouchDB Error Status::
* CouchDB database information object::
* Design Document::
* Design Document Information::
* Document with Attachments::
* List of Active Tasks::
* Replication Settings::
* Replication Status::
* Request object::
* Response object::
* Returned CouchDB Document with Detailed Revision Info::
* Returned CouchDB Document with Revision Info::
* Returned Document with Attachments::
* Security Object::
* User Context Object::
* View Head Information::

Experimental Features

* NodeJS Query Server::
* Plugins::

NodeJS Query Server

* Setup: Setup<2>.
* Differences from the SpiderMonkey Query Server::

Release History

* 1.6.x Branch: 1 6 x Branch.
* 1.5.x Branch: 1 5 x Branch.
* 1.4.x Branch: 1 4 x Branch.
* 1.3.x Branch: 1 3 x Branch.
* 1.2.x Branch: 1 2 x Branch.
* 1.1.x Branch: 1 1 x Branch.
* 1.0.x Branch: 1 0 x Branch.
* 0.11.x Branch: 0 11 x Branch.
* 0.10.x Branch: 0 10 x Branch.
* 0.9.x Branch: 0 9 x Branch.
* 0.8.x Branch: 0 8 x Branch.

1.6.x Branch

* Upgrade Notes::
* Version 1.6.0: Version 1 6 0.

1.5.x Branch

* Version 1.5.1: Version 1 5 1.
* Version 1.5.0: Version 1 5 0.

1.4.x Branch

* Upgrade Notes: Upgrade Notes<2>.
* Version 1.4.0: Version 1 4 0.

1.3.x Branch

* Upgrade Notes: Upgrade Notes<3>.
* Version 1.3.1: Version 1 3 1.
* Version 1.3.0: Version 1 3 0.

Version 1.3.1

* Replicator: Replicator<2>.
* Log System::
* View Server::
* Miscellaneous::

Version 1.3.0

* Database core::
* Documentation::
* Futon::
* HTTP Interface::
* Log System: Log System<2>.
* Replicator: Replicator<3>.
* Security: Security<2>.
* Source Repository::
* Storage System::
* Test Suite::
* URL Rewriter & Vhosts::
* UUID Algorithms::
* Query and View Server::
* Windows::

1.2.x Branch

* Upgrade Notes: Upgrade Notes<4>.
* Version 1.2.2: Version 1 2 2.
* Version 1.2.1: Version 1 2 1.
* Version 1.2.0: Version 1 2 0.

Upgrade Notes

* Security changes::
* Database Compression::

Version 1.2.2

* Build System::
* HTTP Interface: HTTP Interface<2>.

Version 1.2.1

* Build System: Build System<2>.
* Futon: Futon<2>.
* HTTP Interface: HTTP Interface<3>.
* Security: Security<3>.
* Replication: Replication<3>.
* View Server: View Server<2>.

Version 1.2.0

* Authentication: Authentication<3>.
* Build System: Build System<3>.
* Futon: Futon<3>.
* HTTP Interface: HTTP Interface<4>.
* OAuth::
* Replicator: Replicator<4>.
* Storage System: Storage System<2>.
* View Server: View Server<3>.

1.1.x Branch

* Upgrade Notes: Upgrade Notes<5>.
* Version 1.1.2: Version 1 1 2.
* Version 1.1.1: Version 1 1 1.
* Version 1.1.0: Version 1 1 0.

Version 1.1.2

* Build System: Build System<4>.
* HTTP Interface: HTTP Interface<5>.
* Log System: Log System<3>.
* Replicator: Replicator<5>.
* Security: Security<4>.
* View Server: View Server<4>.

Version 1.1.0

* Externals::
* Futon: Futon<4>.
* HTTP Interface: HTTP Interface<6>.
* Replicator: Replicator<6>.
* Storage System: Storage System<3>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<2>.
* View Server: View Server<5>.

1.0.x Branch

* Upgrade Notes: Upgrade Notes<6>.
* Version 1.0.4: Version 1 0 4.
* Version 1.0.3: Version 1 0 3.
* Version 1.0.2: Version 1 0 2.
* Version 1.0.1: Version 1 0 1.
* Version 1.0.0: Version 1 0 0.

Version 1.0.4

* HTTP Interface: HTTP Interface<7>.
* Log System: Log System<4>.
* Replicator: Replicator<7>.
* Security: Security<5>.
* View System::

Version 1.0.3

* General::
* Etap Test Suite::
* Futon: Futon<5>.
* HTTP Interface: HTTP Interface<8>.
* Replicator: Replicator<8>.
* Security: Security<6>.
* Storage System: Storage System<4>.
* Windows: Windows<2>.

Version 1.0.2

* Futon: Futon<6>.
* HTTP Interface: HTTP Interface<9>.
* Log System: Log System<5>.
* Replicator: Replicator<9>.
* Storage System: Storage System<5>.
* View Server: View Server<6>.

Version 1.0.1

* Authentication: Authentication<4>.
* Build and System Integration::
* Futon: Futon<7>.
* HTTP Interface: HTTP Interface<10>.
* Replicator: Replicator<10>.
* Storage System: Storage System<6>.

Version 1.0.0

* Security: Security<7>.
* Storage System: Storage System<7>.
* View Server: View Server<7>.

0.11.x Branch

* Upgrade Notes: Upgrade Notes<7>.
* Version 0.11.2: Version 0 11 2.
* Version 0.11.1: Version 0 11 1.
* Version 0.11.0: Version 0 11 0.

Upgrade Notes

* Changes Between 0.11.0 and 0.11.1: Changes Between 0 11 0 and 0 11 1.
* Changes Between 0.10.x and 0.11.0: Changes Between 0 10 x and 0 11 0.

Changes Between 0.10.x and 0.11.0

* show, list, update and validation functions: show list update and validation functions.
* _admins -> _security::
* json2.js: json2 js.
* WWW-Authenticate::
* Query server line protocol::
* UTF8 JSON::
* _changes line format::

Version 0.11.2

* Authentication: Authentication<5>.
* Futon: Futon<8>.
* HTTP Interface: HTTP Interface<11>.
* Replicator: Replicator<11>.
* Security: Security<8>.

Version 0.11.1

* Build and System Integration: Build and System Integration<2>.
* Configuration System::
* Futon: Futon<9>.
* HTTP Interface: HTTP Interface<12>.
* JavaScript Clients::
* Log System: Log System<6>.
* Replication System::
* Security: Security<9>.
* Storage System: Storage System<8>.
* Test Suite: Test Suite<2>.
* View Server: View Server<8>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<3>.

Version 0.11.0

* Build and System Integration: Build and System Integration<3>.
* Futon: Futon<10>.
* HTTP Interface: HTTP Interface<13>.
* Replication: Replication<4>.
* Runtime Statistics::
* Security: Security<10>.
* Storage System: Storage System<9>.
* View Server: View Server<9>.

0.10.x Branch

* Upgrade Notes: Upgrade Notes<8>.
* Version 0.10.2: Version 0 10 2.
* Version 0.10.1: Version 0 10 1.
* Version 0.10.0: Version 0 10 0.

Upgrade Notes

* Modular Configuration Directories::
* Show and List API change::
* Stricter enforcing of reduciness in reduce-functions::
* View query reduce parameter strictness::

Version 0.10.2

* Build and System Integration: Build and System Integration<4>.
* Security: Security<11>.
* Replicator: Replicator<12>.

Version 0.10.1

* Build and System Integration: Build and System Integration<5>.
* Replicator: Replicator<13>.
* Query Server: Query Server<2>.
* Stats::

Version 0.10.0

* Build and System Integration: Build and System Integration<6>.
* HTTP Interface: HTTP Interface<14>.
* Storage Format::
* View Server: View Server<10>.

0.9.x Branch

* Upgrade Notes: Upgrade Notes<9>.
* Version 0.9.2: Version 0 9 2.
* Version 0.9.1: Version 0 9 1.
* Version 0.9.0: Version 0 9 0.

Upgrade Notes

* Response to Bulk Creation/Updates::
* Database File Format::
* Renamed "count" to "limit"::
* Moved View URLs::
* Attachments: Attachments<3>.
* Error Codes::
* ini file format::

Version 0.9.2

* Build and System Integration: Build and System Integration<7>.
* Replication: Replication<5>.

Version 0.9.1

* Build and System Integration: Build and System Integration<8>.
* Configuration and stats system::
* Database Core::
* External Handlers::
* Futon: Futon<11>.
* HTTP Interface: HTTP Interface<15>.
* JavaScript View Server::
* Replication: Replication<6>.

Version 0.9.0

* Build and System Integration: Build and System Integration<9>.
* Configuration and stats system: Configuration and stats system<2>.
* Database Core: Database Core<2>.
* Design Document Resource Paths::
* Futon Utility Client::
* HTTP Interface: HTTP Interface<16>.
* Replication: Replication<7>.

0.8.x Branch

* Version 0.8.1-incubating: Version 0 8 1-incubating.
* Version 0.8.0-incubating: Version 0 8 0-incubating.

Version 0.8.1-incubating

* Build and System Integration: Build and System Integration<10>.
* Database Core: Database Core<3>.
* Futon: Futon<12>.
* JavaScript View Server: JavaScript View Server<2>.
* HTTP Interface: HTTP Interface<17>.

Version 0.8.0-incubating

* Build and System Integration: Build and System Integration<11>.
* Database Core: Database Core<4>.
* Futon: Futon<13>.
* JavaScript View Server: JavaScript View Server<3>.
* HTTP Interface: HTTP Interface<18>.

Security Issues Information

* CVE-2010-0009; Apache CouchDB Timing Attack Vulnerability: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability.
* CVE-2010-2234; Apache CouchDB Cross Site Request Forgery Attack: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack.
* CVE-2010-3854; Apache CouchDB Cross Site Scripting Issue: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue.
* CVE-2012-5641; Information disclosure via unescaped backslashes in URLs on Windows: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows.
* CVE-2012-5649; JSONP arbitrary code execution with Adobe Flash: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash.
* CVE-2012-5650; DOM based Cross-Site Scripting via Futon UI: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI.
* CVE-2014-2668; DoS (CPU and memory consumption) via the count parameter to /_uuids: CVE-2014-2668 DoS CPU and memory consumption via the count parameter to /_uuids.

CVE-2010-0009: Apache CouchDB Timing Attack Vulnerability

* Description::
* Mitigation::
* Example::
* Credit::

CVE-2010-2234: Apache CouchDB Cross Site Request Forgery Attack

* Description: Description<2>.
* Mitigation: Mitigation<2>.
* Example: Example<2>.
* Credit: Credit<2>.

CVE-2010-3854: Apache CouchDB Cross Site Scripting Issue

* Description: Description<3>.
* Mitigation: Mitigation<3>.
* Example: Example<3>.
* Credit: Credit<3>.

CVE-2012-5641: Information disclosure via unescaped backslashes in URLs on Windows

* Description: Description<4>.
* Mitigation: Mitigation<4>.
* Work-Around::
* Acknowledgement::
* References::

CVE-2012-5649: JSONP arbitrary code execution with Adobe Flash

* Description: Description<5>.
* Mitigation: Mitigation<5>.
* Work-Around: Work-Around<2>.

CVE-2012-5650: DOM based Cross-Site Scripting via Futon UI

* Description: Description<6>.
* Mitigation: Mitigation<6>.
* Work-Around: Work-Around<3>.
* Acknowledgement: Acknowledgement<2>.

CVE-2014-2668: DoS (CPU and memory consumption) via the count parameter to /_uuids

* Description: Description<7>.
* Mitigation: Mitigation<7>.
* Work-Around: Work-Around<4>.

About CouchDB Documentation

* License::


File: CouchDB.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

CouchDB is a database that completely embraces the web. Store your data
with JSON documents. Access your documents with your web browser, *note
via HTTP: f5. *note Query: f6, *note combine: f7, and *note transform:
f8. your documents with *note JavaScript: f9. CouchDB works well with
modern web and mobile apps. You can even serve web apps directly out of
CouchDB. And you can distribute your data, or your apps, efficiently
using CouchDB’s *note incremental replication: fa. CouchDB supports
master-master setups with *note automatic conflict: fb. detection.

  CouchDB comes with a suite of features, such as on-the-fly document
transformation and real-time *note change notifications: fc, that makes
*note web app: fd. development a breeze. It even comes with an easy to
use *note web administration console: fe. You guessed it, served up
directly out of CouchDB! We care a lot about distributed scaling(1).
CouchDB is highly available and partition tolerant, but is also *note
eventually consistent: ff. And we care _a lot_ about your data.
CouchDB has a fault-tolerant storage engine that puts the safety of
your data first.

  In this section you'll learn about every basic bit of CouchDB, see
upon what conceptions and technologies it built and walk through short
tutorial that teach how to use CouchDB.

* Menu:

* Technical Overview::
* Why CouchDB?::
* Eventual Consistency::
* Getting Started::
* The Core API::
* Security::
* Futon; Web GUI Administration Panel: Futon Web GUI Administration Panel.
* cURL; Your Command Line Friend: cURL Your Command Line Friend.

Technical Overview

* Document Storage::
* ACID Properties::
* Compaction::
* Views::
* Security and Validation::
* Distributed Updates and Replication::
* Implementation::

Views

* View Model::
* Javascript View Functions::
* View Indexes::

Security and Validation

* Administrator Access::
* Update Validation::

Distributed Updates and Replication

* Conflicts::
* Applications::

Why CouchDB?

* Relax::
* A Different Way to Model Your Data::
* A Better Fit for Common Applications::
* Building Blocks for Larger Systems::
* CouchDB Replication::
* Local Data Is King::
* Wrapping Up::

A Better Fit for Common Applications

* Self-Contained Data::
* Syntax and Semantics::

Eventual Consistency

* Working with the Grain::
* The CAP Theorem::
* Local Consistency::
* Validation::
* Distributed Consistency::
* Incremental Replication::
* Case Study::
* Wrapping Up: Wrapping Up<2>.

Local Consistency

* The Key to Your Data::
* No Locking::

Getting Started

* All Systems Are Go!::
* Welcome to Futon::
* Your First Database and Document::
* Running a Query Using MapReduce::
* Triggering Replication::
* Wrapping Up: Wrapping Up<3>.

The Core API

* Server::
* Databases::
* Documents::
* Replication::
* Wrapping Up: Wrapping Up<4>.

Documents

* Revisions::
* Documents in Detail::
* Attachments::

Security

* Authentication::
* Authentication Database::

Authentication

* The Admin Party::
* Basic Authentication::
* Cookie Authentication::

The Admin Party

* Creating New Admin User::
* Hashing Passwords::

Authentication Database

* Users Documents::
* Creating New User::
* Password Changing::
* Users Public Information::

Users Documents

* Why org.couchdb.user; prefix?: Why org couchdb user prefix?.

Futon: Web GUI Administration Panel

* Managing Databases and Documents::
* Configuring Replication::

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/CAP_theorem


File: CouchDB.info,  Node: Technical Overview,  Next: Why CouchDB?,  Up: Introduction

1.1 Technical Overview
======================

* Menu:

* Document Storage::
* ACID Properties::
* Compaction::
* Views::
* Security and Validation::
* Distributed Updates and Replication::
* Implementation::


File: CouchDB.info,  Node: Document Storage,  Next: ACID Properties,  Up: Technical Overview

1.1.1 Document Storage
----------------------

A CouchDB server hosts named databases, which store *documents*.  Each
document is uniquely named in the database, and CouchDB provides a
RESTful(1) *note HTTP API: f5. for reading and updating (add, edit,
delete)  database documents.

  Documents are the primary unit of data in CouchDB and consist of any
number of fields and attachments. Documents also include metadata
that’s maintained by the database system. Document fields are uniquely
named and contain values of *note varying types: 104. (text, number,
boolean, lists, etc), and there is no set limit to text size or element
count.

  The CouchDB document update model is lockless and optimistic.
Document edits are made by client applications loading documents,
applying changes, and saving them back to the database. If another
client editing the same document saves their changes first, the client
gets an edit conflict error on save. To resolve the update conflict,
the latest document version can be opened, the edits reapplied and the
update tried again.

  Document updates (add, edit, delete) are all or nothing, either
succeeding entirely or failing completely. The database never contains
partially saved or edited documents.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/REST


File: CouchDB.info,  Node: ACID Properties,  Next: Compaction,  Prev: Document Storage,  Up: Technical Overview

1.1.2 ACID Properties
---------------------

The CouchDB file layout and commitment system features all `Atomic
Consistent Isolated Durable' (ACID(1)) properties. On-disk, CouchDB
never overwrites committed data or associated structures, ensuring the
database file is always in a consistent state. This is a "crash-only"
design where the CouchDB server does not go through a shut down
process, it's simply terminated.

  Document updates (add, edit, delete) are serialized, except for
binary blobs which are written concurrently. Database readers are never
locked out and never have to wait on writers or other readers. Any
number of clients can be reading documents without being locked out or
interrupted by concurrent updates, even on the same document. CouchDB
read operations use a `Multi-Version Concurrency Control' (MVCC(2))
model where each client sees a consistent snapshot of the database from
the beginning to the end of the read operation.

  Documents are indexed in B-trees(3) by their name (DocID) and a
Sequence ID.  Each update to a database instance generates a new
sequential number.  Sequence IDs are used later for incrementally
finding changes in a database.  These B-tree indexes are updated
simultaneously when documents are saved or deleted. The index updates
always occur at the end of the file (append-only updates).

  Documents have the advantage of data being already conveniently
packaged for storage rather than split out across numerous tables and
rows in most database systems. When documents are committed to disk,
the document fields and metadata are packed into buffers, sequentially
one document after another (helpful later for efficient building of
views).

  When CouchDB documents are updated, all data and associated indexes
are flushed to disk and the transactional commit always leaves the
database in a completely consistent state. Commits occur in two steps:

  1. All document data and associated index updates are synchronously
     flushed to disk.

  2. The updated database header is written in two consecutive,
     identical chunks to make up the first 4k of the file, and then
     synchronously flushed to disk.

  In the event of an OS crash or power failure during step 1, the
partially flushed updates are simply forgotten on restart. If such a
crash happens during step 2 (committing the header), a surviving copy
of the previous identical headers will remain, ensuring coherency of
all previously committed data. Excepting the header area, consistency
checks or fix-ups after a crash or a power failure are never necessary.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/ACID

  (2) http://en.wikipedia.org/wiki/Multiversion_concurrency_control

  (3) http://en.wikipedia.org/wiki/B-tree


File: CouchDB.info,  Node: Compaction,  Next: Views,  Prev: ACID Properties,  Up: Technical Overview

1.1.3 Compaction
----------------

Wasted space is recovered by occasional compaction. On schedule, or
when the database file exceeds a certain amount of wasted space, the
compaction process clones all the active data to a new file and then
discards the old file.  The database remains completely online the
entire time and all updates and reads are allowed to complete
successfully. The old database file is deleted only when all the data
has been copied and all users transitioned to the new file.


File: CouchDB.info,  Node: Views,  Next: Security and Validation,  Prev: Compaction,  Up: Technical Overview

1.1.4 Views
-----------

ACID properties only deal with storage and updates, but we also need
the ability to show our data in interesting and useful ways. Unlike SQL
databases where data must be carefully decomposed into tables, data in
CouchDB is stored in semi-structured documents. CouchDB documents are
flexible and each has its own implicit structure, which alleviates the
most difficult problems and pitfalls of bi-directionally replicating
table schemas and their contained data.

  But beyond acting as a fancy file server, a simple document model for
data storage and sharing is too simple to build real applications on -
it simply doesn't do enough of the things we want and expect. We want
to slice and dice and see our data in many different ways. What is
needed is a way to filter, organize and report on data that hasn't been
decomposed into tables.

See also
........

*note Guide to Views: f7.

* Menu:

* View Model::
* Javascript View Functions::
* View Indexes::


File: CouchDB.info,  Node: View Model,  Next: Javascript View Functions,  Up: Views

1.1.4.1 View Model
..................

To address this problem of adding structure back to unstructured and
semi-structured data, CouchDB integrates a view model. Views are the
method of aggregating and reporting on the documents in a database, and
are built on-demand to aggregate, join and report on database
documents. Because views are built dynamically and don’t affect the
underlying document, you can have as many different view
representations of the same data as you like.

  View definitions are strictly virtual and only display the documents
from the current database instance, making them separate from the data
they display and compatible with replication. CouchDB views are defined
inside special *design documents* and can replicate across database
instances like regular documents, so that not only data replicates in
CouchDB, but entire application designs replicate too.


File: CouchDB.info,  Node: Javascript View Functions,  Next: View Indexes,  Prev: View Model,  Up: Views

1.1.4.2 Javascript View Functions
.................................

Views are defined using Javascript functions acting as the map part in a
map-reduce system(1). A *note view function: 10c. takes a CouchDB
document as an argument and then does whatever computation it needs to
do to determine the data that is to be made available through the view,
if any.  It can add multiple rows to the view based on a single
document, or it can add no rows at all.

See also
........

*note View functions: 10c.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/MapReduce


File: CouchDB.info,  Node: View Indexes,  Prev: Javascript View Functions,  Up: Views

1.1.4.3 View Indexes
....................

Views are a dynamic representation of the actual document contents of a
database, and CouchDB makes it easy to create useful views of data.
But generating a view of a database with hundreds of thousands or
millions of documents is time and resource consuming, it's not
something the system should do from scratch each time.

  To keep view querying fast, the view engine maintains indexes of its
views, and incrementally updates them to reflect changes in the
database.  CouchDB’s core design is largely optimized around the need
for efficient, incremental creation of views and their indexes.

  Views and their functions are defined inside special "design"
documents, and a design document may contain any number of uniquely
named view functions.  When a user opens a view and its index is
automatically updated, all the views in the same design document are
indexed as a single group.

  The view builder uses the database sequence ID to determine if the
view group is fully up-to-date with the database. If not, the view
engine examines the all database documents (in packed sequential order)
changed since the last refresh. Documents are read in the order they
occur in the disk file, reducing the frequency and cost of disk head
seeks.

  The views can be read and queried simultaneously while also being
refreshed.  If a client is slowly streaming out the contents of a large
view, the same view can be concurrently opened and refreshed for
another client without blocking the first client. This is true for any
number of simultaneous client readers, who can read and query the view
while the index is concurrently being refreshed for other clients
without causing problems for the readers.

  As documents are processed by the view engine through your 'map' and
'reduce' functions, their previous row values are removed from the view
indexes, if they exist. If the document is selected by a view function,
the function results are inserted into the view as a new row.

  When view index changes are written to disk, the updates are always
appended at the end of the file, serving to both reduce disk head seek
times during disk commits and to ensure crashes and power failures can
not cause corruption of indexes. If a crash occurs while updating a
view index, the incomplete index updates are simply lost and rebuilt
incrementally from its previously committed state.


File: CouchDB.info,  Node: Security and Validation,  Next: Distributed Updates and Replication,  Prev: Views,  Up: Technical Overview

1.1.5 Security and Validation
-----------------------------

To protect who can read and update documents, CouchDB has a simple
reader access and update validation model that can be extended to
implement custom security models.

See also
........

*note /db/_security: 10f.

* Menu:

* Administrator Access::
* Update Validation::


File: CouchDB.info,  Node: Administrator Access,  Next: Update Validation,  Up: Security and Validation

1.1.5.1 Administrator Access
............................

CouchDB database instances have administrator accounts. Administrator
accounts can create other administrator accounts and update design
documents.  Design documents are special documents containing view
definitions and other special formulas, as well as regular fields and
blobs.


File: CouchDB.info,  Node: Update Validation,  Prev: Administrator Access,  Up: Security and Validation

1.1.5.2 Update Validation
.........................

As documents written to disk, they can be validated dynamically by
javascript functions for both security and data validation. When the
document passes all the formula validation criteria, the update is
allowed to continue.  If the validation fails, the update is aborted
and the user client gets an error response.

  Both the user's credentials and the updated document are given as
inputs to the validation formula, and can be used to implement custom
security models by validating a user's permissions to update a document.

  A basic "author only" update document model is trivial to implement,
where document updates are validated to check if the user is listed in
an "author" field in the existing document. More dynamic models are
also possible, like checking a separate user account profile for
permission settings.

  The update validations are enforced for both live usage and replicated
updates, ensuring security and data validation in a shared, distributed
system.

See also
........

*note Validate document update functions: 112.


File: CouchDB.info,  Node: Distributed Updates and Replication,  Next: Implementation,  Prev: Security and Validation,  Up: Technical Overview

1.1.6 Distributed Updates and Replication
-----------------------------------------

CouchDB is a peer-based distributed database system. It allows users
and servers to access and update the same shared data while
disconnected. Those changes can then be replicated bi-directionally
later.

  The CouchDB document storage, view and security models are designed
to work together to make true bi-directional replication efficient and
reliable.  Both documents and designs can replicate, allowing full
database applications (including application design, logic and data) to
be replicated to laptops for offline use, or replicated to servers in
remote offices where slow or unreliable connections make sharing data
difficult.

  The replication process is incremental. At the database level,
replication only examines documents updated since the last replication.
Then for each updated document, only fields and blobs that have changed
are replicated across the network. If replication fails at any step,
due to network problems or crash for example, the next replication
restarts at the same document where it left off.

  Partial replicas can be created and maintained. Replication can be
filtered by a javascript function, so that only particular documents or
those meeting specific criteria are replicated. This can allow users to
take subsets of a large shared database application offline for their
own use, while maintaining normal interaction with the application and
that subset of data.

* Menu:

* Conflicts::
* Applications::


File: CouchDB.info,  Node: Conflicts,  Next: Applications,  Up: Distributed Updates and Replication

1.1.6.1 Conflicts
.................

Conflict detection and management are key issues for any distributed
edit system. The CouchDB storage system treats edit conflicts as a
common state, not an exceptional one. The conflict handling model is
simple and "non-destructive" while preserving single document semantics
and allowing for decentralized conflict resolution.

  CouchDB allows for any number of conflicting documents to exist
simultaneously in the database, with each database instance
deterministically deciding which document is the "winner" and which are
conflicts. Only the winning document can appear in views, while
"losing" conflicts are still accessible and remain in the database
until deleted or purged during database compaction. Because conflict
documents are still regular documents, they replicate just like regular
documents and are subject to the same security and validation rules.

  When distributed edit conflicts occur, every database replica sees
the same winning revision and each has the opportunity to resolve the
conflict.  Resolving conflicts can be done manually or, depending on
the nature of the data and the conflict, by automated agents. The
system makes decentralized conflict resolution possible while
maintaining single document database semantics.

  Conflict management continues to work even if multiple disconnected
users or agents attempt to resolve the same conflicts. If resolved
conflicts result in more conflicts, the system accommodates them in the
same manner, determining the same winner on each machine and
maintaining single document semantics.

See also
........

*note Replication and conflict model: fb.


File: CouchDB.info,  Node: Applications,  Prev: Conflicts,  Up: Distributed Updates and Replication

1.1.6.2 Applications
....................

Using just the basic replication model, many traditionally single server
database applications can be made distributed with almost no extra work.
CouchDB replication is designed to be immediately useful for basic
database applications, while also being extendable for more elaborate
and full-featured uses.

  With very little database work, it is possible to build a distributed
document management application with granular security and full revision
histories. Updates to documents can be implemented to exploit
incremental field and blob replication, where replicated updates are
nearly as efficient and incremental as the actual edit differences
("diffs").

  The CouchDB replication model can be modified for other distributed
update models. If the storage engine is enhanced to allow
multi-document update transactions, it is possible to perform
Subversion-like "all or nothing" atomic commits when replicating with
an upstream server, such that any single document conflict or
validation failure will cause the entire update to fail.  Like
Subversion, conflicts would be resolved by doing a "pull" replication to
force the conflicts locally, then merging and  re-replicating to the
upstream server.


File: CouchDB.info,  Node: Implementation,  Prev: Distributed Updates and Replication,  Up: Technical Overview

1.1.7 Implementation
--------------------

CouchDB is built on the Erlang OTP platform(1), a functional,
concurrent programming language and development platform. Erlang was
developed for real-time telecom applications with an extreme emphasis on
reliability and availability.

  Both in syntax and semantics, Erlang is very different from
conventional programming languages like C or Java. Erlang uses
lightweight "processes" and message passing for concurrency, it has no
shared state threading and all data is immutable. The robust,
concurrent nature of Erlang is ideal for a database server.

  CouchDB is designed for lock-free concurrency, in the conceptual
model and the actual Erlang implementation. Reducing bottlenecks and
avoiding locks keeps the entire system working predictably under heavy
loads. CouchDB can accommodate many clients replicating changes,
opening and updating documents, and querying views whose indexes are
simultaneously being refreshed for other clients, without needing locks.

  For higher availability and more concurrent users, CouchDB is
designed for "shared nothing" clustering. In a "shared nothing"
cluster, each machine is independent and replicates data with its
cluster mates, allowing individual server failures with zero downtime.
And because consistency scans and fix-ups aren’t needed on restart, if
the entire cluster fails - due to a power outage in a datacenter, for
example - the entire CouchDB distributed system becomes immediately
available after a restart.

  CouchDB is built from the start with a consistent vision of a
distributed document database system. Unlike cumbersome attempts to
bolt distributed features on top of the same legacy models and
databases, it is the result of careful ground-up design, engineering
and integration.  The document, view, security and replication models,
the special purpose query language, the efficient and robust disk
layout and the concurrent and reliable nature of the Erlang platform
are all carefully integrated for a reliable and efficient system.

  ---------- Footnotes ----------

  (1) http://www.erlang.org/


File: CouchDB.info,  Node: Why CouchDB?,  Next: Eventual Consistency,  Prev: Technical Overview,  Up: Introduction

1.2 Why CouchDB?
================

Apache CouchDB is one of a new breed of database management systems.
This topic explains why there's a need for new systems as well as the
motivations behind building CouchDB.

  As CouchDB developers, we're naturally very excited to be using
CouchDB.  In this topic we'll share with you the reasons for our
enthusiasm.  We'll show you how CouchDB's schema-free document model is
a better fit for common applications, how the built-in query engine is
a powerful way to use and process your data, and how CouchDB's design
lends itself to modularization and scalability.

* Menu:

* Relax::
* A Different Way to Model Your Data::
* A Better Fit for Common Applications::
* Building Blocks for Larger Systems::
* CouchDB Replication::
* Local Data Is King::
* Wrapping Up::


File: CouchDB.info,  Node: Relax,  Next: A Different Way to Model Your Data,  Up: Why CouchDB?

1.2.1 Relax
-----------

If there's one word to describe CouchDB, it is _relax_. It is the byline
to CouchDB's official logo and when you start CouchDB, you see:

    Apache CouchDB has started. Time to relax.

Why is relaxation important? Developer productivity roughly doubled in
the last five years. The chief reason for the boost is more powerful
tools that are easier to use. Take Ruby on Rails as an example. It is
an infinitely complex framework, but it's easy to get started with.
Rails is a success story because of the core design focus on ease of
use. This is one reason why CouchDB is relaxing: learning CouchDB and
understanding its core concepts should feel natural to most everybody
who has been doing any work on the Web.  And it is still pretty easy to
explain to non-technical people.

  Getting out of the way when creative people try to build specialized
solutions is in itself a core feature and one thing that CouchDB aims
to get right. We found existing tools too cumbersome to work with
during development or in production, and decided to focus on making
CouchDB easy, even a pleasure, to use.

  Another area of relaxation for CouchDB users is the production
setting.  If you have a live running application, CouchDB again goes
out of its way to avoid troubling you. Its internal architecture is
fault-tolerant, and failures occur in a controlled environment and are
dealt with gracefully.  Single problems do not cascade through an
entire server system but stay isolated in single requests.

  CouchDB's core concepts are simple (yet powerful) and well understood.
Operations teams (if you have a team; otherwise, that's you) do not
have to fear random behavior and untraceable errors. If anything should
go wrong, you can easily find out what the problem is, but these
situations are rare.

  CouchDB is also designed to handle varying traffic gracefully. For
instance, if a website is experiencing a sudden spike in traffic,
CouchDB will generally absorb a lot of concurrent requests without
falling over. It may take a little more time for each request, but they
all get answered. When the spike is over, CouchDB will work with
regular speed again.

  The third area of relaxation is growing and shrinking the underlying
hardware of your application. This is commonly referred to as scaling.
CouchDB enforces a set of limits on the programmer. On first look,
CouchDB might seem inflexible, but some features are left out by design
for the simple reason that if CouchDB supported them, it would allow a
programmer to create applications that couldn't deal with scaling up or
down.

     Note: CouchDB doesn't let you do things that would get you in
     trouble later on.  This sometimes means you'll have to unlearn
     best practices you might have picked up in your current or past
     work.


File: CouchDB.info,  Node: A Different Way to Model Your Data,  Next: A Better Fit for Common Applications,  Prev: Relax,  Up: Why CouchDB?

1.2.2 A Different Way to Model Your Data
----------------------------------------

We believe that CouchDB will drastically change the way you build
document-based applications. CouchDB combines an intuitive document
storage model with a powerful query engine in a way that's so simple
you'll probably be tempted to ask, “Why has no one built something like
this before?”

     Django may be built for the Web, but CouchDB is built of the Web.
     I've never seen software that so completely embraces the
     philosophies behind HTTP. CouchDB makes Django look old-school in
     the same way that Django makes ASP look outdated.

                   -- Jacob Kaplan-Moss, Django developer

  CouchDB's design borrows heavily from web architecture and the
concepts of resources, methods, and representations. It augments this
with powerful ways to query, map, combine, and filter your data. Add
fault tolerance, extreme scalability, and incremental replication, and
CouchDB defines a sweet spot for document databases.


File: CouchDB.info,  Node: A Better Fit for Common Applications,  Next: Building Blocks for Larger Systems,  Prev: A Different Way to Model Your Data,  Up: Why CouchDB?

1.2.3 A Better Fit for Common Applications
------------------------------------------

We write software to improve our lives and the lives of others. Usually
this involves taking some mundane information such as contacts,
invoices, or receipts and manipulating it using a computer application.
CouchDB is a great fit for common applications like this because it
embraces the natural idea of evolving, self-contained documents as the
very core of its data model.

* Menu:

* Self-Contained Data::
* Syntax and Semantics::


File: CouchDB.info,  Node: Self-Contained Data,  Next: Syntax and Semantics,  Up: A Better Fit for Common Applications

1.2.3.1 Self-Contained Data
...........................

An invoice contains all the pertinent information about a single
transaction the seller, the buyer, the date, and a list of the items or
services sold.  As shown in *note Figure 1. Self-contained documents:
11f, there's no abstract reference on this piece of paper that points
to some other piece of paper with the seller's name and address.
Accountants appreciate the simplicity of having everything in one
place. And given the choice, programmers appreciate that, too.
 [image src="intro-why-01.png" alt="Self-contained documents" ]

Figure: Figure 1. Self-contained documents

  Yet using references is exactly how we model our data in a relational
database! Each invoice is stored in a table as a row that refers to
other rows in other tables one row for seller information, one for the
buyer, one row for each item billed, and more rows still to describe
the item details, manufacturer details, and so on and so forth.

  This isn't meant as a detraction of the relational model, which is
widely applicable and extremely useful for a number of reasons.
Hopefully, though, it illustrates the point that sometimes your model
may not “fit” your data in the way it occurs in the real world.

  Let's take a look at the humble contact database to illustrate a
different way of modeling data, one that more closely “fits” its
real-world counterpart - a pile of business cards. Much like our
invoice example, a business card contains all the important
information, right there on the cardstock.  We call this
“self-contained” data, and it's an important concept in understanding
document databases like CouchDB.


File: CouchDB.info,  Node: Syntax and Semantics,  Prev: Self-Contained Data,  Up: A Better Fit for Common Applications

1.2.3.2 Syntax and Semantics
............................

Most business cards contain roughly the same information - someone's
identity, an affiliation, and some contact information. While the exact
form of this information can vary between business cards, the general
information being conveyed remains the same, and we're easily able to
recognize it as a business card. In this sense, we can describe a
business card as a _real-world document_.

  Jan's business card might contain a phone number but no fax number,
whereas J. Chris's business card contains both a phone and a fax
number. Jan does not have to make his lack of a fax machine explicit by
writing something as ridiculous as “Fax: None” on the business card.
Instead, simply omitting a fax number implies that he doesn't have one.

  We can see that real-world documents of the same type, such as
business cards, tend to be very similar in _semantics_ - the sort of
information they carry, but can vary hugely in _syntax_, or how that
information is structured. As human beings, we're naturally comfortable
dealing with this kind of variation.

  While a traditional relational database requires you to model your
data _up front_, CouchDB's schema-free design unburdens you with a
powerful way to aggregate your data _after the fact_, just like we do
with real-world documents. We'll look in depth at how to design
applications with this underlying storage paradigm.


File: CouchDB.info,  Node: Building Blocks for Larger Systems,  Next: CouchDB Replication,  Prev: A Better Fit for Common Applications,  Up: Why CouchDB?

1.2.4 Building Blocks for Larger Systems
----------------------------------------

CouchDB is a storage system useful on its own. You can build many
applications with the tools CouchDB gives you. But CouchDB is designed
with a bigger picture in mind. Its components can be used as building
blocks that solve storage problems in slightly different ways for
larger and more complex systems.

  Whether you need a system that's crazy fast but isn't too concerned
with reliability (think logging), or one that guarantees storage in two
or more physically separated locations for reliability, but you're
willing to take a performance hit, CouchDB lets you build these systems.

  There are a multitude of knobs you could turn to make a system work
better in one area, but you'll affect another area when doing so. One
example would be the CAP theorem discussed in *note Eventual
Consistency: ff. To give you an idea of other things that affect
storage systems, see *note Figure 2: 122.  and *note Figure 3: 123.

  By reducing latency for a given system (and that is true not only for
storage systems), you affect concurrency and throughput capabilities.
 [image src="intro-why-02.png" alt="Throughput, latency, or concurrency" ]

Figure: Figure 2. Throughput, latency, or concurrency

 [image src="intro-why-03.png" alt="Scaling: read requests, write requests, or data" ]

Figure: Figure 3. Scaling: read requests, write requests, or data

  When you want to scale out, there are three distinct issues to deal
with: scaling read requests, write requests, and data. Orthogonal to
all three and to the items shown in *note Figure 2: 122. and *note
Figure 3: 123. are many more attributes like reliability or simplicity.
You can draw many of these graphs that show how different features or
attributes pull into different directions and thus shape the system
they describe.

  CouchDB is very flexible and gives you enough building blocks to
create a system shaped to suit your exact problem. That's not saying
that CouchDB can be bent to solve any problem - CouchDB is no silver
bullet - but in the area of data storage, it can get you a long way.


File: CouchDB.info,  Node: CouchDB Replication,  Next: Local Data Is King,  Prev: Building Blocks for Larger Systems,  Up: Why CouchDB?

1.2.5 CouchDB Replication
-------------------------

CouchDB replication is one of these building blocks. Its fundamental
function is to synchronize two or more CouchDB databases. This may
sound simple, but the simplicity is key to allowing replication to
solve a number of problems: reliably synchronize databases between
multiple machines for redundant data storage; distribute data to a
cluster of CouchDB instances that share a subset of the total number of
requests that hit the cluster (load balancing); and distribute data
between physically distant locations, such as one office in New York
and another in Tokyo.

  CouchDB replication uses the same REST API all clients use. HTTP is
ubiquitous and well understood. Replication works incrementally; that
is, if during replication anything goes wrong, like dropping your
network connection, it will pick up where it left off the next time it
runs. It also only transfers data that is needed to synchronize
databases.

  A core assumption CouchDB makes is that things can go wrong, like
network connection troubles, and it is designed for graceful error
recovery instead of assuming all will be well. The replication system's
incremental design shows that best. The ideas behind “things that can go
wrong” are embodied in the Fallacies of Distributed Computing(1):

   - The network is reliable.

   - Latency is zero.

   - Bandwidth is infinite.

   - The network is secure.

   - Topology doesn't change.

   - There is one administrator.

   - Transport cost is zero.

   - The network is homogeneous.

  Existing tools often try to hide the fact that there is a network and
that any or all of the previous conditions don't exist for a particular
system.  This usually results in fatal error scenarios when something
finally goes wrong. In contrast, CouchDB doesn't try to hide the
network; it just handles errors gracefully and lets you know when
actions on your end are required.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing


File: CouchDB.info,  Node: Local Data Is King,  Next: Wrapping Up,  Prev: CouchDB Replication,  Up: Why CouchDB?

1.2.6 Local Data Is King
------------------------

CouchDB takes quite a few lessons learned from the Web, but there is
one thing that could be improved about the Web: latency.  Whenever you
have to wait for an application to respond or a website to render, you
almost always wait for a network connection that isn't as fast as you
want it at that point. Waiting a few seconds instead of milliseconds
greatly affects user experience and thus user satisfaction.

  What do you do when you are offline? This happens all the time - your
DSL or cable provider has issues, or your iPhone, G1, or Blackberry has
no bars, and no connectivity means no way to get to your data.

  CouchDB can solve this scenario as well, and this is where scaling is
important again. This time it is scaling down. Imagine CouchDB
installed on phones and other mobile devices that can synchronize data
with centrally hosted CouchDBs when they are on a network. The
synchronization is not bound by user interface constraints like
subsecond response times. It is easier to tune for high bandwidth and
higher latency than for low bandwidth and very low latency. Mobile
applications can then use the local CouchDB to fetch data, and since no
remote networking is required for that, latency is low by default.

  Can you really use CouchDB on a phone? Erlang, CouchDB's
implementation language has been designed to run on embedded devices
magnitudes smaller and less powerful than today's phones.


File: CouchDB.info,  Node: Wrapping Up,  Prev: Local Data Is King,  Up: Why CouchDB?

1.2.7 Wrapping Up
-----------------

The next document *note Eventual Consistency: ff. further explores the
distributed nature of CouchDB. We should have given you enough bites to
whet your interest.  Let's go!


File: CouchDB.info,  Node: Eventual Consistency,  Next: Getting Started,  Prev: Why CouchDB?,  Up: Introduction

1.3 Eventual Consistency
========================

In the previous document *note Why CouchDB?: 118, we saw that CouchDB's
flexibility allows us to evolve our data as our applications grow and
change. In this topic, we'll explore how working "with the grain" of
CouchDB promotes simplicity in our applications and helps us naturally
build scalable, distributed systems.

* Menu:

* Working with the Grain::
* The CAP Theorem::
* Local Consistency::
* Validation::
* Distributed Consistency::
* Incremental Replication::
* Case Study::
* Wrapping Up: Wrapping Up<2>.


File: CouchDB.info,  Node: Working with the Grain,  Next: The CAP Theorem,  Up: Eventual Consistency

1.3.1 Working with the Grain
----------------------------

A _distributed system_ is a system that operates robustly over a wide
network.  A particular feature of network computing is that network
links can potentially disappear, and there are plenty of strategies for
managing this type of network segmentation. CouchDB differs from others
by accepting eventual consistency, as opposed to putting absolute
consistency ahead of raw availability, like RDBMS(1) or Paxos(2). What
these systems have in common is an awareness that data acts differently
when many people are accessing it simultaneously. Their approaches
differ when it comes to which aspects of _consistency_, _availability_,
or _partition_ tolerance they prioritize.

  Engineering distributed systems is tricky. Many of the caveats and
"gotchas" you will face over time aren't immediately obvious. We don't
have all the solutions, and CouchDB isn't a panacea, but when you work
with CouchDB's grain rather than against it, the path of least
resistance leads you to naturally scalable applications.

  Of course, building a distributed system is only the beginning. A
website with a database that is available only half the time is next to
worthless.  Unfortunately, the traditional relational database approach
to consistency makes it very easy for application programmers to rely
on global state, global clocks, and other high availability no-nos,
without even realizing that they're doing so. Before examining how
CouchDB promotes scalability, we'll look at the constraints faced by a
distributed system. After we've seen the problems that arise when parts
of your application can't rely on being in constant contact with each
other, we'll see that CouchDB provides an intuitive and useful way for
modeling applications around high availability.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Relational_database_management_system

  (2) http://en.wikipedia.org/wiki/Paxos_%28computer_science%29


File: CouchDB.info,  Node: The CAP Theorem,  Next: Local Consistency,  Prev: Working with the Grain,  Up: Eventual Consistency

1.3.2 The CAP Theorem
---------------------

The CAP theorem describes a few different strategies for distributing
application logic across networks. CouchDB's solution uses replication
to propagate application changes across participating nodes. This is a
fundamentally different approach from consensus algorithms and
relational databases, which operate at different intersections of
consistency, availability, and partition tolerance.

  The CAP theorem, shown in *note Figure 1. The CAP theorem: 12d,
identifies three distinct concerns:

   - *Consistency*: All database clients see the same data, even with
     concurrent updates.

   - *Availability*: All database clients are able to access some
     version of the data.

   - *Partition tolerance*: The database can be split over multiple
     servers.

  Pick two.
 [image src="intro-consistency-01.png" alt="The CAP theorem" ]

Figure: Figure 1. The CAP theorem

  When a system grows large enough that a single database node is
unable to handle the load placed on it, a sensible solution is to add
more servers.  When we add nodes, we have to start thinking about how
to partition data between them. Do we have a few databases that share
exactly the same data?  Do we put different sets of data on different
database servers?  Do we let only certain database servers write data
and let others handle the reads?

  Regardless of which approach we take, the one problem we'll keep
bumping into is that of keeping all these database servers in sync. If
you write some information to one node, how are you going to make sure
that a read request to another database server reflects this newest
information? These events might be milliseconds apart. Even with a
modest collection of database servers, this problem can become
extremely complex.

  When it's absolutely critical that all clients see a consistent view
of the database, the users of one node will have to wait for any other
nodes to come into agreement before being able to read or write to the
database.  In this instance, we see that availability takes a backseat
to consistency.  However, there are situations where availability
trumps consistency:

     Each node in a system should be able to make decisions purely
     based on local state. If you need to do something under high load
     with failures occurring and you need to reach agreement, you're
     lost. If you're concerned about scalability, any algorithm that
     forces you to run agreement will eventually become your
     bottleneck. Take that as a given.

          - Werner Vogels, Amazon CTO and Vice President

  If availability is a priority, we can let clients write data to one
node of the database without waiting for other nodes to come into
agreement.  If the database knows how to take care of reconciling these
operations between nodes, we achieve a sort of "eventual consistency"
in exchange for high availability. This is a surprisingly applicable
trade-off for many applications.

  Unlike traditional relational databases, where each action performed
is necessarily subject to database-wide consistency checks, CouchDB
makes it really simple to build applications that sacrifice immediate
consistency for the huge performance improvements that come with simple
distribution.


File: CouchDB.info,  Node: Local Consistency,  Next: Validation,  Prev: The CAP Theorem,  Up: Eventual Consistency

1.3.3 Local Consistency
-----------------------

Before we attempt to understand how CouchDB operates in a cluster, it's
important that we understand the inner workings of a single CouchDB
node.  The CouchDB API is designed to provide a convenient but thin
wrapper around the database core. By taking a closer look at the
structure of the database core, we'll have a better understanding of
the API that surrounds it.

* Menu:

* The Key to Your Data::
* No Locking::


File: CouchDB.info,  Node: The Key to Your Data,  Next: No Locking,  Up: Local Consistency

1.3.3.1 The Key to Your Data
............................

At the heart of CouchDB is a powerful _B-tree_ storage engine.  A
B-tree is a sorted data structure that allows for searches, insertions,
and deletions in logarithmic time. As *note Figure 2. Anatomy of a view
request: 130.  illustrates, CouchDB uses this B-tree storage engine for
all internal data, documents, and views. If we understand one, we will
understand them all.
 [image src="intro-consistency-02.png" alt="Anatomy of a view request" ]

Figure: Figure 2. Anatomy of a view request

  CouchDB uses MapReduce to compute the results of a view. MapReduce
makes use of two functions, "map" and "reduce", which are applied to
each document in isolation. Being able to isolate these operations
means that view computation lends itself to parallel and incremental
computation. More important, because these functions produce key/value
pairs, CouchDB is able to insert them into the B-tree storage engine,
sorted by key. Lookups by key, or key range, are extremely efficient
operations with a B-tree, described in `big O' notation as `O(log N)'
and `O(log N + K)', respectively.

  In CouchDB, we access documents and view results by key or key range.
This is a direct mapping to the underlying operations performed on
CouchDB's B-tree storage engine. Along with document inserts and
updates, this direct mapping is the reason we describe CouchDB's API as
being a thin wrapper around the database core.

  Being able to access results by key alone is a very important
restriction because it allows us to make huge performance gains. As
well as the massive speed improvements, we can partition our data over
multiple nodes, without affecting our ability to query each node in
isolation.  BigTable(1), Hadoop(2), SimpleDB(3), and memcached(4)
restrict object lookups by key for  exactly these reasons.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/BigTable

  (2) http://hadoop.apache.org

  (3) http://aws.amazon.com/simpledb/

  (4) http://memcached.org


File: CouchDB.info,  Node: No Locking,  Prev: The Key to Your Data,  Up: Local Consistency

1.3.3.2 No Locking
..................

A table in a relational database is a single data structure. If you
want to modify a table - say, update a row - the database system must
ensure that nobody else is trying to update that row and that nobody
can read from that row while it is being updated. The common way to
handle this uses what's known as a lock. If multiple clients want to
access a table, the first client gets the lock, making everybody else
wait. When the first client's request is processed, the next client is
given access while everybody else waits, and so on. This serial
execution of requests, even when they arrived in parallel, wastes a
significant amount of your server's processing power.  Under high load,
a relational database can spend more time figuring out who is allowed
to do what, and in which order, than it does doing any actual work.

     Note: Modern relational databases avoid locks by implementing MVCC
     under the hood, but hide it from the end user, requiring them to
     coordinate concurrent changes of single rows or fields.

  Instead of locks, CouchDB uses `Multi-Version Concurrency Control'
(MVCC) to manage concurrent access to the database. *note Figure 3.
MVCC means no locking: 133.  illustrates the differences between MVCC
and traditional locking mechanisms.  MVCC means that CouchDB can run at
full speed, all the time, even under high load. Requests are run in
parallel, making excellent use of every last drop of processing power
your server has to offer.
 [image src="intro-consistency-03.png" alt="MVCC means no locking" ]

Figure: Figure 3. MVCC means no locking

  Documents in CouchDB are versioned, much like they would be in a
regular version control system such as Subversion(1). If you want to
change a value in a document, you create an entire new version of that
document and save it over the old one. After doing this, you end up
with two versions of the same document, one old and one new.

  How does this offer an improvement over locks? Consider a set of
requests wanting to access a document. The first request reads the
document.  While this is being processed, a second request changes the
document.  Since the second request includes a completely new version
of the document, CouchDB can simply append it to the database without
having to wait for the read request to finish.

  When a third request wants to read the same document, CouchDB will
point it to the new version that has just been written. During this
whole process, the first request could still be reading the original
version.

  A read request will always see the most recent snapshot of your
database at the time of the beginning of the request.

  ---------- Footnotes ----------

  (1) http://subversion.apache.org/


File: CouchDB.info,  Node: Validation,  Next: Distributed Consistency,  Prev: Local Consistency,  Up: Eventual Consistency

1.3.4 Validation
----------------

As application developers, we have to think about what sort of input we
should accept and what we should reject. The expressive power to do
this type of validation over complex data within a traditional
relational database leaves a lot to be desired. Fortunately, CouchDB
provides a powerful way to perform per-document validation from within
the database.

  CouchDB can validate documents using JavaScript functions similar to
those used for MapReduce. Each time you try to modify a document,
CouchDB will pass the validation function a copy of the existing
document, a copy of the new document, and a collection of additional
information, such as user authentication details. The validation
function now has the opportunity to approve or deny the update.

  By working with the grain and letting CouchDB do this for us, we save
ourselves a tremendous amount of CPU cycles that would otherwise have
been spent serializing object graphs from SQL, converting them into
domain objects, and using those objects to do application-level
validation.


File: CouchDB.info,  Node: Distributed Consistency,  Next: Incremental Replication,  Prev: Validation,  Up: Eventual Consistency

1.3.5 Distributed Consistency
-----------------------------

Maintaining consistency within a single database node is relatively
easy for most databases. The real problems start to surface when you
try to maintain consistency between multiple database servers. If a
client makes a write operation on server `A', how do we make sure that
this is consistent with server `B', or `C', or `D'? For relational
databases, this is a very complex problem with entire books devoted to
its solution. You could use multi-master, master/slave, partitioning,
sharding, write-through caches, and all sorts of other complex
techniques.


File: CouchDB.info,  Node: Incremental Replication,  Next: Case Study,  Prev: Distributed Consistency,  Up: Eventual Consistency

1.3.6 Incremental Replication
-----------------------------

CouchDB's operations take place within the context of a single document.
As CouchDB achieves eventual consistency between multiple databases by
using incremental replication you no longer have to worry about your
database servers being able to stay in constant communication.
Incremental replication is a process where document changes are
periodically copied between servers.  We are able to build what's known
as a _shared nothing_ cluster of databases where each node is
independent and self-sufficient, leaving no single point of contention
across the system.

  Need to scale out your CouchDB database cluster? Just throw in
another server.

  As illustrated in *note Figure 4. Incremental replication between
CouchDB nodes: 138, with CouchDB's incremental replication, you can
synchronize your data between any two databases however you like and
whenever you like. After replication, each database is able to work
independently.

  You could use this feature to synchronize database servers within a
cluster or between data centers using a job scheduler such as cron, or
you could use it to synchronize data with your laptop for offline work
as you travel. Each database can be used in the usual fashion, and
changes between databases can be synchronized later in both directions.
 [image src="intro-consistency-04.png" alt="Incremental replication between CouchDB nodes" ]

Figure: Figure 4. Incremental replication between CouchDB nodes

  What happens when you change the same document in two different
databases and want to synchronize these with each other? CouchDB's
replication system comes with automatic conflict detection and
resolution. When CouchDB detects that a document has been changed in
both databases, it flags this document as being in conflict, much like
they would be in a regular version control system.

  This isn't as troublesome as it might first sound. When two versions
of a document conflict during replication, the winning version is saved
as the most recent version in the document's history. Instead of
throwing the losing version away, as you might expect, CouchDB saves
this as a previous version in the document's history, so that you can
access it if you need to. This happens automatically and consistently,
so both databases will make exactly the same choice.

  It is up to you to handle conflicts in a way that makes sense for your
application. You can leave the chosen document versions in place,
revert to the older version, or try to merge the two versions and save
the result.


File: CouchDB.info,  Node: Case Study,  Next: Wrapping Up<2>,  Prev: Incremental Replication,  Up: Eventual Consistency

1.3.7 Case Study
----------------

Greg Borenstein, a friend and coworker, built a small library for
converting Songbird playlists to JSON objects and decided to store
these in CouchDB as part of a backup application. The completed
software uses CouchDB's MVCC and document revisions to ensure that
Songbird playlists are backed up robustly between nodes.

     Note: Songbird(1) is a free software media player with an
     integrated web browser, based on the Mozilla XULRunner platform.
     Songbird is available for Microsoft Windows, Apple Mac OS X,
     Solaris, and Linux.

  Let's examine the workflow of the Songbird backup application, first
as a user backing up from a single computer, and then using Songbird to
synchronize playlists between multiple computers. We'll see how document
revisions turn what could have been a hairy problem into something that
_just works_.

  The first time we use this backup application, we feed our playlists
to the application and initiate a backup. Each playlist is converted to
a JSON object and handed to a CouchDB database. As illustrated in *note
Figure 5. Backing up to a single database: 13a, CouchDB hands back the
document ID and revision of each playlist as it's saved to the database.
 [image src="intro-consistency-05.png" alt="Backing up to a single database" ]

Figure: Figure 5. Backing up to a single database

  After a few days, we find that our playlists have been updated and we
want to back up our changes. After we have fed our playlists to the
backup application, it fetches the latest versions from CouchDB, along
with the corresponding document revisions. When the application hands
back the new playlist document, CouchDB requires that the document
revision is included in the request.

  CouchDB then makes sure that the document revision handed to it in the
request matches the current revision held in the database. Because
CouchDB updates the revision with every modification, if these two are
out of sync it suggests that someone else has made changes to the
document between the time we requested it from the database and the
time we sent our updates. Making changes to a document after someone
else has modified it without first inspecting those changes is usually
a bad idea.

  Forcing clients to hand back the correct document revision is the
heart of CouchDB's optimistic concurrency.

  We have a laptop we want to keep synchronized with our desktop
computer.  With all our playlists on our desktop, the first step is to
"restore from backup" onto our laptop. This is the first time we've
done this, so afterward our laptop  should hold an exact replica of our
desktop playlist collection.

  After editing our Argentine Tango playlist on our laptop to add a few
new songs we've purchased, we want to save our changes. The backup
application replaces the playlist document in our laptop CouchDB
database and a new document revision is generated. A few days later, we
remember our new songs and want to copy the playlist across to our
desktop computer. As illustrated in *note Figure 6. Synchronizing
between two databases: 13b, the backup application copies the new
document and the new revision to the desktop CouchDB database. Both
CouchDB databases now have the same document revision.
 [image src="intro-consistency-06.png" alt="Synchronizing between two databases" ]

Figure: Figure 6. Synchronizing between two databases

  Because CouchDB tracks document revisions, it ensures that updates
like these will work only if they are based on current information. If
we had made modifications to the playlist backups between
synchronization, things wouldn't go as smoothly.

  We back up some changes on our laptop and forget to synchronize. A
few days later, we're editing playlists on our desktop computer, make a
backup, and want to synchronize this to our laptop. As illustrated in
*note Figure 7. Synchronization conflicts between two databases: 13c,
when our backup application tries to replicate between the two
databases, CouchDB sees that the changes being sent from our desktop
computer are modifications of out-of-date documents and helpfully
informs us that there has been a conflict.

  Recovering from this error is easy to accomplish from an application
perspective. Just download CouchDB's version of the playlist and
provide an opportunity to merge the changes or save local modifications
into a new playlist.
 [image src="intro-consistency-07.png" alt="Synchronization conflicts between two databases" ]

Figure: Figure 7. Synchronization conflicts between two databases

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Songbird_%28software%29


File: CouchDB.info,  Node: Wrapping Up<2>,  Prev: Case Study,  Up: Eventual Consistency

1.3.8 Wrapping Up
-----------------

CouchDB's design borrows heavily from web architecture and the lessons
learned deploying massively distributed systems on that architecture.
By understanding why this architecture works the way it does, and by
learning to spot which parts of your application can be easily
distributed and which parts cannot, you'll enhance your ability to
design distributed and scalable applications, with CouchDB or without
it.

  We've covered the main issues surrounding CouchDB's consistency model
and hinted at some of the benefits to be had when you work _with_
CouchDB and not against it. But enough theory - let's get up and
running and see what all the fuss is about!


File: CouchDB.info,  Node: Getting Started,  Next: The Core API,  Prev: Eventual Consistency,  Up: Introduction

1.4 Getting Started
===================

In this document, we'll take a quick tour of CouchDB's features,
familiarizing ourselves with Futon, the built-in administration
interface.  We'll create our first document and experiment with CouchDB
views.

* Menu:

* All Systems Are Go!::
* Welcome to Futon::
* Your First Database and Document::
* Running a Query Using MapReduce::
* Triggering Replication::
* Wrapping Up: Wrapping Up<3>.


File: CouchDB.info,  Node: All Systems Are Go!,  Next: Welcome to Futon,  Up: Getting Started

1.4.1 All Systems Are Go!
-------------------------

We'll have a very quick look at CouchDB's bare-bones Application
Programming Interface (API) by using the command-line utility curl.
Please note that this is not the only way of talking to CouchDB. We
will show you plenty more throughout the rest of the documents. What's
interesting about curl is that it gives you control over raw HTTP
requests, and you can see exactly what is going on "underneath the
hood" of your database.

  Make sure CouchDB is still running, and then do:

    curl http://127.0.0.1:5984/

This issues a GET request to your newly installed CouchDB instance.

  The reply should look something like:

    {
      "couchdb": "Welcome",
      "uuid": "85fb71bf700c17267fef77535820e371",
      "version": "1.4.0",
      "vendor": {
          "version": "1.4.0",
          "name": "The Apache Software Foundation"
      }
    }

Not all that spectacular. CouchDB is saying "hello" with the running
version number.

  Next, we can get a list of databases:

    curl -X GET http://127.0.0.1:5984/_all_dbs

All we added to the previous request is the _all_dbs string.

  The response should look like:

    ["_replicator","_users"]

Oh, that's right, we didn't create any databases yet! All we see is an
empty list.

     Note: The curl command issues GET requests by default. You can
     issue POST requests using `curl -X POST'. To make it easy to work
     with our terminal history, we usually use the `-X' option even
     when issuing GET requests.  If we want to send a POST next time,
     all we have to change is the method.

     HTTP does a bit more under the hood than you can see in the
     examples here.  If you're interested in every last detail that
     goes over the wire, pass in the `-v' option (e.g., `curl -vX
     GET'), which will show you the server curl tries to connect to,
     the request headers it sends, and response headers it receives
     back. Great for debugging!

  Let's create a database:

    curl -X PUT http://127.0.0.1:5984/baseball

CouchDB will reply with:

    {"ok":true}

Retrieving the list of databases again shows some useful results this
time:

    curl -X GET http://127.0.0.1:5984/_all_dbs


    ["baseball"]


     Note: We should mention JavaScript Object Notation (JSON) here,
     the data format CouchDB speaks. JSON is a lightweight data
     interchange format based on JavaScript syntax. Because JSON is
     natively compatible with JavaScript, your web browser is an ideal
     client for CouchDB.

     Brackets (`[]') represent ordered lists, and curly braces (`{}')
     represent key/value dictionaries. Keys must be strings, delimited
     by quotes (`"'), and values can be strings, numbers, booleans,
     lists, or key/value dictionaries. For a more detailed description
     of JSON, see Appendix E, JSON Primer.

  Let's create another database:

    curl -X PUT http://127.0.0.1:5984/baseball

CouchDB will reply with:

    {"error":"file_exists","reason":"The database could not be created,
    the file already exists."}

We already have a database with that name, so CouchDB will respond with
an error. Let's try again with a different database name:

    curl -X PUT http://127.0.0.1:5984/plankton

CouchDB will reply with:

    {"ok":true}

Retrieving the list of databases yet again shows some useful results:

    curl -X GET http://127.0.0.1:5984/_all_dbs

CouchDB will respond with:

    ["baseball", "plankton"]

To round things off, let's delete the second database:

    curl -X DELETE http://127.0.0.1:5984/plankton

CouchDB will reply with:

    {"ok":true}

The list of databases is now the same as it was before:

    curl -X GET http://127.0.0.1:5984/_all_dbs

CouchDB will respond with:

    ["baseball"]

For brevity, we'll skip working with documents, as the next section
covers a different and potentially easier way of working with CouchDB
that should provide experience with this. As we work through the
example, keep in mind that "under the hood" everything is being done by
the application exactly as you have been doing here manually.
Everything is done using GET, PUT, POST, and DELETE with a URI.


File: CouchDB.info,  Node: Welcome to Futon,  Next: Your First Database and Document,  Prev: All Systems Are Go!,  Up: Getting Started

1.4.2 Welcome to Futon
----------------------

After having seen CouchDB's raw API, let's get our feet wet by playing
with Futon, the built-in administration interface. Futon provides full
access to all of CouchDB's features and makes it easy to work with some
of the more complex ideas involved. With Futon we can create and
destroy databases; view and edit documents; compose and run MapReduce
views; and trigger replication between databases.

  To load Futon in your browser, visit:

    http://127.0.0.1:5984/_utils/

If you're running version 0.9 or later, you should see something
similar to *note Figure 1. The Futon welcome screen: 143. In later
documents, we'll focus on using CouchDB from server-side languages such
as Ruby and Python. As such, this document is a great opportunity to
showcase an example of natively serving up a dynamic web application
using nothing more than CouchDB's integrated web server, something you
may wish to do with your own applications.

  The first thing we should do with a fresh installation of CouchDB is
run the test suite to verify that everything is working properly. This
assures us that any problems we may run into aren't due to bothersome
issues with our setup. By the same token, failures in the Futon test
suite are a red flag, telling us to double-check our installation
before attempting to use a potentially broken database server, saving
us the confusion when nothing seems to be working quite like we expect!
 [image src="intro-tour-01.png" alt="The Futon welcome screen" ]

Figure: Figure 1. The Futon welcome screen

  Some common network configurations cause the replication test to fail
when accessed via the localhost address. You can fix this by accessing
CouchDB via 127.0.0.1, e.g. <http://127.0.0.1:5984/_utils/>.

  Navigate to the test suite by clicking "Test Suite" on the Futon
sidebar, then click "run all" at the top to kick things off. *note
Figure 2. The Futon test suite running some tests: 144.  shows the
Futon test suite running some tests.
 [image src="intro-tour-02.png" alt="The Futon test suite running some tests" ]

Figure: Figure 2. The Futon test suite running some tests

  Because the test suite is run from the browser, not only does it test
that CouchDB is functioning properly, it also verifies that your
browser's connection to the database is properly configured, which can
be very handy for diagnosing misbehaving proxies or other HTTP
middleware.

  If the test suite has an inordinate number of failures, you'll need
to see the troubleshooting section in Appendix D, Installing from
Source for the next steps to fix your installation.

  Now that the test suite is finished, you've verified that your CouchDB
installation is successful and you're ready to see what else Futon has
to offer.


File: CouchDB.info,  Node: Your First Database and Document,  Next: Running a Query Using MapReduce,  Prev: Welcome to Futon,  Up: Getting Started

1.4.3 Your First Database and Document
--------------------------------------

Creating a database in Futon is simple. From the overview page, click
"Create Database." When asked for a name, enter hello-world and click
the Create button.

  After your database has been created, Futon will display a list of
all its documents. This list will start out empty (*note Figure 3. An
empty database in Futon: 146.), so let's create our first document.
Click the "New Document" link and then the Create button in the pop up.
Make sure to leave the document ID blank, and CouchDB will generate a
UUID for you.

  For demoing purposes, having CouchDB assign a UUID is fine. When you
write your first programs, we recommend assigning your own UUIDs. If
your rely on the server to generate the UUID and you end up making two
POST requests because the first POST request bombed out, you might
generate two docs and never find out about the first one because only
the second one will be reported back. Generating your own UUIDs makes
sure that you'll never end up with duplicate documents.

  Futon will display the newly created document, with its _id and _rev
as the only fields. To create a new field, click the "Add Field"
button. We'll call the new field hello. Click the green check icon (or
hit the Enter key) to finalize creating the hello field. Double-click
the hello field's value (default null) to edit it.

  You can experiment with other JSON values; e.g., `[1, 2, "c"]' or
`{"foo": "bar"}'. Once you've entered your values into the document,
make a note of its `_rev' attribute and click "Save Document." The
result should look like *note Figure 4. A "hello world" document in
Futon: 147.
 [image src="intro-tour-03.png" alt="An empty database in Futon" ]

Figure: Figure 3. An empty database in Futon

 [image src="intro-tour-04.png" alt="A \"hello world\" document in Futon" ]

Figure: Figure 4. A "hello world" document in Futon

  You'll notice that the document's _rev has changed. We'll go into
more detail about this in later documents, but for now, the important
thing to note is that _rev acts like a safety feature when saving a
document. As long as you and CouchDB agree on the most recent _rev of a
document, you can successfully save your changes.

  Futon also provides a way to display the underlying JSON data, which
can be more compact and easier to read, depending on what sort of data
you are dealing with. To see the JSON version of our "hello world"
document, click the Source tab. The result should look like *note
Figure 5. The JSON source of a "hello world" document in Futon: 148.
 [image src="intro-tour-05.png" alt="The JSON source of a \"hello world\" document in Futon" ]

Figure: Figure 5. The JSON source of a "hello world" document in Futon


File: CouchDB.info,  Node: Running a Query Using MapReduce,  Next: Triggering Replication,  Prev: Your First Database and Document,  Up: Getting Started

1.4.4 Running a Query Using MapReduce
-------------------------------------

Traditional relational databases allow you to run any queries you like
as long as your data is structured correctly. In contrast, CouchDB uses
predefined map and reduce functions in a style known as MapReduce.
These functions provide great flexibility because they can adapt to
variations in document structure, and indexes for each document can be
computed independently and in parallel. The combination of a map and a
reduce function is called a view in CouchDB terminology.

  For experienced relational database programmers, MapReduce can take
some getting used to. Rather than declaring which rows from which
tables to include in a result set and depending on the database to
determine the most efficient way to run the query, reduce queries are
based on simple range requests against the indexes generated by your
map functions.

  Map functions are called once with each document as the argument.
The function can choose to skip the document altogether or emit one or
more view rows as key/value pairs. Map functions may not depend on any
information outside of the document. This independence is what allows
CouchDB views to be generated incrementally and in parallel.

  CouchDB views are stored as rows that are kept sorted by key. This
makes retrieving data from a range of keys efficient even when there
are thousands or millions of rows. When writing CouchDB map functions,
your primary goal is to build an index that stores related data under
nearby keys.

  Before we can run an example MapReduce view, we'll need some data to
run it on. We'll create documents carrying the price of various
supermarket items as found at different shops. Let's create documents
for apples, oranges, and bananas. (Allow CouchDB to generate the _id
and _rev fields.) Use Futon to create documents that have a final JSON
structure that looks like this:

    {
     "_id": "00a271787f89c0ef2e10e88a0c0001f4",
     "_rev": "1-2628a75ac8c3abfffc8f6e30c9949fd6",
     "item": "apple",
     "prices": {
         "Fresh Mart": 1.59,
         "Price Max": 5.99,
         "Apples Express": 0.79
     }
    }

This document should look like *note Figure 6. An example document with
apple prices in Futon: 14a. when entered into Futon.
 [image src="intro-tour-06.png" alt="An example document with apple prices in Futon" ]

Figure: Figure 6. An example document with apple prices in Futon

  OK, now that that's done, let's create the document for oranges:

    {
     "_id": "00a271787f89c0ef2e10e88a0c0003f0",
     "_rev": "1-e9680c5d9a688b4ff8dd68549e8e072c",
     "item": "orange",
     "prices": {
         "Fresh Mart": 1.99,
         "Price Max": 3.19,
         "Citrus Circus": 1.09
     }
    }

And finally, the document for bananas:

    {
     "_id": "00a271787f89c0ef2e10e88a0c00048b",
     "_rev": "1-60e25d93dc12884676d037400a6fa189",
     "item": "banana",
     "prices": {
         "Fresh Mart": 1.99,
         "Price Max": 0.79,
         "Banana Montana": 4.22
     }
    }

Imagine we're catering a big luncheon, but the client is very
price-sensitive.  To find the lowest prices, we're going to create our
first view, which shows each fruit sorted by price. Click "hello-world"
to return to the hello-world overview, and then from the "select view"
menu choose "Temporary view…" to create a new view.

 [image src="intro-tour-07.png" alt="A temporary view in Futon" ]

Figure: Figure 7. A temporary view in Futon

  Edit the map function, on the left, so that it looks like the
following:

    function(doc) {
      var shop, price, value;
      if (doc.item && doc.prices) {
          for (shop in doc.prices) {
              price = doc.prices[shop];
              value = [doc.item, shop];
              emit(price, value);
          }
      }
    }

This is a JavaScript function that CouchDB runs for each of our
documents as it computes the view. We'll leave the reduce function
blank for the time being.

  Click "Run" and you should see result rows like in *note Figure 8.
The results of running a view in Futon: 14b, with the various items
sorted by price. This map function could be even more useful if it
grouped the items by type so that all the prices for bananas were next
to each other in the result set. CouchDB's key sorting system allows any
valid JSON object as a key. In this case, we'll emit an array of [item,
price] so that CouchDB groups by item type and price.
 [image src="intro-tour-08.png" alt="The results of running a view in Futon" ]

Figure: Figure 8. The results of running a view in Futon

  Let's modify the view function so that it looks like this:

    function(doc) {
      var shop, price, key;
      if (doc.item && doc.prices) {
          for (shop in doc.prices) {
              price = doc.prices[shop];
              key = [doc.item, price];
              emit(key, shop);
          }
      }
    }

Here, we first check that the document has the fields we want to use.
CouchDB recovers gracefully from a few isolated map function failures,
but when a map function fails regularly (due to a missing required
field or other JavaScript exception), CouchDB shuts off its indexing to
prevent any further resource usage. For this reason, it's important to
check for the existence of any fields before you use them. In this case,
our map function will skip the first "hello world" document we created
without emitting any rows or encountering any errors. The result of this
query should look like *note Figure 9. The results of running a view
after grouping by item type and price: 14c.
 [image src="intro-tour-09.png" alt="The results of running a view after grouping by item type and price" ]

Figure: Figure 9. The results of running a view after grouping by item
type and price

  Once we know we've got a document with an item type and some prices,
we iterate over the item's prices and emit key/values pairs. The key is
an array of the item and the price, and forms the basis for CouchDB's
sorted index. In this case, the value is the name of the shop where the
item can be found for the listed price.

  View rows are sorted by their keys - in this example, first by item,
then by price. This method of complex sorting is at the heart of
creating useful indexes with CouchDB.

  MapReduce can be challenging, especially if you've spent years
working with relational databases. The important things to keep in mind
are that map functions give you an opportunity to sort your data using
any key you choose, and that CouchDB's design is focused on providing
fast, efficient access to data within a range of keys.


File: CouchDB.info,  Node: Triggering Replication,  Next: Wrapping Up<3>,  Prev: Running a Query Using MapReduce,  Up: Getting Started

1.4.5 Triggering Replication
----------------------------

Futon can trigger replication between two local databases, between a
local and remote database, or even between two remote databases.  We'll
show you how to replicate data from one local database to another,
which is a simple way of making backups of your databases as we're
working through the examples.

  First we'll need to create an empty database to be the target of
replication.  Return to the overview and create a database called
hello-replication.  Now click "Replicator" in the sidebar and choose
hello-world as the source and hello-replication as the target. Click
"Replicate" to replicate your database. The result should look
something like *note Figure 10. Running database replication in Futon:
14e.
 [image src="intro-tour-10.png" alt="Running database replication in Futon" ]

Figure: Figure 10. Running database replication in Futon

     Note: For larger databases, replication can take much longer. It
     is important to leave the browser window open while replication is
     taking place.  As an alternative, you can trigger replication via
     curl or some other HTTP client that can handle long-running
     connections. If your client closes the connection before
     replication finishes, you'll have to retrigger it.  Luckily,
     CouchDB's replication can take over from where it left off instead
     of starting from scratch.


File: CouchDB.info,  Node: Wrapping Up<3>,  Prev: Triggering Replication,  Up: Getting Started

1.4.6 Wrapping Up
-----------------

Now that you've seen most of Futon's features, you'll be prepared to
dive in and inspect your data as we build our example application in
the next few documents. Futon's pure JavaScript approach to managing
CouchDB shows how it's possible to build a fully featured web
application using only CouchDB's HTTP API and integrated web server.

  But before we get there, we'll have another look at CouchDB's HTTP
API - now with a magnifying glass. Let's curl up on the couch and relax.


File: CouchDB.info,  Node: The Core API,  Next: Security,  Prev: Getting Started,  Up: Introduction

1.5 The Core API
================

This document explores the CouchDB in minute detail. It shows all the
nitty-gritty and clever bits. We show you best practices and guide you
around common pitfalls.

  We start out by revisiting the basic operations we ran in the
previous document *note Getting Started: 13f, looking behind the
scenes. We also show what Futon needs to do behind its user interface
to give us the nice features we saw earlier.

  This document is both an introduction to the core CouchDB API as well
as a reference. If you can't remember how to run a particular request
or why some parameters are needed, you can always come back here and
look things up (we are probably the heaviest users of this document).

  While explaining the API bits and pieces, we sometimes need to take a
larger detour to explain the reasoning for a particular request. This
is a good opportunity for us to tell you why CouchDB works the way it
does.

  The API can be subdivided into the following sections. We'll explore
them individually:

* Menu:

* Server::
* Databases::
* Documents::
* Replication::
* Wrapping Up: Wrapping Up<4>.


File: CouchDB.info,  Node: Server,  Next: Databases,  Up: The Core API

1.5.1 Server
------------

This one is basic and simple. It can serve as a sanity check to see if
CouchDB is running at all. It can also act as a safety guard for
libraries that require a certain version of CouchDB. We're using the
curl(1) utility again:

    curl http://127.0.0.1:5984/

CouchDB replies, all excited to get going:

    {
      "couchdb": "Welcome",
      "uuid": "85fb71bf700c17267fef77535820e371",
      "vendor": {
          "name": "The Apache Software Foundation",
          "version": "1.5.0"
      },
      "version": "1.5.0"
    }

You get back a JSON string, that, if parsed into a native object or data
structure of your programming language, gives you access to the welcome
string and version information.

  This is not terribly useful, but it illustrates nicely the way CouchDB
behaves. You send an HTTP request and you receive a JSON string in the
HTTP response as a result.

  ---------- Footnotes ----------

  (1) http://curl.haxx.se/


File: CouchDB.info,  Node: Databases,  Next: Documents,  Prev: Server,  Up: The Core API

1.5.2 Databases
---------------

Now let's do something a little more useful: _create databases_.  For
the strict, CouchDB is a _database management system_ (DMS). That means
it can hold multiple databases. A database is a bucket that holds
"related data".  We'll explore later what that means exactly. In
practice, the terminology is overlapping - often people refer to a DMS
as "a database" and also a database within the DMS as "a database." We
might follow that slight oddity, so don't get confused by it. In
general, it should be clear from the context if we are talking about
the whole of CouchDB or a single database within CouchDB.

  Now let's make one! We want to store our favorite music albums, and
we creatively give our database the name albums. Note that we're now
using the `-X' option again to tell curl to send a PUT(1) request
instead of the default GET(2) request:

    curl -X PUT http://127.0.0.1:5984/albums

CouchDB replies:

    {"ok":true}

That's it. You created a database and CouchDB told you that all went
well.  What happens if you try to create a database that already
exists? Let's try to create that database again:

    curl -X PUT http://127.0.0.1:5984/albums

CouchDB replies:

    {"error":"file_exists","reason":"The database could not be created, the file already exists."}

We get back an error. This is pretty convenient. We also learn a little
bit about how CouchDB works. CouchDB stores each database in a single
file.  Very simple.

  Let's create another database, this time with curl's `-v' (for
"verbose") option. The verbose option tells curl to show us not only
the essentials - the HTTP response body - but all the underlying
request and response details:

    curl -vX PUT http://127.0.0.1:5984/albums-backup

curl elaborates:

    * About to connect() to 127.0.0.1 port 5984 (#0)
    *   Trying 127.0.0.1... connected
    * Connected to 127.0.0.1 (127.0.0.1) port 5984 (#0)
    > PUT /albums-backup HTTP/1.1
    > User-Agent: curl/7.16.3 (powerpc-apple-darwin9.0) libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
    > Host: 127.0.0.1:5984
    > Accept: */*
    >
    < HTTP/1.1 201 Created
    < Server: CouchDB (Erlang/OTP)
    < Date: Sun, 05 Jul 2009 22:48:28 GMT
    < Content-Type: text/plain;charset=utf-8
    < Content-Length: 12
    < Cache-Control: must-revalidate
    <
    {"ok":true}
    * Connection #0 to host 127.0.0.1 left intact
    * Closing connection #0

What a mouthful. Let's step through this line by line to understand
what's going on and find out what's important. Once you've seen this
output a few times, you'll be able to spot the important bits more
easily.

    * About to connect() to 127.0.0.1 port 5984 (#0)

This is curl telling us that it is going to establish a TCP connection
to the CouchDB server we specified in our request URI. Not at all
important, except when debugging networking issues.

    *   Trying 127.0.0.1... connected
    * Connected to 127.0.0.1 (127.0.0.1) port 5984 (#0)

curl tells us it successfully connected to CouchDB. Again, not
important if you aren't trying to find problems with your network.

  The following lines are prefixed with `>' and `<' characters.  The
`>' means the line was sent to CouchDB verbatim (without the actual
`>'). The `<' means the line was sent back to curl by CouchDB.

    > PUT /albums-backup HTTP/1.1

This initiates an HTTP request. Its _method_ is PUT(3), the _URI_ is
`/albums-backup', and the HTTP version is `HTTP/1.1'. There is also
`HTTP/1.0', which is simpler in some cases, but for all practical
reasons you should be using `HTTP/1.1'.

  Next, we see a number of _request headers_. These are used to provide
additional details about the request to CouchDB.

    > User-Agent: curl/7.16.3 (powerpc-apple-darwin9.0) libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3

The User-Agent header tells CouchDB which piece of client software is
doing the HTTP request. We don't learn anything new: it's curl. This
header is often useful in web development when there are known errors
in client implementations that a server might want to prepare the
response for.  It also helps to determine which platform a user is on.
This information can be used for technical and statistical reasons. For
CouchDB, the User-Agent(4) header is irrelevant.

    > Host: 127.0.0.1:5984

The Host(5) header is required by `HTTP 1.1'. It tells the server the
hostname that came with the request.

    > Accept: */*

The Accept(6) header tells CouchDB that curl accepts any media type.
We'll look into why this is useful a little later.

    >

An empty line denotes that the request headers are now finished and the
rest of the request contains data we're sending to the server. In this
case, we're not sending any data, so the rest of the curl output is
dedicated to the HTTP response.

    < HTTP/1.1 201 Created

The first line of CouchDB's HTTP response includes the HTTP version
information (again, to acknowledge that the requested version could be
processed), an HTTP _status code_, and a _status code message_.
Different requests trigger different response codes. There's a whole
range of them telling the client (curl in our case) what effect the
request had on the server. Or, if an error occurred, what kind of error.  RFC
2616(7) (the HTTP 1.1 specification) defines clear behavior for
response codes. CouchDB fully follows the RFC.

  The 201 Created(8) status code tells the client that the resource the
request was made against was successfully created. No surprise here,
but if you remember that we got an error message when we tried to
create this database twice, you now know that this response could
include a different response code. Acting upon responses based on
response codes is a common practice. For example, all response codes of
400 Bad Request(9) or larger tell you that some error occurred. If you
want to shortcut your logic and immediately deal with the error, you
could just check a >= `400' response code.

    < Server: CouchDB (Erlang/OTP)

The Server(10) header is good for diagnostics. It tells us which
CouchDB version and which underlying Erlang version we are talking to.
In general, you can ignore this header, but it is good to know it's
there if you need it.

    < Date: Sun, 05 Jul 2009 22:48:28 GMT

The Date(11) header tells you the time of the server. Since client and
server time are not necessarily synchronized, this header is purely
informational. You shouldn't build any critical application logic on top
of this!

    < Content-Type: text/plain;charset=utf-8

The Content-Type(12) header tells you which MIME type the HTTP response
body is and its encoding. We already know CouchDB returns JSON strings.
The appropriate Content-Type(13) header is `application/json'. Why do
we see `text/plain'?  This is where pragmatism wins over purity.
Sending an `application/json' Content-Type(14) header will make a
browser offer you the returned JSON for download instead of just
displaying it. Since it is extremely useful to be able to test CouchDB
from a browser, CouchDB sends a `text/plain' content type, so all
browsers will display the JSON as text.

     Note: There are some extensions that make your browser JSON-aware,
     but they are not installed by default. For more information, look
     at the popular JSONView(15) extension, available for both Firefox
     and Chrome.

  Do you remember the Accept(16) request header and how it is set to
`\*/\* -> */*' to express interest in any MIME type? If you send
`Accept: application/json' in your request, CouchDB knows that you can
deal with a pure JSON response with the proper Content-Type(17) header
and will use it instead of `text/plain'.

    < Content-Length: 12

The Content-Length(18) header simply tells us how many bytes the
response body has.

    < Cache-Control: must-revalidate

This Cache-Control(19) header tells you, or any proxy server between
CouchDB and you, not to cache this response.

    <

This empty line tells us we're done with the response headers and what
follows now is the response body.

    {"ok":true}

We've seen this before.

    * Connection #0 to host 127.0.0.1 left intact
    * Closing connection #0

The last two lines are curl telling us that it kept the TCP connection
it opened in the beginning open for a moment, but then closed it after
it received the entire response.

  Throughout the documents, we'll show more requests with the `-v'
option, but we'll omit some of the headers we've seen here and include
only those that are important for the particular request.

  Creating databases is all fine, but how do we get rid of one? Easy -
just change the HTTP method:

    > curl -vX DELETE http://127.0.0.1:5984/albums-backup

This deletes a CouchDB database. The request will remove the file that
the database contents are stored in. There is no _"Are you sure?"_
safety net or any _"Empty the trash"_ magic you've got to do to delete
a database. Use this command with care. Your data will be deleted
without a chance to bring it back easily if you don't have a backup
copy.

  This section went knee-deep into HTTP and set the stage for
discussing the rest of the core CouchDB API. Next stop: documents.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (7) http://tools.ietf.org/html/rfc2616.html

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.38

  (11) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.18

  (12) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (13) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (14) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (15) http://jsonview.com/

  (16) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (17) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (18) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13

  (19) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9


File: CouchDB.info,  Node: Documents,  Next: Replication,  Prev: Databases,  Up: The Core API

1.5.3 Documents
---------------

Documents are CouchDB's central data structure. The idea behind a
document is, unsurprisingly, that of a real-world document - a sheet of
paper such as an invoice, a recipe, or a business card. We already
learned that CouchDB uses the JSON format to store documents. Let's see
how this storing works at the lowest level.

  Each document in CouchDB has an _ID_. This ID is unique per database.
You are free to choose any string to be the ID, but for best results we
recommend a UUID(1) (or GUID(2)), i.e., a Universally (or Globally)
Unique IDentifier.  UUIDs are random numbers that have such a low
collision probability that everybody can make thousands of UUIDs a
minute for millions of years without ever creating a duplicate. This is
a great way to ensure two independent people cannot create two
different documents with the same ID. Why should you care what somebody
else is doing? For one, that somebody else could be you at a later time
or on a different computer; secondly, CouchDB replication lets you
share documents with others and using UUIDs ensures that it all works.
But more on that later; let's make some documents:

    curl -X PUT http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af -d '{"title":"There is Nothing Left to Lose","artist":"Foo Fighters"}'

CouchDB replies:

    {"ok":true,"id":"6e1295ed6c29495e54cc05947f18c8af","rev":"1-2902191555"}

The curl command appears complex, but let's break it down.  First, `-X
PUT' tells curl to make a PUT(3) request.  It is followed by the URL
that specifies your CouchDB IP address and port.  The resource part of
the URL `/albums/6e1295ed6c29495e54cc05947f18c8af' specifies the
location of a document inside our albums database.  The wild collection
of numbers and characters is a UUID. This UUID is your document's ID.
Finally, the `-d' flag tells curl to use the following string as the
body for the PUT(4) request. The string is a simple JSON structure
including `title' and `artist' attributes with their respective values.

     Note: If you don't have a UUID handy, you can ask CouchDB to give
     you one (in fact, that is what we did just now without showing
     you). Simply send a *note GET /_uuids: 12. request:

         curl -X GET http://127.0.0.1:5984/_uuids

     CouchDB replies:

         {"uuids":["6e1295ed6c29495e54cc05947f18c8af"]}

     Voilà, a UUID. If you need more than one, you can pass in the
     `?count=10' HTTP parameter to request 10 UUIDs, or really, any
     number you need.

  To double-check that CouchDB isn't lying about having saved your
document (it usually doesn't), try to retrieve it by sending a GET
request:

    curl -X GET http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af

We hope you see a pattern here. Everything in CouchDB has an address, a
URI, and you use the different HTTP methods to operate on these URIs.

  CouchDB replies:

    {"_id":"6e1295ed6c29495e54cc05947f18c8af","_rev":"1-2902191555","title":"There is Nothing Left to Lose","artist":"Foo Fighters"}

This looks a lot like the document you asked CouchDB to save, which is
good.  But you should notice that CouchDB added two fields to your JSON
structure.  The first is `_id', which holds the UUID we asked CouchDB
to save our document under. We always know the ID of a document if it
is included, which is very convenient.

  The second field is `_rev'. It stands for _revision_.

* Menu:

* Revisions::
* Documents in Detail::
* Attachments::

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Universally_unique_identifier

  (2) http://en.wikipedia.org/wiki/Globally_unique_identifier

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6


File: CouchDB.info,  Node: Revisions,  Next: Documents in Detail,  Up: Documents

1.5.3.1 Revisions
.................

If you want to change a document in CouchDB, you don't tell it to go
and find a field in a specific document and insert a new value.
Instead, you load the full document out of CouchDB, make your changes
in the JSON structure (or object, when you are doing actual
programming), and save the entire new revision (or version) of that
document back into CouchDB. Each revision is identified by a new `_rev'
value.

  If you want to update or delete a document, CouchDB expects you to
include the `_rev' field of the revision you wish to change. When
CouchDB accepts the change, it will generate a new revision number.
This mechanism ensures that, in case somebody else made a change
without you knowing before you got to request the document update,
CouchDB will not accept your update because you are likely to overwrite
data you didn't know existed. Or simplified: whoever saves a change to
a document first, wins. Let's see what happens if we don't provide a
`_rev' field (which is equivalent to providing a outdated value):

    curl -X PUT http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af \
         -d '{"title":"There is Nothing Left to Lose","artist":"Foo Fighters","year":"1997"}'

CouchDB replies:

    {"error":"conflict","reason":"Document update conflict."}

If you see this, add the latest revision number of your document to the
JSON structure:

    curl -X PUT http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af \
         -d '{"_rev":"1-2902191555","title":"There is Nothing Left to Lose","artist":"Foo Fighters","year":"1997"}'

Now you see why it was handy that CouchDB returned that `_rev' when we
made the initial request. CouchDB replies:

    {"ok":true,"id":"6e1295ed6c29495e54cc05947f18c8af","rev":"2-8aff9ee9d06671fa89c99d20a4b3ae"}

CouchDB accepted your write and also generated a new revision number.
The revision number is the _MD5 hash_ of the transport representation
of a document with an `N-' prefix denoting the number of times a
document got updated. This is useful for replication. See *note
Replication and conflict model: fb. for more information.

  There are multiple reasons why CouchDB uses this revision system,
which is also called Multi-Version Concurrency Control (MVCC(1)). They
all work hand-in-hand, and this is a good opportunity to explain some
of them.

  One of the aspects of the HTTP protocol that CouchDB uses is that it
is stateless. What does that mean? When talking to CouchDB you need to
make requests. Making a request includes opening a network connection
to CouchDB, exchanging bytes, and closing the connection. This is done
every time you make a request. Other protocols allow you to open a
connection, exchange bytes, keep the connection open, exchange more
bytes later - maybe depending on the bytes you exchanged at the
beginning - and eventually close the connection.  Holding a connection
open for later use requires the server to do extra work.  One common
pattern is that for the lifetime of a connection, the client has a
consistent and static view of the data on the server. Managing huge
amounts of parallel connections is a significant amount of work. HTTP
connections are usually short-lived, and making the same guarantees is
a lot easier.  As a result, CouchDB can handle many more concurrent
connections.

  Another reason CouchDB uses MVCC is that this model is simpler
conceptually and, as a consequence, easier to program. CouchDB uses
less code to make this work, and less code is always good because the
ratio of defects per lines of code is static.

  The revision system also has positive effects on replication and
storage mechanisms, but we'll explore these later in the documents.

     Warning: The terms _version_ and _revision_ might sound familiar
     (if you are programming without version control, stop reading this
     guide right now and start learning one of the popular systems).
     Using new versions for document changes works a lot like version
     control, but there's an important difference: *CouchDB does not
     guarantee that older versions are kept around*.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Multiversion_concurrency_control


File: CouchDB.info,  Node: Documents in Detail,  Next: Attachments,  Prev: Revisions,  Up: Documents

1.5.3.2 Documents in Detail
...........................

Now let's have a closer look at our document creation requests with the
curl `-v' flag that was helpful when we explored the database API
earlier.  This is also a good opportunity to create more documents that
we can use in later examples.

  We'll add some more of our favorite music albums. Get a fresh UUID
from the `/_uuids' resource. If you don't remember how that works, you
can look it up a few pages back.

    curl -vX PUT http://127.0.0.1:5984/albums/70b50bfa0a4b3aed1f8aff9e92dc16a0 \
         -d '{"title":"Blackened Sky","artist":"Biffy Clyro","year":2002}'


     Note: By the way, if you happen to know more information about
     your favorite albums, don't hesitate to add more properties. And
     don't worry about not knowing all the information for all the
     albums. CouchDB's schema-less documents can contain whatever you
     know. After all, you should relax and not worry about data.

  Now with the `-v' option, CouchDB's reply (with only the important
bits shown) looks like this:

    > PUT /albums/70b50bfa0a4b3aed1f8aff9e92dc16a0 HTTP/1.1
    >
    < HTTP/1.1 201 Created
    < Location: http://127.0.0.1:5984/albums/70b50bfa0a4b3aed1f8aff9e92dc16a0
    < ETag: "1-e89c99d29d06671fa0a4b3ae8aff9e"
    <
    {"ok":true,"id":"70b50bfa0a4b3aed1f8aff9e92dc16a0","rev":"1-e89c99d29d06671fa0a4b3ae8aff9e"}

We're getting back the 201 Created(1) HTTP status code in the response
headers, as we saw earlier when we created a database. The Location(2)
header gives us a full URL to our newly created document. And there's a
new header. An ETag(3) in HTTP-speak identifies a specific version of a
resource. In this case, it identifies a specific version (the first
one) of our new document. Sound familiar? Yes, conceptually, an ETag(4)
is the same as a CouchDB document revision number, and it shouldn't
come as a surprise that CouchDB uses revision numbers for ETags. ETags
are useful for caching infrastructures.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19


File: CouchDB.info,  Node: Attachments,  Prev: Documents in Detail,  Up: Documents

1.5.3.3 Attachments
...................

CouchDB documents can have attachments just like an email message can
have attachments. An attachment is identified by a name and includes
its MIME type (or Content-Type(1)) and the number of bytes the
attachment contains. Attachments can be any data. It is easiest to
think about attachments as files attached to a document. These files
can be text, images, Word documents, music, or movie files. Let's make
one.

  Attachments get their own URL where you can upload data. Say we want
to add the album artwork to the `6e1295ed6c29495e54cc05947f18c8af'
document (_"There is Nothing Left to Lose"_), and let's also say the
artwork is in a file `artwork.jpg' in the current directory:

    curl -vX PUT http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af/artwork.jpg?rev=2-2739352689 \
         --data-binary @artwork.jpg -H "Content-Type:image/jpg"


     Note: The `--data-binary' `@' option tells curl to read a file's
     contents into the HTTP request body. We're using the `-H' option
     to tell CouchDB that we're uploading a JPEG file. CouchDB will
     keep this information around and will send the appropriate header
     when requesting this attachment; in case of an image like this, a
     browser will render the image instead of offering you the data for
     download. This will come in handy later. Note that you need to
     provide the current revision number of the document you're
     attaching the artwork to, just as if you would update the
     document. Because, after all, attaching some data is changing the
     document.

  You should now see your artwork image if you point your browser to
<http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af/artwork.jpg>

  If you request the document again, you'll see a new member:

    curl http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af

CouchDB replies:

    {
      "_id": "6e1295ed6c29495e54cc05947f18c8af",
      "_rev": "3-131533518",
      "title": "There is Nothing Left to Lose",
      "artist": "Foo Fighters",
      "year": "1997",
      "_attachments": {
          "artwork.jpg": {
              "stub": true,
              "content_type": "image/jpg",
              "length": 52450
          }
      }
    }

`_attachments' is a list of keys and values where the values are JSON
objects containing the attachment metadata. `stub=true' tells us that
this entry is just the metadata. If we use the `?attachments=true' HTTP
option when requesting this document, we'd get a Base64(2) encoded
string containing the attachment data.

  We'll have a look at more document request options later as we
explore more features of CouchDB, such as replication, which is the
next topic.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (2) http://en.wikipedia.org/wiki/Base64


File: CouchDB.info,  Node: Replication,  Next: Wrapping Up<4>,  Prev: Documents,  Up: The Core API

1.5.4 Replication
-----------------

CouchDB replication is a mechanism to synchronize databases. Much like
rsync(1) synchronizes two directories locally or over a network,
replication synchronizes two databases locally or remotely.

  In a simple POST(2) request, you tell CouchDB the _source_ and the
_target_ of a replication and CouchDB will figure out which documents
and new document revisions are on _source_ that are not yet on
_target_, and will proceed  to move the missing documents and revisions
over.

  We'll take an in-depth look at replication in the document *note
Introduction Into Replications: fa.; in this document, we'll just show
you how to use it.

  First, we'll create a target database. Note that CouchDB won't
automatically create a target database for you, and will return a
replication failure if the target doesn't exist (likewise for the
source, but that mistake isn't as easy to make):

    curl -X PUT http://127.0.0.1:5984/albums-replica

Now we can use the database `albums-replica' as a replication target:

    curl -vX POST http://127.0.0.1:5984/_replicate \
         -d '{"source":"albums","target":"albums-replica"}' \
         -H "Content-Type: application/json"


     Note: CouchDB supports the option `"create_target":true' placed in
     the JSON POSTed to the *note _replicate: 15b. URL. It implicitly
     creates the target database if it doesn't exist.

  CouchDB replies (this time we formatted the output so you can read it
more easily):

    {
      "history": [
        {
          "start_last_seq": 0,
          "missing_found": 2,
          "docs_read": 2,
          "end_last_seq": 5,
          "missing_checked": 2,
          "docs_written": 2,
          "doc_write_failures": 0,
          "end_time": "Sat, 11 Jul 2009 17:36:21 GMT",
          "start_time": "Sat, 11 Jul 2009 17:36:20 GMT"
        }
      ],
      "source_last_seq": 5,
      "session_id": "924e75e914392343de89c99d29d06671",
      "ok": true
    }

CouchDB maintains a _session history_ of replications. The response for
a replication request contains the history entry for this _replication
session_.  It is also worth noting that the request for replication
will stay open until replication closes. If you have a lot of
documents, it'll take a while until they are all replicated and you
won't get back the replication response until all documents are
replicated. It is important to note that replication replicates the
database only as it was at the point in time when replication was
started. So, any additions, modifications, or deletions subsequent to
the start of replication will not be replicated.

  We'll punt on the details again - the `"ok": true' at the end tells
us all went well. If you now have a look at the albums-replica database,
you should see all the documents that you created in the albums
database.  Neat, eh?

  What you just did is called local replication in CouchDB terms. You
created a local copy of a database. This is useful for backups or to
keep snapshots of a specific state of your data around for later. You
might want to do this if you are developing your applications but want
to be able to roll back to a stable version of your code and data.

  There are more types of replication useful in other situations. The
source and target members of our replication request are actually links
(like in HTML) and so far we've seen links relative to the server we're
working on (hence local). You can also specify a remote database as the
target:

    curl -vX POST http://127.0.0.1:5984/_replicate \
         -d '{"source":"albums","target":"http://example.org:5984/albums-replica"}' \
         -H "Content-Type:application/json"

Using a _local source_ and a _remote target_ database is called _push
replication_. We're pushing changes to a remote server.

     Note: Since we don't have a second CouchDB server around just yet,
     we'll just use the absolute address of our single server, but you
     should be able to infer from this that you can put any remote
     server in there.

  This is great for sharing local changes with remote servers or
buddies next door.

  You can also use a _remote source_ and a _local target_ to do a _pull
replication_. This is great for getting the latest changes from a
server that is used by others:

    curl -vX POST http://127.0.0.1:5984/_replicate \
         -d '{"source":"http://example.org:5984/albums-replica","target":"albums"}' \
         -H "Content-Type:application/json"

Finally, you can run remote replication, which is mostly useful for
management operations:

    curl -vX POST http://127.0.0.1:5984/_replicate \
         -d '{"source":"http://example.org:5984/albums","target":"http://example.org:5984/albums-replica"}' \
         -H"Content-Type: application/json"


     Note: *CouchDB and REST*

     CouchDB prides itself on having a RESTful(3) API, but these
     replication requests don't look very RESTy to the trained eye.
     What's up with that?  While CouchDB's core database, document, and
     attachment API are RESTful, not all of CouchDB's API is. The
     replication API is one example. There are more, as we'll see later
     in the documents.

     Why are there RESTful and non-RESTful APIs mixed up here? Have the
     developers been too lazy to go REST all the way? Remember, REST is
     an architectural style that lends itself to certain architectures
     (such as the CouchDB document API). But it is not a
     one-size-fits-all. Triggering an event like replication does not
     make a whole lot of sense in the REST world. It is more like a
     traditional remote procedure call. And there is nothing wrong with
     this.

     We very much believe in the "use the right tool for the job"
     philosophy, and REST does not fit every job. For support, we refer
     to Leonard Richardson and Sam Ruby who wrote RESTful Web
     Services(4) (O'Reilly), as they share our view.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Rsync

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5

  (3) http://en.wikipedia.org/wiki/Representational_state_transfer

  (4) http://oreilly.com/catalog/9780596529260


File: CouchDB.info,  Node: Wrapping Up<4>,  Prev: Replication,  Up: The Core API

1.5.5 Wrapping Up
-----------------

This is still not the full CouchDB API, but we discussed the essentials
in great detail. We're going to fill in the blanks as we go. For now,
we believe you're ready to start building CouchDB applications.

See also
........

*note Complete HTTP API Reference: 15d.:

   - *note Server API Reference: 15e.

   - *note Database API Reference: 15f.

   - *note Document API Reference: 160.

   - *note Replication API: 15b.


File: CouchDB.info,  Node: Security,  Next: Futon Web GUI Administration Panel,  Prev: The Core API,  Up: Introduction

1.6 Security
============

In this document, we'll look at the basic security mechanisms in
CouchDB: the `Admin Party', `Basic Authentication', `Cookie
Authentication'; how CouchDB handles users and protects their
credentials.

* Menu:

* Authentication::
* Authentication Database::

Authentication

* The Admin Party::
* Basic Authentication::
* Cookie Authentication::

The Admin Party

* Creating New Admin User::
* Hashing Passwords::

Authentication Database

* Users Documents::
* Creating New User::
* Password Changing::
* Users Public Information::

Users Documents

* Why org.couchdb.user; prefix?: Why org couchdb user prefix?.


File: CouchDB.info,  Node: Authentication,  Next: Authentication Database,  Up: Security

1.6.1 Authentication
--------------------

* Menu:

* The Admin Party::
* Basic Authentication::
* Cookie Authentication::

The Admin Party

* Creating New Admin User::
* Hashing Passwords::


File: CouchDB.info,  Node: The Admin Party,  Next: Basic Authentication,  Up: Authentication

1.6.1.1 The Admin Party
.......................

When you start out fresh, CouchDB allows any request to be made by
anyone.  Create a database? No problem, here you go. Delete some
documents? Same deal.  CouchDB calls this the `Admin Party'. Everybody
has privileges to do anything.  Neat.

  While it is incredibly easy to get started with CouchDB that way, it
should be obvious that putting a default installation into the wild is
adventurous. Any rogue client could come along and delete a database.

  A note of relief: by default, CouchDB will listen only on your
loopback network interface (`127.0.0.1' or `localhost') and thus only
you will be able to make requests to CouchDB, nobody else. But when you
start to open up your CouchDB to the public (that is, by telling it to
bind to your machine's public IP address), you will want to think about
restricting access so that the next bad guy doesn't ruin your admin
party.

  In our previous discussions, we dropped some keywords about how things
without the `Admin Party' work. First, there's _admin_ itself, which
implies some sort of super user. Then there are _privileges_. Let's
explore these terms a little more.

  CouchDB has the idea of an _admin user_ (e.g. an administrator, a
super user, or root) that is allowed to do anything to a CouchDB
installation. By default, everybody is an admin. If you don't like
that, you can create specific admin users with a username and password
as their credentials.

  CouchDB also defines a set of requests that only admin users are
allowed to do. If you have defined one or more specific admin users,
CouchDB will ask for identification for certain requests:

   - Creating a database (*note PUT /database: 17.)

   - Deleting a database (*note DELETE /database: 17.)

   - Setup a database security (*note PUT /database/_security: 42.)

   - Creating a design document (*note PUT /database/_design/app: 22.)

   - Updating a design document (*note PUT
     /database/_design/app?rev=1-4E2: 22.)

   - Deleting a design document (*note DELETE
     /database/_design/app?rev=2-6A7: 23.)

   - Execute a temporary view (*note POST /database/_temp_view: 43.)

   - Triggering compaction (*note POST /database/_compact: 1e.)

   - Reading the task status list (*note GET /_active_tasks: 1.)

   - Restarting the server (*note POST /_restart: b.)

   - Reading the active configuration (*note GET /_config: 3.)

   - Updating the active configuration (*note PUT /_config/section/key:
     6.)

* Menu:

* Creating New Admin User::
* Hashing Passwords::


File: CouchDB.info,  Node: Creating New Admin User,  Next: Hashing Passwords,  Up: The Admin Party

1.6.1.2 Creating New Admin User
...............................

Let's do another walk through the API using `curl' to see how CouchDB
behaves when you add admin users.

    > HOST="http://127.0.0.1:5984"
    > curl -X PUT $HOST/database
    {"ok":true}

When starting out fresh, we can add a database. Nothing unexpected. Now
let's create an admin user. We'll call her `anna', and her password is
`secret'.  Note the double quotes in the following code; they are
needed to denote a string value for the *note configuration API: 168.:

    > curl -X PUT $HOST/_config/admins/anna -d '"secret"'
    ""

As per the *note _config: 168. API's behavior, we're getting the
previous value for the config item we just wrote. Since our admin user
didn't exist, we get an empty string.


File: CouchDB.info,  Node: Hashing Passwords,  Prev: Creating New Admin User,  Up: The Admin Party

1.6.1.3 Hashing Passwords
.........................

Seeing the plain-text password is scary, isn't it? No worries, CouchDB
doesn't show up the plain-text password anywhere. It gets hashed right
away. The hash is that big, ugly, long string that starts out with
`-hashed-'.  How does that work?

  1. Creates a new 128-bit UUID. This is our _salt_.

  2. Creates a sha1 hash of the concatenation of the bytes of the
     plain-text password and the salt `(sha1(password + salt))'.

  3. Prefixes the result with `-hashed-' and appends `,salt'.

  To compare a plain-text password during authentication with the
stored hash, the same procedure is run and the resulting hash is
compared to the stored hash. The probability of two identical hashes
for different passwords is too insignificant to mention (c.f. Bruce
Schneier(1)). Should the stored hash fall into the hands of an
attacker, it is, by current standards, way too inconvenient (i.e., it'd
take a lot of money and time) to find the plain-text password from the
hash.

  But what's with the `-hashed-' prefix? When CouchDB starts up, it
reads a set of `.ini' files with config settings. It loads these
settings into an internal data store (not a database). The config API
lets you read the current configuration as well as change it and create
new entries. CouchDB is writing any changes back to the `.ini' files.

  The `.ini' files can also be edited by hand when CouchDB is not
running.  Instead of creating the admin user as we showed previously,
you could have stopped CouchDB, opened your `local.ini', added `anna =
secret' to the *note admins: 4e, and restarted CouchDB. Upon reading
the new line from `local.ini', CouchDB would run the hashing algorithm
and write back the hash to `local.ini', replacing the plain-text
password. To make sure CouchDB only hashes plain-text passwords and not
an existing hash a second time, it prefixes the hash with `-hashed-',
to distinguish between plain-text passwords and hashed passwords. This
means your plain-text password can't start with the characters
`-hashed-', but that's pretty unlikely to begin with.

     Note: Since *note 1.3.0 release: 16a. CouchDB uses `-pbkdf2-'
     prefix by default to sign about using PBKDF2(2) hashing algorithm
     instead of `SHA1'.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Bruce_Schneier

  (2) http://en.wikipedia.org/wiki/PBKDF2


File: CouchDB.info,  Node: Basic Authentication,  Next: Cookie Authentication,  Prev: The Admin Party,  Up: Authentication

1.6.1.4 Basic Authentication
............................

Now that we have defined an admin, CouchDB will not allow us to create
new databases unless we give the correct admin user credentials. Let's
verify:

    > curl -X PUT $HOST/somedatabase
    {"error":"unauthorized","reason":"You are not a server admin."}

That looks about right. Now we try again with the correct credentials:

    > HOST="http://anna:secret@127.0.0.1:5984"
    > curl -X PUT $HOST/somedatabase
    {"ok":true}

If you have ever accessed a website or FTP server that was
password-protected, the `username:password@' URL variant should look
familiar.

  If you are security conscious, the missing `s' in `http://' will make
you nervous. We're sending our password to CouchDB in plain text. This
is a bad thing, right? Yes, but consider our scenario: CouchDB listens
on `127.0.0.1' on a development box that we're the sole user of. Who
could possibly sniff our password?

  If you are in a production environment, however, you need to
reconsider. Will your CouchDB instance communicate over a public
network? Even a LAN shared with other collocation customers is public.
There are multiple ways to secure communication between you or your
application and CouchDB that exceed the scope of this documentation.
CouchDB as of version *note 1.1.0: 16d.  comes with *note SSL built in:
16e.

See also
........

*note Basic Authentication API Reference: 16f.


File: CouchDB.info,  Node: Cookie Authentication,  Prev: Basic Authentication,  Up: Authentication

1.6.1.5 Cookie Authentication
.............................

Basic authentication that uses plain-text passwords is nice and
convenient, but not very secure if no extra measures are taken. It is
also a very poor user experience. If you use basic authentication to
identify admins, your application's users need to deal with an ugly,
unstylable browser modal dialog that says non-professional at work more
than anything else.

  To remedy some of these concerns, CouchDB supports cookie
authentication.  With cookie authentication your application doesn't
have to include the ugly login dialog that the users' browsers come
with. You can use a regular HTML form to submit logins to CouchDB. Upon
receipt, CouchDB will generate a one-time token that the client can use
in its next request to CouchDB. When CouchDB sees the token in a
subsequent request, it will authenticate the user based on the token
without the need to see the password again. By default, a token is
valid for 10 minutes.

  To obtain the first token and thus authenticate a user for the first
time, the username and password must be sent to the *note _session: 172.
API. The API is smart enough to decode HTML form submissions, so you
don't have to resort to any smarts in your application.

  If you are not using HTML forms to log in, you need to send an HTTP
request that looks as if an HTML form generated it. Luckily, this is
super simple:

    > HOST="http://127.0.0.1:5984"
    > curl -vX POST $HOST/_session \
           -H 'Content-Type:application/x-www-form-urlencoded' \
           -d 'name=anna&password=secret'

CouchDB replies, and we'll give you some more detail:

    < HTTP/1.1 200 OK
    < Set-Cookie: AuthSession=YW5uYTo0QUIzOTdFQjrC4ipN-D-53hw1sJepVzcVxnriEw;
    < Version=1; Path=/; HttpOnly
    > ...
    <
    {"ok":true}

A 200 OK(1) response code tells us all is well, a Set-Cookie(2) header
includes the token we can use for the next request, and the standard
JSON response tells us again that the request was successful.

  Now we can use this token to make another request as the same user
without sending the username and password again:

    > curl -vX PUT $HOST/mydatabase \
           --cookie AuthSession=YW5uYTo0QUIzOTdFQjrC4ipN-D-53hw1sJepVzcVxnriEw \
           -H "X-CouchDB-WWW-Authenticate: Cookie" \
           -H "Content-Type:application/x-www-form-urlencoded"
    {"ok":true}

You can keep using this token for 10 minutes by default. After 10
minutes you need to authenticate your user again. The token lifetime
can be configured with the timeout (in seconds) setting in the *note
couch_httpd_auth: 173. configuration section.

See also
........

*note Cookie Authentication API Reference: 174.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (2) http://tools.ietf.org/html/rfc2109#section-4.2.2


File: CouchDB.info,  Node: Authentication Database,  Prev: Authentication,  Up: Security

1.6.2 Authentication Database
-----------------------------

You may already note, that CouchDB administrators are defined within
config file and you now wondering does regular users are also stored
there. No, they don't.  CouchDB has special `authentication database' -
`_users' by default - that stores all registered users as JSON
documents.

  CouchDB uses special database (called `_users' by default) to store
information about registered users. This is a `system database' - this
means that while it shares common *note database API: 15f, there are
some special security-related constraints applied and used agreements
on documents structure. So how `authentication database' is different
from others?

   - Only administrators may browse list of all documents (*note GET
     /_users/_all_docs: 19.)

   - Only administrators may listen *note changes feed: fc. (*note GET
     /_users/_changes: 1c.)

   - Only administrators may execute design functions like *note views:
     10c, *note shows: 176. and *note others: 177.

   - Only administrators may GET(1), PUT(2) or DELETE(3) any document
     (to be honest, that they always can do)

   - There is special design document `_auth' that cannot be modified

   - Every document (of course, except `design documents') represents
     registered CouchDB users and belong to them

   - Users may only access (*note GET /_users/org.couchdb.user;Jan:
     46.) or modify (*note PUT /_users/org.couchdb.user;Jan: 47.)
     documents that they owns

  These draconian rules are reasonable: CouchDB cares about user's
personal information and doesn't discloses it for everyone. Often,
users documents are contains not only system information like `login',
`password hash' and `roles', but also sensitive personal information
like: real name, email, phone, special internal identifications and
more - this is not right information that you want to share with the
World.

* Menu:

* Users Documents::
* Creating New User::
* Password Changing::
* Users Public Information::

Users Documents

* Why org.couchdb.user; prefix?: Why org couchdb user prefix?.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.7


File: CouchDB.info,  Node: Users Documents,  Next: Creating New User,  Up: Authentication Database

1.6.2.1 Users Documents
.......................

Each CouchDB user is stored in document format. These documents are
contains several _mandatory_ fields, that CouchDB handles for correct
authentication process:

   - *_id* (_string_): Document ID. Contains user's login with special
     prefix *note Why org.couchdb.user; prefix?: 179.

   - *derived_key* (_string_): PBKDF2(1) key

   - *name* (_string_): User's name aka login. *Immutable* e.g. you
     cannot rename existed user - you have to create new one

   - *roles* (_array_ of _string_): List of user roles. CouchDB doesn't
     provides any builtin roles, so you're free to define your own
     depending on your needs.  However, you cannot set system roles
     like `_admin' there. Also, only administrators may assign roles to
     users - by default all users have no roles

   - *password_sha* (_string_): Hashed password with salt. Used for
     `simple' `password_scheme'

   - *password_scheme* (_string_): Password hashing scheme. May be
     `simple' or `pbkdf2'

   - *salt* (_string_): Hash salt. Used for `simple' `password_scheme'

   - *type* (_string_): Document type. Constantly have value `user'

  Additionally, you may specify any custom fields that are relates to
the target user. This is good place to store user's private information
because only the target user and CouchDB administrators may browse it.

* Menu:

* Why org.couchdb.user; prefix?: Why org couchdb user prefix?.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/PBKDF2


File: CouchDB.info,  Node: Why org couchdb user prefix?,  Up: Users Documents

1.6.2.2 Why `org.couchdb.user:' prefix?
.......................................

The reason to have special prefix before user's login name is to have
namespaces which users are belongs to. This prefix is designed to
prevent replication conflicts when you'll try to merge two `_user'
databases or more.

  For current CouchDB releases, all users are belongs to the same
`org.couchdb.user' namespace and this cannot be changed, but we'd made
such design decision for future releases.


File: CouchDB.info,  Node: Creating New User,  Next: Password Changing,  Prev: Users Documents,  Up: Authentication Database

1.6.2.3 Creating New User
.........................

Creating new user is a very trivial operation. You need just to send
single PUT(1) request with user's data to CouchDB. Let's create user
with login `jan' and password `apple':

    curl -X PUT http://localhost:5984/_users/org.couchdb.user:jan \
         -H "Accept: application/json" \
         -H "Content-Type: application/json" \
         -d '{"name": "jan", "password": "apple", "roles": [], "type": "user"}'

This `curl' command will produce next HTTP request:

    PUT /_users/org.couchdb.user:jan HTTP/1.1
    Accept: application/json
    Content-Length: 62
    Content-Type: application/json
    Host: localhost:5984
    User-Agent: curl/7.31.0

And CouchDB responds with:

    HTTP/1.1 201 Created
    Cache-Control: must-revalidate
    Content-Length: 83
    Content-Type: application/json
    Date: Fri, 27 Sep 2013 07:33:28 GMT
    ETag: "1-e0ebfb84005b920488fc7a8cc5470cc0"
    Location: http://localhost:5984/_users/org.couchdb.user:jan
    Server: CouchDB (Erlang OTP)

    {"ok":true,"id":"org.couchdb.user:jan","rev":"1-e0ebfb84005b920488fc7a8cc5470cc0"}

Document successfully created what also means that user `jan' have
created too!  Let's check is this true:

    curl -X POST http://localhost:5984/_session -d 'name=jan&password=apple'

CouchDB should respond with:

    {"ok":true,"name":"jan","roles":[]}

Which means that username was recognized and password's hash matches
with stored one. If we specify wrong login and/or password, CouchDB
will notify us with the next error message:

    {"error":"unauthorized","reason":"Name or password is incorrect."}


  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6


File: CouchDB.info,  Node: Password Changing,  Next: Users Public Information,  Prev: Creating New User,  Up: Authentication Database

1.6.2.4 Password Changing
.........................

This is quite common situation: user had forgot their password, it was
leaked somehow (via copy-paste, screenshot, or by typing in wrong chat
window) or something else. Let's change password for our user `jan'.

  First of all, let's define what is the password changing from the
point of CouchDB and the authentication database. Since "users" are
"documents", this operation is nothing, but updating the document with
special field `password' which contains the _plain text password_.
Scared? No need to: the authentication database has special internal
hook on  document update which looks for this field and replaces it
with the _secured hash_, depending on chosen `password_scheme'.

  Summarizing above, we need to get document content, add `password'
field with new plain text password value and store JSON result to the
authentication database.

    curl -X GET http://localhost:5984/_users/org.couchdb.user:jan


    {
      "_id": "org.couchdb.user:jan",
      "_rev": "1-e0ebfb84005b920488fc7a8cc5470cc0",
      "derived_key": "e579375db0e0c6a6fc79cd9e36a36859f71575c3",
      "iterations": 10,
      "name": "jan",
      "password_scheme": "pbkdf2",
      "roles": [],
      "salt": "1112283cf988a34f124200a050d308a1",
      "type": "user"
    }

Here is our user's document. We may strip hashes from stored document
to reduce amount of posted data:

    curl -X PUT http://localhost:5984/_users/org.couchdb.user:jan \
         -H "Accept: application/json" \
         -H "Content-Type: application/json" \
         -H "If-Match: 1-e0ebfb84005b920488fc7a8cc5470cc0" \
         -d '{"name":"jan", "roles":[], "type":"user", "password":"orange"}'


    {"ok":true,"id":"org.couchdb.user:jan","rev":"2-ed293d3a0ae09f0c624f10538ef33c6f"}

Updated! Now let's check that password was really changed:

    curl -X POST http://localhost:5984/_session -d 'name=jan&password=apple'

CouchDB should respond with:

    {"error":"unauthorized","reason":"Name or password is incorrect."}

Looks like the password `apple' is wrong, what about `orange'?

    curl -X POST http://localhost:5984/_session -d 'name=jan&password=orange'

CouchDB should respond with:

    {"ok":true,"name":"jan","roles":[]}

Hooray! You may wonder why so complex: need to retrieve user's
document, add special field to it, post it back - where is one big
button that changes the password without worry about document's
content? Actually, *note Futon: fe. has such at the right bottom corner
if you have logged in - all implementation details are hidden from your
sight.

     Note: There is no password confirmation for API request: you
     should implement it on your application layer like Futon does.


File: CouchDB.info,  Node: Users Public Information,  Prev: Password Changing,  Up: Authentication Database

1.6.2.5 Users Public Information
................................

New in version 1.4.

  Sometimes users _wants_ to share some information with the World. For
instance, their contact email to let other users get in touch with
them. To solve this problem, but still keep sensitive and private
information secured there is special *note configuration: 17e. option
*note public_fields: 64. In this options you may define comma separated
list of users document fields that will be publicity available.

  Normally, if you request any user's document and you're not
administrator or this document owner, CouchDB will respond with 404 Not
Found(1):

    curl http://localhost:5984/_users/org.couchdb.user:robert


    {"error":"not_found","reason":"missing"}

This response is constant for both cases when user exists or not exists
- by security reasons.

  Now let's share field `name'. First, setup the `public_fields'
configuration option. Remember, that this action requires
administrator's privileges and the next command will ask for password
for user `admin', assuming that they are the server administrator:

    curl -X PUT http://localhost:5984/_config/couch_http_auth/public_fields \
         -H "Content-Type: application/json" \
         -d '"name"' \
         -u admin

What have changed? Let's check Robert's document once again:

    curl http://localhost:5984/_users/org.couchdb.user:robert


    {"_id":"org.couchdb.user:robert","_rev":"6-869e2d3cbd8b081f9419f190438ecbe7","name":"robert"}

Good news! Now we may read field `name' from _every user's document
without need to be an administrator_. That's important note: don't
publish sensitive information, especially without user's acknowledge -
they may not like such actions from your side.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5


File: CouchDB.info,  Node: Futon Web GUI Administration Panel,  Next: cURL Your Command Line Friend,  Prev: Security,  Up: Introduction

1.7 Futon: Web GUI Administration Panel
=======================================

Futon is a native web-based interface built into CouchDB. It provides a
basic interface to the majority of the functionality, including the
ability to create, update, delete and view documents and views, provides
access to the configuration parameters, and an interface for initiating
replication.

  The default view is the Overview page which provides you with a list
of the databases. The basic structure of the page is consistent
regardless of the section you are in. The main panel on the left
provides the main interface to the databases, configuration or
replication systems. The side panel on the right provides navigation to
the main areas of Futon interface:

 [image src="futon-overview.png" alt="Futon Overview" ]

Figure: Futon Overview

  The main sections are:

   - Overview

     The main overview page, which provides a list of the databases and
     provides the interface for querying the database and creating and
     updating documents. See *note Managing Databases and Documents:
     181.

   - Configuration

     An interface into the configuration of your CouchDB installation.
     The interface allows you to edit the different configurable
     parameters.  For more details on configuration, see *note
     Configuring CouchDB: 17e. section.

   - Replicator

     An interface to the replication system, enabling you to initiate
     replication between local and remote databases. See *note
     Configuring Replication: 182.

   - Status

     Displays a list of the running background tasks on the server.
     Background tasks include view index building, compaction and
     replication. The Status page is an interface to the *note Active
     Tasks: 183. API call.

   - Verify Installation

     The Verify Installation allows you to check whether all of the
     components of your CouchDB installation are correctly installed.

   - Test Suite

     The Test Suite section allows you to run the built-in test suite.
     This executes a number of test routines entirely within your
     browser to test the API and functionality of your CouchDB
     installation. If you select this page, you can run the tests by
     using the Run All button. This will execute all the tests, which
     may take some time.

* Menu:

* Managing Databases and Documents::
* Configuring Replication::


File: CouchDB.info,  Node: Managing Databases and Documents,  Next: Configuring Replication,  Up: Futon Web GUI Administration Panel

1.7.1 Managing Databases and Documents
--------------------------------------

You can manage databases and documents within Futon using the main
Overview section of the Futon interface.

  To create a new database, click the Create Database ELLIPSIS button.
You will be prompted for the database name, as shown in the figure
below.

 [image src="futon-createdb.png" alt="Creating a Database" ]

Figure: Creating a Database

  Once you have created the database (or selected an existing one), you
will be shown a list of the current documents. If you create a new
document, or select an existing document, you will be presented with the
edit document display.

  Editing documents within Futon requires selecting the document and
then editing (and setting) the fields for the document individually
before saving the document back into the database.

  For example, the figure below shows the editor for a single document,
a newly created document with a single ID, the document `_id' field.

 [image src="futon-editdoc.png" alt="Editing a Document" ]

Figure: Editing a Document

  To add a field to the document:

  1. Click Add Field.

  2. In the fieldname box, enter the name of the field you want to
     create.  For example, “company”.

  3. Click the green tick next to the field name to confirm the field
     name change.

  4. Double-click the corresponding Value cell.

  5. Enter a company name, for example “Example”.

  6. Click the green tick next to the field value to confirm the field
     value.

  7. The document is still not saved as this point. You must explicitly
     save the document by clicking the Save Document button at the top
     of the page. This will save the document, and then display the new
     document with the saved revision information (the `_rev' field).

      [image src="futon-editeddoc.png" alt="Edited Document" ]

     Figure: Edited Document


  The same basic interface is used for all editing operations within
Futon.  You _must_ remember to save the individual element (fieldname,
value) using the green tick button, before then saving the document.


File: CouchDB.info,  Node: Configuring Replication,  Prev: Managing Databases and Documents,  Up: Futon Web GUI Administration Panel

1.7.2 Configuring Replication
-----------------------------

When you click the Replicator option within the Tools menu you are
presented with the Replicator screen. This allows you to start
replication between two databases by filling in or select the
appropriate options within the form provided.

 [image src="futon-replform.png" alt="Replication Form" ]

Figure: Replication Form

  To start a replication process, either the select the local database
or enter a remote database name into the corresponding areas of the
form.  Replication occurs from the database on the left to the database
on the right.

  If you are specifying a remote database name, you must specify the
full URL of the remote database (including the host, port number and
database name). If the remote instance requires authentication, you can
specify the username and password as part of the URL, for example
`http://username:pass@remotehost:5984/demo'.

  To enable continuous replication, click the Continuous checkbox.

  To start the replication process, click the Replicate button. The
replication process should start and will continue in the background. If
the replication process will take a long time, you can monitor the
status of the replication using the Status option under the Tools menu.

  Once replication has been completed, the page will show the
information returned when the replication process completes by the API.

  The Replicator tool is an interface to the underlying replication API.
For more information, see *note /_replicate: 15b. For more information
on replication, see *note Replication: 186.


File: CouchDB.info,  Node: cURL Your Command Line Friend,  Prev: Futon Web GUI Administration Panel,  Up: Introduction

1.8 cURL: Your Command Line Friend
==================================

The `curl' utility is a command line tool available on Unix, Linux, Mac
OS X and Windows and many other platforms. `curl' provides easy access
to the HTTP protocol (among others) directly from the command-line and
is therefore an ideal way of interacting with CouchDB over the HTTP
REST API.

  For simple `GET' requests you can supply the URL of the request. For
example, to get the database information:

    shell> curl http://127.0.0.1:5984

This returns the database information (formatted in the output below for
clarity):

    {
        "couchdb": "Welcome",
        "uuid": "85fb71bf700c17267fef77535820e371",
        "vendor": {
            "name": "The Apache Software Foundation",
            "version": "1.4.0"
        },
        "version": "1.4.0"
    }


     Note: For some URLs, especially those that include special
     characters such as ampersand, exclamation mark, or question mark,
     you should quote the URL you are specifying on the command line.
     For example:

         shell> curl 'http://couchdb:5984/_uuids?count=5'



  You can explicitly set the HTTP command using the `-X' command line
option. For example, when creating a database, you set the name of the
database in the URL you send using a PUT request:

    shell> curl -X PUT http://127.0.0.1:5984/demo
    {"ok":true}

But to obtain the database information you use a `GET' request (with
the return information formatted for clarity):

    shell> curl -X GET http://127.0.0.1:5984/demo
    {
       "compact_running" : false,
       "doc_count" : 0,
       "db_name" : "demo",
       "purge_seq" : 0,
       "committed_update_seq" : 0,
       "doc_del_count" : 0,
       "disk_format_version" : 5,
       "update_seq" : 0,
       "instance_start_time" : "1306421773496000",
       "disk_size" : 79
    }

For certain operations, you must specify the content type of request,
which you do by specifying the `Content-Type' header using the `-H'
command-line option:

    shell> curl -H 'Content-Type: application/json' http://127.0.0.1:5984/_uuids

You can also submit 'payload' data, that is, data in the body of the
HTTP request using the `-d' option. This is useful if you need to
submit JSON structures, for example document data, as part of the
request. For example, to submit a simple document to the `demo'
database:

    shell> curl -H 'Content-Type: application/json' \
                -X POST http://127.0.0.1:5984/demo \
                -d '{"company": "Example, Inc."}'
    {"ok":true,"id":"8843faaf0b831d364278331bc3001bd8",
     "rev":"1-33b9fbce46930280dab37d672bbc8bb9"}

In the above example, the argument after the `-d' option is the JSON of
the document we want to submit.

  The document can be accessed by using the automatically generated
document ID that was returned:

    shell> curl -X GET http://127.0.0.1:5984/demo/8843faaf0b831d364278331bc3001bd8
    {"_id":"8843faaf0b831d364278331bc3001bd8",
     "_rev":"1-33b9fbce46930280dab37d672bbc8bb9",
     "company":"Example, Inc."}

The API samples in the *note API Basics: f5. show the HTTP command, URL
and any payload information that needs to be submitted (and the
expected return value). All of these examples can be reproduced using
`curl' with the command-line examples shown above.


File: CouchDB.info,  Node: Installation,  Next: Configuring CouchDB,  Prev: Introduction,  Up: Top

2 Installation
**************

* Menu:

* Installation on Unix-like systems::
* Installation on Windows::
* Installation on Mac OS X::
* Installation on FreeBSD::

Installation on Unix-like systems

* Troubleshooting::
* Dependencies::
* Installing::
* First Run::
* Security Considerations::
* Running as a Daemon::

Dependencies

* Debian-based Systems::
* RedHat-based (Fedora, Centos, RHEL) Systems: RedHat-based Fedora Centos RHEL Systems.
* Mac OS X::

Running as a Daemon

* SysV/BSD-style Systems::

Installation on Windows

* Installation from binaries::
* Installation from sources::

Installation from sources

* Troubleshooting: Troubleshooting<2>.
* Dependencies: Dependencies<2>.
* General Notes::
* Setting Up Cygwin::
* Building Erlang::
* Building CouchDB::
* First Run: First Run<2>.

Installation on Mac OS X

* Installation using the Apache CouchDB native application::
* Installation with HomeBrew::
* Installation from MacPorts::

Installation with HomeBrew

* Running as a Daemon: Running as a Daemon<2>.

Installation on FreeBSD

* Installation from ports::

Installation from ports

* Start script::
* Post install::


File: CouchDB.info,  Node: Installation on Unix-like systems,  Next: Installation on Windows,  Up: Installation

2.1 Installation on Unix-like systems
=====================================

A high-level guide to Unix-like systems, inc. Mac OS X and Ubuntu.

  This document is the canonical source of installation information.
However, many systems have gotchas that you need to be aware of. In
addition, dependencies frequently change as distributions update their
archives. If you're running into trouble, be sure to check out the
wiki. If you have any tips to share, please also update the wiki so
that others can benefit from your experience.

See also
........

Community installation guides(1)

* Menu:

* Troubleshooting::
* Dependencies::
* Installing::
* First Run::
* Security Considerations::
* Running as a Daemon::

  ---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/Installation


File: CouchDB.info,  Node: Troubleshooting,  Next: Dependencies,  Up: Installation on Unix-like systems

2.1.1 Troubleshooting
---------------------

   * There is a troubleshooting guide(1).

   * There is a wiki(2) for general documentation.

   * There are collection of friendly mailing lists(3).

  Please work through these in order if you experience any problems.

  ---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/Troubleshooting

  (2) http://wiki.apache.org/couchdb

  (3) http://couchdb.apache.org/community/lists.html


File: CouchDB.info,  Node: Dependencies,  Next: Installing,  Prev: Troubleshooting,  Up: Installation on Unix-like systems

2.1.2 Dependencies
------------------

You should have the following installed:

   * Erlang OTP (>=R14B01, =<R17)(1)

   * ICU(2)

   * OpenSSL(3)

   * Mozilla SpiderMonkey (1.8.5)(4)

   * GNU Make(5)

   * GNU Compiler Collection(6)

   * libcurl(7)

   * help2man(8)

   * Python (>=2.7) for docs(9)

   * Python Sphinx (>=1.1.3)(10)

  It is recommended that you install Erlang OTP R13B-4 or above where
possible.  You will only need libcurl if you plan to run the JavaScript
test suite. And help2man is only need if you plan on installing the
CouchDB man pages.  Python and Sphinx are only required for building
the online documentation.

* Menu:

* Debian-based Systems::
* RedHat-based (Fedora, Centos, RHEL) Systems: RedHat-based Fedora Centos RHEL Systems.
* Mac OS X::

  ---------- Footnotes ----------

  (1) http://erlang.org/

  (2) http://icu-project.org/

  (3) http://www.openssl.org/

  (4) http://www.mozilla.org/js/spidermonkey/

  (5) http://www.gnu.org/software/make/

  (6) http://gcc.gnu.org/

  (7) http://curl.haxx.se/libcurl/

  (8) http://www.gnu.org/s/help2man/

  (9) http://python.org/

  (10) http://pypi.python.org/pypi/Sphinx


File: CouchDB.info,  Node: Debian-based Systems,  Next: RedHat-based Fedora Centos RHEL Systems,  Up: Dependencies

2.1.2.1 Debian-based Systems
............................

You can install the dependencies by running:

    sudo apt-get install build-essential
    sudo apt-get install erlang-base-hipe
    sudo apt-get install erlang-dev
    sudo apt-get install erlang-manpages
    sudo apt-get install erlang-eunit
    sudo apt-get install erlang-nox
    sudo apt-get install libicu-dev
    sudo apt-get install libmozjs-dev
    sudo apt-get install libcurl4-openssl-dev

There are lots of Erlang packages. If there is a problem with your
install, try a different mix. There is more information on the wiki.
Additionally, you might want to install some of the optional Erlang
tools which may also be useful.

  Be sure to update the version numbers to match your system's
available packages.

  Unfortunately, it seems that installing dependencies on Ubuntu is
troublesome.

See also
........

   * Installing on Debian(1)

   * Installing on Ubuntu(2)

  ---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/Installing_on_Debian

  (2) http://wiki.apache.org/couchdb/Installing_on_Ubuntu


File: CouchDB.info,  Node: RedHat-based Fedora Centos RHEL Systems,  Next: Mac OS X,  Prev: Debian-based Systems,  Up: Dependencies

2.1.2.2 RedHat-based (Fedora, Centos, RHEL) Systems
...................................................

You can install the dependencies by running:

    sudo yum install autoconf
    sudo yum install autoconf-archive
    sudo yum install automake
    sudo yum install curl-devel
    sudo yum install erlang-asn1
    sudo yum install erlang-erts
    sudo yum install erlang-eunit
    sudo yum install erlang-os_mon
    sudo yum install erlang-xmerl
    sudo yum install help2man
    sudo yum install js-devel
    sudo yum install libicu-devel
    sudo yum install libtool
    sudo yum install perl-Test-Harness

While CouchDB builds against the default js-devel-1.7.0 included in some
distributions, it's recommended to use a more recent js-devel-1.8.5.


File: CouchDB.info,  Node: Mac OS X,  Prev: RedHat-based Fedora Centos RHEL Systems,  Up: Dependencies

2.1.2.3 Mac OS X
................

Follow *note Installation with HomeBrew: 197. reference till `brew
install couchdb' step.


File: CouchDB.info,  Node: Installing,  Next: First Run,  Prev: Dependencies,  Up: Installation on Unix-like systems

2.1.3 Installing
----------------

Once you have satisfied the dependencies you should run:

    ./configure

This script will configure CouchDB to be installed into `/usr/local' by
default.

  If you wish to customise the installation, pass `-help' to this
script.

  If everything was successful you should see the following message:

    You have configured Apache CouchDB, time to relax.

Relax.

  To install CouchDB you should run:

    make && sudo make install

You only need to use `sudo' if you're installing into a system
directory.

  Try `gmake' if `make' is giving you any problems.

  If everything was successful you should see the following message:

    You have installed Apache CouchDB, time to relax.

Relax.


File: CouchDB.info,  Node: First Run,  Next: Security Considerations,  Prev: Installing,  Up: Installation on Unix-like systems

2.1.4 First Run
---------------

You can start the CouchDB server by running:

    sudo -i -u couchdb couchdb

This uses the `sudo' command to run the `couchdb' command as the
`couchdb' user.

  When CouchDB starts it should eventually display the following
message:

    Apache CouchDB has started, time to relax.

Relax.

  To check that everything has worked, point your web browser to:

    http://127.0.0.1:5984/_utils/index.html

From here you should verify your installation by pointing your web
browser to:

    http://localhost:5984/_utils/verify_install.html



File: CouchDB.info,  Node: Security Considerations,  Next: Running as a Daemon,  Prev: First Run,  Up: Installation on Unix-like systems

2.1.5 Security Considerations
-----------------------------

You should create a special `couchdb' user for CouchDB.

  On many Unix-like systems you can run:

    adduser --system \
            --home /usr/local/var/lib/couchdb \
            --no-create-home \
            --shell /bin/bash \
            --group --gecos \
            "CouchDB Administrator" couchdb

On Mac OS X you can use the Workgroup Manager(1) to create users.

  You must make sure that:

   * The user has a working POSIX shell

   * The user's home directory is `/usr/local/var/lib/couchdb'

  You can test this by:

   * Trying to log in as the `couchdb' user

   * Running `pwd' and checking the present working directory

  Change the ownership of the CouchDB directories by running:

    chown -R couchdb:couchdb /usr/local/etc/couchdb
    chown -R couchdb:couchdb /usr/local/var/lib/couchdb
    chown -R couchdb:couchdb /usr/local/var/log/couchdb
    chown -R couchdb:couchdb /usr/local/var/run/couchdb

Change the permission of the CouchDB directories by running:

    chmod 0770 /usr/local/etc/couchdb
    chmod 0770 /usr/local/var/lib/couchdb
    chmod 0770 /usr/local/var/log/couchdb
    chmod 0770 /usr/local/var/run/couchdb


  ---------- Footnotes ----------

  (1) http://www.apple.com/support/downloads/serveradmintools1047.html


File: CouchDB.info,  Node: Running as a Daemon,  Prev: Security Considerations,  Up: Installation on Unix-like systems

2.1.6 Running as a Daemon
-------------------------

* Menu:

* SysV/BSD-style Systems::


File: CouchDB.info,  Node: SysV/BSD-style Systems,  Up: Running as a Daemon

2.1.6.1 SysV/BSD-style Systems
..............................

You can use the `couchdb' init script to control the CouchDB daemon.

  On SysV-style systems, the init script will be installed into:

    /usr/local/etc/init.d

On BSD-style systems, the init script will be installed into:

    /usr/local/etc/rc.d

We use the `[init.d|rc.d]' notation to refer to both of these
directories.

  You can control the CouchDB daemon by running:

    /usr/local/etc/[init.d|rc.d]/couchdb [start|stop|restart|status]

If you wish to configure how the init script works, you can edit:

    /usr/local/etc/default/couchdb

Comment out the `COUCHDB_USER' setting if you're running as a
non-superuser.

  To start the daemon on boot, copy the init script to:

    /etc/[init.d|rc.d]

You should then configure your system to run the init script
automatically.

  You may be able to run:

    sudo update-rc.d couchdb defaults

If this fails, consult your system documentation for more information.

  A `logrotate' configuration is installed into:

    /usr/local/etc/logrotate.d/couchdb

Consult your `logrotate' documentation for more information.

  It is critical that the CouchDB logs are rotated so as not to fill
your disk.


File: CouchDB.info,  Node: Installation on Windows,  Next: Installation on Mac OS X,  Prev: Installation on Unix-like systems,  Up: Installation

2.2 Installation on Windows
===========================

There are two ways to install CouchDB on Windows.

* Menu:

* Installation from binaries::
* Installation from sources::


File: CouchDB.info,  Node: Installation from binaries,  Next: Installation from sources,  Up: Installation on Windows

2.2.1 Installation from binaries
--------------------------------

This is the simplest way to go.

  1. Get the latest Windows binaries(1) from CouchDB web site(2).  Old
     releases are available at archive(3).

  2. Follow the installation wizard steps:

        - Next on "Welcome" screen

        - Accept the License agreement

        - Select the installation directory

        - Specify "Start Menu" group name

        - Approve that you'd like to install CouchDB as service and let
          it be started automatically after installation (probably,
          you'd like so)

        - Verify installation settings

        - Install CouchDB

  3. Open up Futon(4) (if you hadn't selected autostart CouchDB after
     installation, you have to start it first manually)

  4. It's time to Relax!

     Note: In some cases you might been asked to reboot Windows to
     complete installation process, because of using on different
     Microsoft Visual C++ runtimes by CouchDB.

     Note: *Upgrading note*

     It's recommended to uninstall previous CouchDB version before
     upgrading, especially if the new one is built against different
     Erlang release.  The reason is simple: there may be leftover
     libraries with alternative or incompatible versions from old
     Erlang release that may create conflicts, errors and weird crashes.

     In this case, make sure you backup of your `local.ini' config and
     CouchDB database/index files.

  ---------- Footnotes ----------

  (1) http://couchdb.org/#download

  (2) http://couchdb.org/

  (3) http://archive.apache.org/dist/couchdb/binary/win/

  (4) http://localhost:5984/_utils


File: CouchDB.info,  Node: Installation from sources,  Prev: Installation from binaries,  Up: Installation on Windows

2.2.2 Installation from sources
-------------------------------

If you're Windows geek, this section is for you!

* Menu:

* Troubleshooting: Troubleshooting<2>.
* Dependencies: Dependencies<2>.
* General Notes::
* Setting Up Cygwin::
* Building Erlang::
* Building CouchDB::
* First Run: First Run<2>.


File: CouchDB.info,  Node: Troubleshooting<2>,  Next: Dependencies<2>,  Up: Installation from sources

2.2.2.1 Troubleshooting
.......................

   * There is a troubleshooting guide(1).

   * There is a wiki(2) for general documentation.

   * And some Windows-specific tips(3).

   * There are collection of friendly mailing lists(4).

  Please work through these in order if you experience any problems.

  ---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/Troubleshooting

  (2) http://wiki.apache.org/couchdb

  (3) http://wiki.apache.org/couchdb/Quirks_on_Windows

  (4) http://couchdb.apache.org/community/lists.html


File: CouchDB.info,  Node: Dependencies<2>,  Next: General Notes,  Prev: Troubleshooting<2>,  Up: Installation from sources

2.2.2.2 Dependencies
....................

You should have the following installed:

   * Erlang OTP (>=14B01, <R17)(1)

   * ICU (>=4.*)(2)

   * OpenSSL (>0.9.8r)(3)

   * Mozilla SpiderMonkey (=1.8.5)(4)

   * Cygwin(5)

   * Microsoft SDK 7.0 or 7.1(6)

   * libcurl (>=7.20)(7)

   * help2man(8)

   * Python (>=2.7) for docs(9)

   * Python Sphinx (>=1.1.3)(10)

  You will only need libcurl if you plan to run the JavaScript test
suite. And help2man is only need if you plan on installing the CouchDB
man pages.  Python and Sphinx are only required for building the online
documentation.

  ---------- Footnotes ----------

  (1) http://erlang.org/

  (2) http://icu-project.org/

  (3) http://www.openssl.org/

  (4) http://www.mozilla.org/js/spidermonkey/

  (5) http://www.cygwin.com/

  (6) http://www.microsoft.com/en-us/download/details.aspx?id=8279

  (7) http://curl.haxx.se/libcurl/

  (8) http://www.gnu.org/s/help2man/

  (9) http://python.org/

  (10) http://pypi.python.org/pypi/Sphinx


File: CouchDB.info,  Node: General Notes,  Next: Setting Up Cygwin,  Prev: Dependencies<2>,  Up: Installation from sources

2.2.2.3 General Notes
.....................

   * When installing Cygwin, be sure to select all the `development'
     tools.

   * When installing Erlang, you must build it from source.

   * The CouchDB build requires a number of the Erlang build scripts.

   * All dependent libraries should be built with the same version of
     Microsoft SDK.

   * Do not try to link against libraries built with, or included in,
     Cygwin or MingW. They are not compatible with the Erlang/OTP or
     CouchDB build scripts.

   * ICU version 4.6 and later will build cleanly using MSBuild.

   * Python and Sphinx are optional for building the online
     documentation.  Use cygwin-provided Python and install Sphinx via
     easy_install or pip.  Further information is here
     <http://pypi.python.org/pypi/setuptools#id4>


File: CouchDB.info,  Node: Setting Up Cygwin,  Next: Building Erlang,  Prev: General Notes,  Up: Installation from sources

2.2.2.4 Setting Up Cygwin
.........................

Before starting any Cygwin terminals, run:

    set CYGWIN=nontsec

To set up your environment, run:

    [VS_BIN]/vcvars32.bat

Replace `[VS_BIN]' with the path to your Visual Studio `bin' directory.

  You must check that:

   * The `which link' command points to the Microsoft linker.

   * The `which cl' command points to the Microsoft compiler.

   * The `which mc' command points to the Microsoft message compiler.

   * The `which mt' command points to the Microsoft manifest tool.

   * The `which nmake' command points to the Microsoft make tool.

  If you do not do this, the build may fail due to Cygwin ones found in
`/usr/bin' being used instead.


File: CouchDB.info,  Node: Building Erlang,  Next: Building CouchDB,  Prev: Setting Up Cygwin,  Up: Installation from sources

2.2.2.5 Building Erlang
.......................

You must include Win32 OpenSSL, built statically from source. Use
exactly the same version as required by the Erlang/OTP build process.

  However, you can skip the GUI tools by running:

    echo "skipping gs" > lib/gs/SKIP

    echo "skipping ic" > lib/ic/SKIP

    echo "skipping jinterface" > lib/jinterface/SKIP

Follow the rest of the Erlang instructions as described.

  After running:

    ./otp_build release -a

You should run:

    ./release/win32/Install.exe -s

This will set up the release/win32/bin directory correctly. The CouchDB
installation scripts currently write their data directly into this
location.

  To set up your environment for building CouchDB, run:

    eval `./otp_build env_win32`

To set up the `ERL_TOP' environment variable, run:

    export ERL_TOP=[ERL_TOP]

Replace `[ERL_TOP]' with the Erlang source directory name.

  Remember to use `/cygdrive/c/' instead of `c:/' as the directory
prefix.

  To set up your path, run:

    export PATH=$ERL_TOP/release/win32/erts-5.8.5/bin:$PATH

If everything was successful, you should be ready to build CouchDB.

  Relax.


File: CouchDB.info,  Node: Building CouchDB,  Next: First Run<2>,  Prev: Building Erlang,  Up: Installation from sources

2.2.2.6 Building CouchDB
........................

Note that `win32-curl' is only required if you wish to run the developer
tests.

  The documentation step may be skipped using `--disable-docs' if you
wish.

  Once you have satisfied the dependencies you should run:

    ./configure \
        --with-js-include=/cygdrive/c/path_to_spidermonkey_include \
        --with-js-lib=/cygdrive/c/path_to_spidermonkey_lib \
        --with-win32-icu-binaries=/cygdrive/c/path_to_icu_binaries_root \
        --with-erlang=$ERL_TOP/release/win32/usr/include \
        --with-win32-curl=/cygdrive/c/path/to/curl/root/directory \
        --with-openssl-bin-dir=/cygdrive/c/openssl/bin \
        --with-msvc-redist-dir=/cygdrive/c/dir/with/vcredist_platform_executable \
        --disable-init \
        --disable-launchd \
        --prefix=$ERL_TOP/release/win32

This command could take a while to complete.

  If everything was successful you should see the following message:

    You have configured Apache CouchDB, time to relax.

Relax.

  To install CouchDB you should run:

    make install

If everything was successful you should see the following message:

    You have installed Apache CouchDB, time to relax.

Relax.

  To build the .exe installer package, you should run:

    make dist

Alternatively, you may run CouchDB directly from the build tree, but to
avoid any contamination do not run `make dist' after this.


File: CouchDB.info,  Node: First Run<2>,  Prev: Building CouchDB,  Up: Installation from sources

2.2.2.7 First Run
.................

You can start the CouchDB server by running:

    $ERL_TOP/release/win32/bin/couchdb.bat

When CouchDB starts it should eventually display the following message:

    Apache CouchDB has started, time to relax.

Relax.

  To check that everything has worked, point your web browser to:

    http://127.0.0.1:5984/_utils/index.html

From here you should run the verification tests in Firefox.

See also
........

Glazier: Automate building of CouchDB from source on Windows(1)

  ---------- Footnotes ----------

  (1) https://github.com/dch/glazier


File: CouchDB.info,  Node: Installation on Mac OS X,  Next: Installation on FreeBSD,  Prev: Installation on Windows,  Up: Installation

2.3 Installation on Mac OS X
============================

* Menu:

* Installation using the Apache CouchDB native application::
* Installation with HomeBrew::
* Installation from MacPorts::


File: CouchDB.info,  Node: Installation using the Apache CouchDB native application,  Next: Installation with HomeBrew,  Up: Installation on Mac OS X

2.3.1 Installation using the Apache CouchDB native application
--------------------------------------------------------------

The easiest way to run CouchDB on Mac OS X is through the native Mac OS
X application. Just follow the below instructions:

  1. Download Apache CouchDB for Mac OS X(1).  Old releases are
     available at archive(2).

  2. Double click on the Zip file

  3. Drag and drop the Apache CouchDB.app into Applications folder

  That's all, now CouchDB is installed on your Mac:

  1. Run Apache CouchDB application

  2. Open up Futon(3), the CouchDB admin interface

  3. Time to Relax!

  ---------- Footnotes ----------

  (1) http://couchdb.org/#download

  (2) http://archive.apache.org/dist/couchdb/binary/mac/

  (3) http://localhost:5984/_utils


File: CouchDB.info,  Node: Installation with HomeBrew,  Next: Installation from MacPorts,  Prev: Installation using the Apache CouchDB native application,  Up: Installation on Mac OS X

2.3.2 Installation with HomeBrew
--------------------------------

You can install the build tools by running:

    open /Applications/Installers/Xcode\ Tools/XcodeTools.mpkg

You will need Homebrew(1) installed to use the `brew' command. To
install the other *note dependencies: 193. run next commands:

    brew install autoconf
    brew install autoconf-archive
    brew install automake
    brew install libtool
    brew install erlang
    brew install icu4c
    brew install spidermonkey
    brew install curl

You may want to link ICU so that CouchDB can find the header files
automatically:

    brew link icu4c

The same is true for recent versions of Erlang:

    brew link erlang

Now it's time to brew CouchDB:

    brew install couchdb

The above Erlang install will use the bottled (pre-compiled) version if
you are: using `/usr/local' for `homebrew', and on 10.6 or 10.7. If
you're not on one of these, `homebrew' will build from source, so
consider doing:

    brew install erlang --no-docs

to trim down compilation time.

  If you're hacking on CouchDB, and we hope you will, you may try the
current git-based master (head) branch, or the next development release
using this `couchdb' recipe, using either `--head' or `--devel' options
respectively.  This will allow quick installation of the future release
branch when it becomes active. If you're not sure if you need this,
then you probably don't.  In both cases we assume you are comfortable
identifying bugs, and handling any potential upgrades between commits
to the codebase.

    brew install [--devel|--head] couchdb


     Note: OS X Lion might hang on the final brew.  See the thread at
     <https://github.com/mxcl/homebrew/issues/7024> it seems in most
     cases to be resolved by breaking out with `CTRL-C' and then
     repeating with `brew install -v couchdb'.

  If you wish to have CouchDB run as a daemon then, set up the account,
using the "User & Groups" preference pane:

   - Create a standard user `couchdb' with home directory as
     `/usr/local/var/lib/couchdb'

   - Create a group called `couchdb' and add yourself, the `couchdb'
     user, and any others you want to be able to edit config or db
     files directly to it.  Use the `advanced' group options to ensure
     the internal name is also correctly called `couchdb'.

  Some versions of Mac OS X ship a problematic OpenSSL library. If
you're experiencing troubles with CouchDB crashing intermittently with
a segmentation fault or a bus error, you will need to install your own
version of OpenSSL.

* Menu:

* Running as a Daemon: Running as a Daemon<2>.

  ---------- Footnotes ----------

  (1) http://mxcl.github.com/homebrew/


File: CouchDB.info,  Node: Running as a Daemon<2>,  Up: Installation with HomeBrew

2.3.2.1 Running as a Daemon
...........................

You can use the `launchctl' command to control the CouchDB daemon.

  You can load the configuration by running:

    sudo launchctl load \
         /usr/local/Library/LaunchDaemons/org.apache.couchdb.plist

You can stop the CouchDB daemon by running:

    sudo launchctl unload \
         /usr/local/Library/LaunchDaemons/org.apache.couchdb.plist

You can start CouchDB by running:

    sudo launchctl start org.apache.couchdb

You can restart CouchDB by running:

    sudo launchctl stop org.apache.couchdb

You can edit the launchd configuration by running:

    open /usr/local/Library/LaunchDaemons/org.apache.couchdb.plist

To start the daemon on boot, copy the configuration file to:

    /Library/LaunchDaemons

Consult your system documentation for more information.


File: CouchDB.info,  Node: Installation from MacPorts,  Prev: Installation with HomeBrew,  Up: Installation on Mac OS X

2.3.3 Installation from MacPorts
--------------------------------

To install CouchDB using MacPorts you have 2 package choices:

   - `couchdb' - the latest release version

   - `couchdb-devel' - updated every few weeks with the latest from the
     master branch

    $ sudo port install couchdb

should be enough. MacPorts takes care of installing all necessary
dependencies.  If you have already installed some of the CouchDB
dependencies via MacPorts, run this command to check and upgrade any
outdated ones, after installing CouchDB:

    $ sudo port upgrade couchdb

This will upgrade dependencies recursively, if there are more recent
versions available. If you want to run CouchDB as a service controlled
by the OS, load the launchd configuration which comes with the project,
with this command:

    $ sudo port load couchdb

and it should be up and accessible via Futon at
<http://127.0.0.1:5984/_utils>.  It should also be restarted
automatically after reboot.

  Updating the ports collection. The collection of port files has to be
updated to reflect the latest versions of available packages. In order
to do that run:

    $ sudo port selfupdate

to update the port tree, and then install just as explained.


File: CouchDB.info,  Node: Installation on FreeBSD,  Prev: Installation on Mac OS X,  Up: Installation

2.4 Installation on FreeBSD
===========================

* Menu:

* Installation from ports::

Installation from ports

* Start script::
* Post install::


File: CouchDB.info,  Node: Installation from ports,  Up: Installation on FreeBSD

2.4.1 Installation from ports
-----------------------------

    cd /usr/ports/databases/couchdb
    make install clean

This will install CouchDB from the ports collection.

* Menu:

* Start script::
* Post install::


File: CouchDB.info,  Node: Start script,  Next: Post install,  Up: Installation from ports

2.4.1.1 Start script
....................

The following options for `/etc/rc.conf' or `/etc/rc.conf.local' are
supported by the start script (defaults shown):

    couchdb_enable="NO"
    couchdb_enablelogs="YES"
    couchdb_user="couchdb"

After enabling the couchdb rc service use the following command to
start CouchDB:

    /usr/local/etc/rc.d/couchdb start

This script responds to the arguments `start', `stop', `status',
`rcvar' etc..

  The start script will also use settings from the following config
files:

   - /usr/local/etc/couchdb/default.ini

   - /usr/local/etc/couchdb/local.ini

  Administrators should use `default.ini' as reference and only modify
the `local.ini' file.


File: CouchDB.info,  Node: Post install,  Prev: Start script,  Up: Installation from ports

2.4.1.2 Post install
....................

In case the install script fails to install a noninteractive user
"couchdb" to be used for the database, the user needs to be created
manually:

  I used the `pw' command to add a user "couchdb" in group "couchdb":

    pw user add couchdb
    pw user mod couchdb -c 'CouchDB, time to relax' -s /usr/sbin/nologin -d /var/lib/couchdb
    pw group add couchdb

The user is added to `/etc/passwd' and should look similar to the
following:

    shell#  grep couchdb /etc/passwd
    couchdb:*:1013:1013:Couchdb, time to relax:/var/lib/couchdb/:/usr/sbin/nologin

To change any of these settings, please refrain from editing
`/etc/passwd' and instead use `pw user mod ...' or `vipw'. Make sure
that the user has no shell, but instead uses `/usr/sbin/nologin'. The
'*' in the second field means that this user can not login via password
authorization. For details use man 5 passwd(1).

  ---------- Footnotes ----------

  (1) http://linux.die.net/man/5/passwd


File: CouchDB.info,  Node: Configuring CouchDB,  Next: Replication<2>,  Prev: Installation,  Up: Top

3 Configuring CouchDB
*********************

* Menu:

* Introduction Into Configuring::
* Base Configuration::
* CouchDB HTTP Server::
* Authentication and Authorization::
* Compaction Configuration::
* Logging::
* Replicator::
* Query Servers::
* External Processes::
* HTTP Resource Handlers::
* CouchDB Internal Services::
* Miscellaneous Parameters::
* Proxying Configuration::

Introduction Into Configuring

* Configuration files::
* Parameter names and values::
* Setting parameters via the configuration file::
* Setting parameters via the HTTP API::

Base Configuration

* Base CouchDB Options::

CouchDB HTTP Server

* HTTP Server Options::
* Secure Socket Level Options::
* Cross-Origin Resource Sharing::
* Virtual Hosts::

Cross-Origin Resource Sharing

* Per Virtual Host Configuration::

Virtual Hosts

* Rewriting Hosts to a Path::

Authentication and Authorization

* Server Administrators::
* Authentication Configuration::
* HTTP OAuth Configuration::
* OAuth Configuration::

Compaction Configuration

* Database Compaction Options::
* Compaction Daemon Rules::
* Configuration of Compaction Daemon::
* Views Compaction Options::

Logging

* Logging options::
* Per module logging::

Replicator

* Replicator Database Configuration::

Query Servers

* Query Servers Definition::
* Query Servers Configuration::
* Native Erlang Query Server::

External Processes

* OS Daemons::
* OS Daemons settings::
* Update notifications::

HTTP Resource Handlers

* Global HTTP Handlers::
* Database HTTP Handlers::
* Design Documents HTTP Handlers::

CouchDB Internal Services

* CouchDB Daemonized Mini Apps::

Miscellaneous Parameters

* Configuration of Attachment Storage::
* Statistic Calculation::
* UUIDs Configuration::
* Vendor information::

Proxying Configuration

* CouchDB As Proxy::


File: CouchDB.info,  Node: Introduction Into Configuring,  Next: Base Configuration,  Up: Configuring CouchDB

3.1 Introduction Into Configuring
=================================

* Menu:

* Configuration files::
* Parameter names and values::
* Setting parameters via the configuration file::
* Setting parameters via the HTTP API::


File: CouchDB.info,  Node: Configuration files,  Next: Parameter names and values,  Up: Introduction Into Configuring

3.1.1 Configuration files
-------------------------

     Warning: The following section covering load order of config files
     applies only to UNIX-ish systems.  For Windows, only the provided
     `default.ini' and `local.ini' files are relevant. These can of
     course have content appended, which achieves the same type of
     functionality as outlined for UNIX-ish systems below.

By default, CouchDB reads configuration files from the following
locations, in the following order:

  1. `LOCALCONFDIR/default.ini'

  2. `LOCALCONFDIR/default.d/*.ini'

  3. `PLUGINS_DIR/*/priv/default.d/*.ini'

  4. `LOCALCONFDIR/local.ini'

  5. `LOCALCONFDIR/local.d/*.ini'

  The `LOCALCONFDIR' points to the directory that contains
configuration files (`/usr/local/etc/couchdb' by default). This
variable may vary from the target operation system and may be changed
during building from the source code.  For binary distributions, it
mostly points to the installation path (e.g. `C:\Program
Files\CouchDB\etc\couchdb' for Windows).

  To see the actual configuration files chain run in shell:

    couchdb -c

This will print out all _actual_ configuration files that will form the
result CouchDB configuration:

    /etc/couchdb/default.ini
    /etc/couchdb/default.d/geocouch.ini
    /etc/couchdb/local.ini
    /etc/couchdb/local.d/geocouch.ini
    /etc/couchdb/local.d/vendor.ini

Settings in successive documents override the settings in earlier
entries.  For example, setting the *note httpd/bind_address: 90.
parameter in `local.ini' would override any setting in `default.ini'.

     Warning: The `default.ini' file may be overwritten during an
     upgrade or re-installation, so localised changes should be made to
     the `local.ini' file or files within the `local.d' directory.

  The configuration files chain may be changed by specifying additional
sources by using next command line options:

   - `-a': adds configuration file to the chain

   - `-A': adds configuration directory to the chain

  Let's add these options and see how the configuration chain changes:

    shell> couchdb -c -a /home/couchdb/custom.ini
    /etc/couchdb/default.ini
    /etc/couchdb/default.d/geocouch.ini
    /etc/couchdb/local.ini
    /etc/couchdb/local.d/geocouch.ini
    /etc/couchdb/local.d/vendor.ini
    /home/couchdb/custom.ini

In case when `/home/couchdb/custom.ini' exists it will be added to the
configuration chain.


File: CouchDB.info,  Node: Parameter names and values,  Next: Setting parameters via the configuration file,  Prev: Configuration files,  Up: Introduction Into Configuring

3.1.2 Parameter names and values
--------------------------------

All parameter names are _case-sensitive_. Every parameter takes a value
of one of five types: `boolean', `integer', `string', tuple(1) and
proplist(2). Boolean values can be written as `true' or `false'.

  Parameters with value type of `tuple' or `proplist' are following the
Erlang requirement for style and naming.

  ---------- Footnotes ----------

  (1) http://www.erlang.org/doc/reference_manual/data_types.html#id66049

  (2) http://www.erlang.org/doc/man/proplists.html


File: CouchDB.info,  Node: Setting parameters via the configuration file,  Next: Setting parameters via the HTTP API,  Prev: Parameter names and values,  Up: Introduction Into Configuring

3.1.3 Setting parameters via the configuration file
---------------------------------------------------

The common way to set some parameters is to edit the `local.ini' file
which is mostly located in the `etc/couchdb' directory relative your
installation path root.

  For example:

    ; This is a comment
    [section]
    param = value ; inline comments are allowed

Each configuration file line may contains `section' definition,
`parameter' specification, empty (space and newline characters only) or
`commented' line.  You can setup `inline' commentaries for `sections'
or `parameters'.

  The `section' defines group of parameters that are belongs to some
specific CouchDB subsystem. For instance, *note httpd: 8c. section
holds not only HTTP server parameters, but also others that directly
interacts with it.

  The `parameter' specification contains two parts divided by the
`equal' sign (`='): the parameter name on the left side and the
parameter value on the right one. The leading and following whitespace
for `=' is an optional to improve configuration readability.

     Note: In case when you'd like to remove some parameter from the
     `default.ini' without modifying that file, you may override in
     `local.ini', but without any value:

         [httpd_global_handlers]
         _all_dbs =

     This could be read as: "remove the `_all_dbs' parameter from the
     `httpd_global_handlers' section if it was ever set before".

  The semicolon (`;') signs about `commentary' start: everything after
this character is counted as commentary and doesn't process by CouchDB.

  After editing of configuration file CouchDB server instance should be
restarted to apply these changes.


File: CouchDB.info,  Node: Setting parameters via the HTTP API,  Prev: Setting parameters via the configuration file,  Up: Introduction Into Configuring

3.1.4 Setting parameters via the HTTP API
-----------------------------------------

Alternatively, configuration parameters could be set via the *note HTTP
API: 168. This API allows to change CouchDB configuration on-the-fly
without requiring a server restart:

    curl -X PUT http://localhost:5984/_config/uuids/algorithm -d '"random"'

In the response the old parameter's value returns:

    "sequential"

You should be careful with changing configuration via the HTTP API
since it's easy to make CouchDB unavailable. For instance, if you'd
like to change the *note httpd/bind_address: 90. for a new one:

    curl -X PUT http://localhost:5984/_config/httpd/bind_address -d '"10.10.0.128"'

However, if you make a typo, or the specified IP address is not
available from your network, CouchDB will be unavailable for you in
both cases and the only way to resolve this will be by remoting into
the server, correcting the errant file, and restarting CouchDB. To
protect yourself against such accidents you may set the *note
httpd/config_whitelist: 92. of permitted configuration parameters for
updates via the HTTP API. Once this option is set, further changes to
non-whitelisted parameters must take place via the configuration file,
and in most cases, also requires a server restart before hand-edited
options take effect.


File: CouchDB.info,  Node: Base Configuration,  Next: CouchDB HTTP Server,  Prev: Introduction Into Configuring,  Up: Configuring CouchDB

3.2 Base Configuration
======================

* Menu:

* Base CouchDB Options::


File: CouchDB.info,  Node: Base CouchDB Options,  Up: Base Configuration

3.2.1 Base CouchDB Options
--------------------------

 -- Config Section: [couchdb]
      -- Config Option: attachment_stream_buffer_size
          Higher values may result in better read performance due to
          fewer read operations and/or more OS page cache hits.
          However, they can also increase overall response time for
          writes when there are many attachment write requests in
          parallel.

              [couchdb]
              attachment_stream_buffer_size = 4096



      -- Config Option: database_dir
          Specifies location of CouchDB database files (`*.couch'
          named).  This location should be writable and readable for
          the user the CouchDB service runs as (`couchdb' by default).

              [couchdb]
              database_dir = /var/lib/couchdb



      -- Config Option: delayed_commits
          When this config value as `false' the CouchDB provides
          guaranty of `fsync' call before return 201 Created(1)
          response on each document saving.  Setting this config value
          as `true' may raise some overall performance with cost of
          losing durability - it's strongly not recommended to do such
          in production:

              [couchdb]
              delayed_commits = false


               Warning: Delayed commits are a feature of CouchDB that
               allows it to achieve better write performance for some
               workloads while sacrificing a small amount of
               durability. The setting causes CouchDB to wait up to a
               full second before committing new data after an update.
               If the server crashes before the header is written then
               any writes since the last commit are lost.

      -- Config Option: file_compression
          Changed in version 1.2: Added Google Snappy(2) compression
          algorithm.

          Method used to compress everything that is appended to
          database and view index files, except for attachments (see
          the *note attachments: 4f.  section). Available methods are:

             * `none': no compression

             * `snappy': use Google Snappy, a very fast
               compressor/decompressor

             * `deflate_N': use zlib's deflate; `N' is the compression
               level which ranges from `1' (fastest, lowest compression
               ratio) to `9' (slowest, highest compression ratio)

              [couchdb]
              file_compression = snappy



      -- Config Option: fsync_options
          Specifies when to make `fsync' calls. `fsync' makes sure that
          the contents of any file system buffers kept by the operating
          system are flushed to disk. There is generally no need to
          modify this parameter.

              [couchdb]
              fsync_options = [before_header, after_header, on_file_open]



      -- Config Option: max_dbs_open
          This option places an upper bound on the number of databases
          that can be open at once. CouchDB reference counts database
          accesses internally and will close idle databases as needed.
          Sometimes it is necessary to keep more than the default open
          at once, such as in deployments where many databases will be
          replicating continuously.

              [couchdb]
              max_dbs_open = 100



      -- Config Option: max_document_size
          Changed in version 1.3: This option now actually works.

          Defines a maximum size for JSON documents, in bytes. This
          limit does not apply to attachments, since they are
          transferred as a stream of chunks.  If you set this to a
          small value, you might be unable to modify configuration
          options, database security and other larger documents until a
          larger value is restored by editing the configuration file.

              [couchdb]
              max_document_size = 4294967296 ; 4 GB



      -- Config Option: os_process_timeout
          If an external process, such as a query server or external
          process, runs for this amount of microseconds without
          returning any results, it will be terminated. Keeping this
          value smaller ensures you get expedient errors, but you may
          want to tweak it for your specific needs.

              [couchdb]
              os_process_timeout = 5000 ; 5 sec



      -- Config Option: uri_file
          This file contains the full URI(3) that can be used to access
          this instance of CouchDB. It is used to help discover the
          port CouchDB is running on (if it was set to `0' (e.g.
          automatically assigned any free one).  This file should be
          writable and readable for the user that runs the CouchDB
          service (`couchdb' by default).

              [couchdb]
              uri_file = /var/run/couchdb/couchdb.uri



      -- Config Option: util_driver_dir
          Specifies location of binary drivers (`icu', `ejson', etc.).
          This location and its contents should be readable for the
          user that runs the CouchDB service.

              [couchdb]
              util_driver_dir = /usr/lib/couchdb/erlang/lib/couch-1.5.0/priv/lib



      -- Config Option: uuid
          New in version 1.3.

          Unique identifier for this CouchDB server instance.

              [couchdb]
              uuid = 0a959b9b8227188afc2ac26ccdf345a6



      -- Config Option: view_index_dir
          Specifies location of CouchDB view index files. This location
          should be writable and readable for the user that runs the
          CouchDB service (`couchdb' by default).

              [couchdb]
              view_index_dir = /var/lib/couchdb



---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (2) http://code.google.com/p/snappy/

  (3) http://en.wikipedia.org/wiki/URI


File: CouchDB.info,  Node: CouchDB HTTP Server,  Next: Authentication and Authorization,  Prev: Base Configuration,  Up: Configuring CouchDB

3.3 CouchDB HTTP Server
=======================

* Menu:

* HTTP Server Options::
* Secure Socket Level Options::
* Cross-Origin Resource Sharing::
* Virtual Hosts::


File: CouchDB.info,  Node: HTTP Server Options,  Next: Secure Socket Level Options,  Up: CouchDB HTTP Server

3.3.1 HTTP Server Options
-------------------------

 -- Config Section: [httpd]
      -- Config Option: allow_jsonp
          The `true' value of this option enables JSONP(1) support
          (it's `false' by default):

              [httpd]
              allow_jsonp = false



      -- Config Option: authentication_handlers
          List of used authentication handlers that used by CouchDB.
          You may extend them via third-party plugins or remove some of
          them if you won't let users to use one of provided methods:

              [httpd]
              authentication_handlers = {couch_httpd_oauth, oauth_authentication_handler}, {couch_httpd_auth, cookie_authentication_handler}, {couch_httpd_auth, default_authentication_handler}


             - `{couch_httpd_oauth, oauth_authentication_handler}':
               handles OAuth;

             - `{couch_httpd_auth, cookie_authentication_handler}':
               used for Cookie auth;

             - `{couch_httpd_auth, proxy_authentication_handler}': used
               for Proxy auth;

             - `{couch_httpd_auth, default_authentication_handler}':
               used for Basic auth;

             - `{couch_httpd_auth, null_authentication_handler}':
               disables auth.  Everlasting `Admin Party'!

      -- Config Option: bind_address
          Defines the IP address by which CouchDB will be accessible:

              [httpd]
              bind_address = 127.0.0.1

          To let CouchDB listen any available IP address, just setup
          `0.0.0.0' value:

              [httpd]
              bind_address = 0.0.0.0

          For IPv6 support you need to set `::1' if you want to let
          CouchDB listen local address:

              [httpd]
              bind_address = ::1

          or `::' for any available:

              [httpd]
              bind_address = ::



      -- Config Option: changes_timeout
          Specifies default `timeout' value for *note Changes Feed: fc.
          in milliseconds (60000 by default):

              [httpd]
              changes_feed = 60000 ; 60 seconds



      -- Config Option: config_whitelist
          Sets the configuration modification whitelist. Only
          whitelisted values may be changed via the *note config API:
          168. To allow the admin to change this value over HTTP,
          remember to include `{httpd,config_whitelist}' itself.
          Excluding it from the list would require editing this file to
          update the whitelist:

              [httpd]
              config_whitelist = [{httpd,config_whitelist}, {log,level}, {etc,etc}]



      -- Config Option: default_handler
          Specifies default HTTP requests handler:

              [httpd]
              default_handler = {couch_httpd_db, handle_request}



      -- Config Option: enable_cors
          New in version 1.3.

          Controls *note CORS: 1cf. feature:

              [httpd]
              enable_cors = false



      -- Config Option: log_max_chunk_size
          Defines maximum chunk size in bytes for *note _log: 1d0.
          resource:

              [httpd]
              log_max_chunk_size = 1000000



      -- Config Option: port
          Defined the port number to listen:

              [httpd]
              port = 5984

          To let CouchDB handle any free port, set this option to `0':

              [httpd]
              port = 0

          After that, CouchDB URI could be located within the URI file.

      -- Config Option: redirect_vhost_handler
          This option customizes the default function that handles
          requests to *note virtual hosts: ee.:

              [httpd]
              redirect_vhost_handler = {Module, Fun}

          The specified function take 2 arguments: the Mochiweb request
          object and the target path.

      -- Config Option: server_options
          Server options for the MochiWeb(2) component of CouchDB can
          be added to the configuration files:

              [httpd]
              server_options = [{backlog, 128}, {acceptor_pool_size, 16}]



      -- Config Option: secure_rewrites
          This option allow to isolate databases via subdomains:

              [httpd]
              secure_rewrites = true



      -- Config Option: socket_options
          The socket options for the listening socket in CouchDB can be
          specified as a list of tuples. For example:

              [httpd]
              socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]

          The options supported are a subset of full options supported
          by the TCP/IP stack. A list of the supported options are
          provided in the Erlang inet(3) documentation.

      -- Config Option: vhost_global_handlers
          List of global handlers that are available for *note virtual
          hosts: ee.:

              [httpd]
              vhost_global_handlers = _utils, _uuids, _session, _oauth, _users



      -- Config Option: x_forwarded_host
          The `x_forwarded_host' header (`X-Forwarded-Host' by default)
          is used to forward the original value of the `Host' header
          field in case, for example, if a reverse proxy is rewriting
          the "Host" header field to some internal host name before
          forward the request to CouchDB:

              [httpd]
              x_forwarded_host = X-Forwarded-Host

          This header has higher priority above `Host' one, if only it
          exists in the request.

      -- Config Option: x_forwarded_proto
          `x_forwarded_proto' header (`X-Forwarder-Proto' by default)
          is used for identifying the originating protocol of an HTTP
          request, since a reverse proxy may communicate with CouchDB
          instance using HTTP even if the request to the reverse proxy
          is HTTPS:

              [httpd]
              x_forwarded_proto = X-Forwarded-Proto



      -- Config Option: x_forwarded_ssl
          The `x_forwarded_ssl' header (`X-Forwarded-Ssl' by default)
          tells CouchDB that it should use the `https' scheme instead
          of the `http'. Actually, it's a synonym for
          `X-Forwarded-Proto: https' header, but used by some reverse
          proxies:

              [httpd]
              x_forwarded_ssl = X-Forwarded-Ssl



      -- Config Option: WWW-Authenticate
          Set this option to trigger basic-auth popup on unauthorized
          requests:

              [httpd]
              WWW-Authenticate = Basic realm="Welcome to the Couch!"



---------- Footnotes ----------

  (1) http://www.json-p.org/

  (2) https://github.com/mochi/mochiweb

  (3) http://www.erlang.org/doc/man/inet.html#setopts-2


File: CouchDB.info,  Node: Secure Socket Level Options,  Next: Cross-Origin Resource Sharing,  Prev: HTTP Server Options,  Up: CouchDB HTTP Server

3.3.2 Secure Socket Level Options
---------------------------------

 -- Config Section: [ssl]
     CouchDB supports SSL natively. All your secure connection needs can
     now be served without needing to setup and maintain a separate
     proxy server that handles SSL.

     SSL setup can be tricky, but the configuration in CouchDB was
     designed to be as easy as possible. All you need is two files; a
     certificate and a private key. If you bought an official SSL
     certificate from a certificate authority, both should be in your
     possession already.

     If you just want to try this out and don't want to pay anything
     upfront, you can create a self-signed certificate. Everything will
     work the same, but clients will get a warning about an insecure
     certificate.

     You will need the OpenSSL(1) command line tool installed. It
     probably already is.

         shell> mkdir /etc/couchdb/cert
         shell> cd /etc/couchdb/cert
         shell> openssl genrsa > privkey.pem
         shell> openssl req -new -x509 -key privkey.pem -out couchdb.pem -days 1095
         shell> chmod 600 privkey.pem couchdb.pem
         shell> chown couchdb privkey.pem couchdb.pem

     Now, you need to edit CouchDB's configuration, either by editing
     your `local.ini' file or using the `/_config' API calls or the
     configuration screen in Futon. Here is what you need to do in
     `local.ini', you can infer what needs doing in the other places.

     At first, *note enable the HTTPS daemon: 80.:

         [daemons]
         httpsd = {couch_httpd, start_link, [https]}

     Next, under `[ssl]' section setup newly generated certificates:

         [ssl]
         cert_file = /etc/couchdb/cert/couchdb.pem
         key_file = /etc/couchdb/cert/privkey.pem

     For more information please read certificates HOWTO(2).

     Now start (or restart) CouchDB. You should be able to connect to it
     using HTTPS on port 6984:

         shell> curl https://127.0.0.1:6984/
         curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
         error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
         More details here: http://curl.haxx.se/docs/sslcerts.html

         curl performs SSL certificate verification by default, using a "bundle"
         of Certificate Authority (CA) public keys (CA certs). If the default
         bundle file isn't adequate, you can specify an alternate file
         using the --cacert option.
         If this HTTPS server uses a certificate signed by a CA represented in
         the bundle, the certificate verification probably failed due to a
         problem with the certificate (it might be expired, or the name might
         not match the domain name in the URL).
         If you'd like to turn off curl's verification of the certificate, use
         the -k (or --insecure) option.

     Oh no! What happened?! Remember, clients will notify their users
     that your certificate is self signed. `curl' is the client in this
     case and it notifies you. Luckily you trust yourself (don't you?)
     and you can specify the `-k' option as the message reads:

         shell> curl -k https://127.0.0.1:6984/
         {"couchdb":"Welcome","version":"1.5.0"}

     All done.

      -- Config Option: cacert_file
          Path to file containing PEM encoded CA certificates (trusted
          certificates used for verifying a peer certificate). May be
          omitted if you do not want to verify the peer:

              [ssl]
              cacert_file = /etc/ssl/certs/ca-certificates.crt



      -- Config Option: cert_file
          Path to a file containing the user's certificate:

              [ssl]
              cert_file = /etc/couchdb/cert/couchdb.pem



      -- Config Option: key_file
          Path to file containing user's private PEM encoded key:

              [ssl]
              key_file = /etc/couchdb/cert/privkey.pem



      -- Config Option: password
          String containing the user's password. Only used if the
          private keyfile is password protected:

              [ssl]
              password = somepassword



      -- Config Option: ssl_certificate_max_depth
          Maximum peer certificate depth (must be set even if
          certificate validation is off):

              [ssl]
              ssl_certificate_max_depth = 1



      -- Config Option: verify_fun
          The verification fun (optional) if not specified, the default
          verification fun will be used:

              [ssl]
              verify_fun = {Module, VerifyFun}



      -- Config Option: verify_ssl_certificates
          Set to `true' to validate peer certificates:

              [ssl]
              verify_ssl_certificates = false



---------- Footnotes ----------

  (1) http://www.openssl.org/

  (2) http://www.openssl.org/docs/HOWTO/certificates.txt


File: CouchDB.info,  Node: Cross-Origin Resource Sharing,  Next: Virtual Hosts,  Prev: Secure Socket Level Options,  Up: CouchDB HTTP Server

3.3.3 Cross-Origin Resource Sharing
-----------------------------------

 -- Config Section: [cors]
     New in version 1.3: added CORS support, see JIRA COUCHDB-431(1)

     `CORS', or "Cross-Origin Resource Sharing", allows a resource such
     as a web page running JavaScript inside a browser, to make AJAX
     requests (XMLHttpRequests) to a different domain, without
     compromising the security of either party.

     A typical use case is to have a static website hosted on a CDN make
     requests to another resource, such as a hosted CouchDB instance.
     This avoids needing an intermediary proxy, using `JSONP' or
     similar workarounds to retrieve and host content.

     While CouchDB's integrated HTTP server has support for document
     attachments makes this less of a constraint for pure CouchDB
     projects, there are many cases where separating the static content
     from the database access is desirable, and CORS makes this very
     straightforward.

     By supporting CORS functionality, a CouchDB instance can accept
     direct connections to protected databases and instances, without
     the browser functionality being blocked due to same-origin
     constraints. CORS is supported today on over 90% of recent
     browsers.

     CORS support is provided as experimental functionality in 1.3, and
     as such will need to be enabled specifically in CouchDB's
     configuration. While all origins are forbidden from making
     requests by default, support is available for simple requests,
     preflight requests and per-vhost configuration.

     This section requires *note httpd/enable_cors: 94. option have
     `true' value:

         [httpd]
         enable_cors = true


      -- Config Option: credentials
          By default, neither authentication headers nor cookies are
          included in requests and responses. To do so requires both
          setting `XmlHttpRequest.withCredentials = true' on the
          request object in the browser and enabling credentials
          support in CouchDB.

              [cors]
              credentials = true

          CouchDB will respond to a credentials-enabled CORS request
          with an additional header,
          `Access-Control-Allow-Credentials=true'.

      -- Config Option: origins
          List of origins separated by a comma, `*' means accept all.
          You can’t set `origins = *' and `credentials = true' option
          at the same time:

              [cors]
              origins = *

          Access can be restricted by protocol, host and optionally by
          port. Origins must follow the scheme: <http://example.com:80>:

              [cors]
              origins = http://localhost, https://localhost, http://couch.mydev.name:8080

          Note that by default, no origins are accepted. You must
          define them explicitly.

      -- Config Option: headers
          List of accepted headers separated by a comma:

              [cors]
              headers = X-Couch-Id, X-Couch-Rev



      -- Config Option: methods
          List of accepted methods:

              [cors]
              methods = GET,POST



See also
........

     Original JIRA implementation ticket(2)

     Standards and References:

        - IETF RFCs relating to methods: RFC 2618(3), RFC 2817(4), RFC
          5789(5)

        - IETF RFC for Web Origins: RFC 6454(6)

        - W3C CORS standard(7)

     Mozilla Developer Network Resources:

        - Same origin policy for URIs(8)

        - HTTP Access Control(9)

        - Server-side Access Control(10)

        - Javascript same origin policy(11)

     Client-side CORS support and usage:

        - CORS browser support matrix(12)

        - COS tutorial(13)

        - XHR with CORS(14)

* Menu:

* Per Virtual Host Configuration::

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-431

  (2) https://issues.apache.org/jira/browse/COUCHDB-431

  (3) http://tools.ietf.org/html/rfc2618.html

  (4) http://tools.ietf.org/html/rfc2817.html

  (5) http://tools.ietf.org/html/rfc5789.html

  (6) http://tools.ietf.org/html/rfc6454.html

  (7) http://www.w3.org/TR/cors

  (8)
https://developer.mozilla.org/en-US/docs/Same-origin_policy_for_file:_URIs

  (9) https://developer.mozilla.org/En/HTTP_access_control

  (10) https://developer.mozilla.org/En/Server-Side_Access_Control

  (11)
https://developer.mozilla.org/en-US/docs/Same_origin_policy_for_JavaScript

  (12) http://caniuse.com/cors

  (13) http://www.html5rocks.com/en/tutorials/cors/

  (14)
http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/


File: CouchDB.info,  Node: Per Virtual Host Configuration,  Up: Cross-Origin Resource Sharing

3.3.3.1 Per Virtual Host Configuration
......................................

To set the options for a *note vhosts: ee, you will need to create a
section with the vhost name prefixed by `cors:'. Example case for the
vhost `example.com':

    [cors:example.com]
    credentials = false
    ; List of origins separated by a comma
    origins = *
    ; List of accepted headers separated by a comma
    headers = X-CouchDB-Header
    ; List of accepted methods
    methods = HEAD, GET



File: CouchDB.info,  Node: Virtual Hosts,  Prev: Cross-Origin Resource Sharing,  Up: CouchDB HTTP Server

3.3.4 Virtual Hosts
-------------------

 -- Config Section: [vhosts]
     CouchDB can map requests to different locations based on the
     `Host' header, even if they arrive on the same inbound IP address.

     This allows different virtual hosts on the same machine to map to
     different databases or design documents, etc. The most common use
     case is to map a virtual host to a *note Rewrite Handler: 1d6, to
     provide full control over the application's URIs.

     To add a virtual host, add a `CNAME' pointer to the DNS for your
     domain name. For development and testing, it is sufficient to add
     an entry in the hosts file, typically `/etc/hosts`' on Unix-like
     operating systems:

         # CouchDB vhost definitions, refer to local.ini for further details
         127.0.0.1       couchdb.local

     Test that this is working:

         $ ping -n 2 couchdb.local
         PING couchdb.local (127.0.0.1) 56(84) bytes of data.
         64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.025 ms
         64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.051 ms

     Finally, add an entry to your *note configuration file: 17e. in the
     `[vhosts]' section:

         [vhosts]
         couchdb.local:5984 = /example
         *.couchdb.local:5984 = /example

     If your CouchDB is listening on the the default HTTP port (80), or
     is sitting behind a proxy, then you don't need to specify a port
     number in the `vhost' key.

     The first line will rewrite the request to display the content of
     the `example' database. This rule works only if the `Host' header
     is `couchdb.local' and won't work for `CNAMEs'. The second rule,
     on the other hand, matches all `CNAMEs' to `example' db, so that
     both `www.couchdb.local' and `db.couchdb.local' will work.

* Menu:

* Rewriting Hosts to a Path::


File: CouchDB.info,  Node: Rewriting Hosts to a Path,  Up: Virtual Hosts

3.3.4.1 Rewriting Hosts to a Path
.................................

Like in the *note _rewrite: 1d6. handler you can match some variable
and use them to create the target path. Some examples:

    [vhosts]
    *.couchdb.local = /*
    :dbname. = /:dbname
    :ddocname.:dbname.example.com = /:dbname/_design/:ddocname/_rewrite

The first rule passes the wildcard as `dbname'. The second one does the
same, but uses a variable name. And the third one allows you to use any
URL with `ddocname' in any database with `dbname'.

  You could also change the default function to handle request by
changing the setting *note httpd/redirect_vhost_handler: 97.


File: CouchDB.info,  Node: Authentication and Authorization,  Next: Compaction Configuration,  Prev: CouchDB HTTP Server,  Up: Configuring CouchDB

3.4 Authentication and Authorization
====================================

* Menu:

* Server Administrators::
* Authentication Configuration::
* HTTP OAuth Configuration::
* OAuth Configuration::


File: CouchDB.info,  Node: Server Administrators,  Next: Authentication Configuration,  Up: Authentication and Authorization

3.4.1 Server Administrators
---------------------------

 -- Config Section: [admins]
     A default CouchDB install provides admin-level access to all
     connecting users.  This configuration is known as `Admin Party',
     and is not recommended for in-production usage. You can crash the
     party simply by creating the first admin account. CouchDB server
     administrators and passwords are not stored in the `_users'
     database, but in the `local.ini' file, which should be
     appropriately secured and readable only by system administrators:

         [admins]
         ;admin = mysecretpassword
         admin = -hashed-6d3c30241ba0aaa4e16c6ea99224f915687ed8cd,7f4a3e05e0cbc6f48a0035e3508eef90
         architect = -pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000

     Administrators can be added directly to the `[admins]' section,
     and when CouchDB is restarted, the passwords will be salted and
     encrypted. You may also use the HTTP interface to create
     administrator accounts; this way, you don't need to restart
     CouchDB, and there's no need to temporarily store or transmit
     passwords in plaintext. The HTTP `_config/admins' endpoint
     supports querying, deleting or creating new admin accounts:

         GET /_config/admins HTTP/1.1
         Accept: application/json
         Host: localhost:5984


         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 196
         Content-Type: application/json
         Date: Fri, 30 Nov 2012 11:37:18 GMT
         Server: CouchDB (Erlang/OTP)


         {
           "admin": "-hashed-6d3c30241ba0aaa4e16c6ea99224f915687ed8cd,7f4a3e05e0cbc6f48a0035e3508eef90",
           "architect": "-pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000"
         }

     If you already have a salted, encrypted password string (for
     example, from an old `local.ini' file, or from a different CouchDB
     server), then you can store the "raw" encrypted string, without
     having CouchDB doubly encrypt it.

         PUT /_config/admins/architect?raw=true HTTP/1.1
         Accept: application/json
         Content-Type: application/json
         Content-Length: 89
         Host: localhost:5984

         "-pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000"


         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 89
         Content-Type: application/json
         Date: Fri, 30 Nov 2012 11:39:18 GMT
         Server: CouchDB (Erlang/OTP)

         "-pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000"

     Further details are available in `security', including configuring
     the work factor for `PBKDF2', and the algorithm itself at PBKDF2
     (RFC-2898)(1).

     Changed in version 1.4: `PBKDF2' server-side hashed salted
     password support added, now as a synchronous call for the
     `_config/admins' API.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2898


File: CouchDB.info,  Node: Authentication Configuration,  Next: HTTP OAuth Configuration,  Prev: Server Administrators,  Up: Authentication and Authorization

3.4.2 Authentication Configuration
----------------------------------

 -- Config Section: [couch_httpd_auth]
      -- Config Option: allow_persistent_cookies
          Makes cookies persistent if `true'.

              [couch_httpd_auth]
              allow_persistent_cookies = false



      -- Config Option: auth_cache_size
          Number of *note User Context Object: 1dd. to cache in memory,
          to reduce disk lookups.

              [couch_httpd_auth]
              auth_cache_size = 50



      -- Config Option: authentication_db
          Specifies the name of the system database for storing CouchDB
          users.

              [couch_httpd_auth]
              authentication_db = _users


               Warning: If you change the database name, do not forget
               to remove or clean up the old database, since it will no
               longer be protected by CouchDB.

      -- Config Option: authentication_redirect
          Specifies the location for redirection on successful
          authentication if a `text/html' response is accepted by the
          client (via an `Accept' header).

              [couch_httpd_auth]
              authentication_redirect = /_utils/session.html



      -- Config Option: iterations
          New in version 1.3.

          The number of iterations for password hashing by the PBKDF2
          algorithm.  A higher  number provides better hash durability,
          but comes at a cost in performance for each request that
          requires authentication.

              [couch_httpd_auth]
              iterations = 10000



      -- Config Option: min_iterations
          New in version 1.6.

          The minimum number of iterations allowed for passwords hashed
          by the PBKDF2 algorithm. Any user with fewer iterations is
          forbidden.

              [couch_httpd_auth]
              min_iterations = 100



      -- Config Option: max_iterations
          New in version 1.6.

          The maximum number of iterations allowed for passwords hashed
          by the PBKDF2 algorithm. Any user with greater iterations is
          forbidden.

              [couch_httpd_auth]
              max_iterations = 100000



      -- Config Option: proxy_use_secret
          When this option is set to `true',  the *note
          couch_httpd_auth/secret: 66.  option is required for *note
          Proxy Authentication: 1de.

              [couch_httpd_auth]
              proxy_use_secret = false



      -- Config Option: public_fields
          New in version 1.4.

          A comma-separated list of field names in user documents (in
          *note couch_httpd_auth/authentication_db: 5e.) that can be
          read by any user. If unset or not specified, authenticated
          users can only retrieve their own document.

              [couch_httpd_auth]
              public_fields = first_name, last_name, contacts, url


               Note: Using the `public_fields' whitelist for user
               document properties requires setting the *note
               couch_httpd_auth/users_db_public: 68.  option to `true'
               (the latter option has no other purpose):

                   [couch_httpd_auth]
                   users_db_public = true



      -- Config Option: require_valid_user
          When this option is set to `true', no requests are allowed
          from anonymous users. Everyone must be authenticated.

              [couch_httpd_auth]
              require_valid_user = false



      -- Config Option: secret
          The secret token used for *note Proxy Authentication: 1de.
          method.

              [couch_httpd_auth]
              secret = 92de07df7e7a3fe14808cef90a7cc0d91



      -- Config Option: timeout
          Number of seconds since the last request before sessions will
          be expired.

              [couch_httpd_auth]
              timeout = 600



      -- Config Option: users_db_public
          New in version 1.4.

          Allow all users to view user documents. By default, only
          admins may browse all users documents, while users may browse
          only their own document.

              [couch_httpd_auth]
              users_db_public = false



      -- Config Option: x_auth_roles
          The HTTP header name (`X-Auth-CouchDB-Roles' by default) that
          contains the list of a user's roles, separated by a comma.
          Used for *note Proxy Authentication: 1de.

              [couch_httpd_auth]
              x_auth_roles = X-Auth-CouchDB-Roles



      -- Config Option: x_auth_token
          The HTTP header name (`X-Auth-CouchDB-Token' by default)
          containing the token used to authenticate the authorization.
          This token is an `HMAC-SHA1' created from the *note
          couch_httpd_auth/secret: 66. and *note
          couch_httpd_auth/x_auth_username: 6b. The secret key should be
          the same on the client and the CouchDB node. This token is
          optional if the value of the *note
          couch_httpd_auth/proxy_use_secret: 63. option is not `true'.
          Used for *note Proxy Authentication: 1de.

              [couch_httpd_auth]
              x_auth_roles = X-Auth-CouchDB-Token



      -- Config Option: x_auth_username
          The HTTP header name (`X-Auth-CouchDB-UserName' by default)
          containing the username. Used for *note Proxy Authentication:
          1de.

              [couch_httpd_auth]
              x_auth_username = X-Auth-CouchDB-UserName




File: CouchDB.info,  Node: HTTP OAuth Configuration,  Next: OAuth Configuration,  Prev: Authentication Configuration,  Up: Authentication and Authorization

3.4.3 HTTP OAuth Configuration
------------------------------

 -- Config Section: [couch_httpd_oauth]
     New in version 1.2.

      -- Config Option: use_users_db

     CouchDB is able to store OAuth credentials within user documents
     instead of config file by using this option:

         [couch_httpd_oauth]
         use_users_db = true

     If set to `true', OAuth token and consumer secrets will be looked
     up in the *note authentication database: 5e.  These secrets are
     stored in a top level field named `"oauth"' in user documents, as
     below.

         {
             "_id": "org.couchdb.user:joe",
             "type": "user",
             "name": "joe",
             "password_sha": "fe95df1ca59a9b567bdca5cbaf8412abd6e06121",
             "salt": "4e170ffeb6f34daecfd814dfb4001a73"
             "roles": ["foo", "bar"],
             "oauth": {
                 "consumer_keys": {
                     "consumerKey1": "key1Secret",
                     "consumerKey2": "key2Secret"
                 },
                 "tokens": {
                     "token1": "token1Secret",
                     "token2": "token2Secret"
                }
             }
         }




File: CouchDB.info,  Node: OAuth Configuration,  Prev: HTTP OAuth Configuration,  Up: Authentication and Authorization

3.4.4 OAuth Configuration
-------------------------

 -- Config Section: [oauth_*]
     To let users be authenticated by *note OAuth Authentication: 1e3. ( RFC
     5849(1)), three special sections must be set up in the *note
     configuration: 17e. file:

       1. The Consumer secret:

         [oauth_consumer_secrets]
         consumer1 = sekr1t


       2. Token secrets:

         [oauth_token_secrets]
         token1 = tokensekr1t


       3. A mapping from tokens to users:

         [oauth_token_users]
         token1 = couchdb_username



  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc5849.html


File: CouchDB.info,  Node: Compaction Configuration,  Next: Logging,  Prev: Authentication and Authorization,  Up: Configuring CouchDB

3.5 Compaction Configuration
============================

* Menu:

* Database Compaction Options::
* Compaction Daemon Rules::
* Configuration of Compaction Daemon::
* Views Compaction Options::


File: CouchDB.info,  Node: Database Compaction Options,  Next: Compaction Daemon Rules,  Up: Compaction Configuration

3.5.1 Database Compaction Options
---------------------------------

 -- Config Section: [database_compaction]
      -- Config Option: doc_buffer_size
          Specifies the copy buffer's maximum size in bytes:

              [database_compaction]
              doc_buffer_size = 524288



      -- Config Option: checkpoint_after
          Triggers a checkpoint after the specified amount of bytes
          were successfully copied to the compacted database:

              [database_compaction]
              checkpoint_after = 5242880




File: CouchDB.info,  Node: Compaction Daemon Rules,  Next: Configuration of Compaction Daemon,  Prev: Database Compaction Options,  Up: Compaction Configuration

3.5.2 Compaction Daemon Rules
-----------------------------

 -- Config Section: [compactions]
     A list of rules to determine when to run automatic compaction. The
     *note daemons/compaction_daemon: 7d. compacts databases and their
     respective view groups when all the condition parameters are
     satisfied. Configuration can be per-database or global, and it has
     the following format:

         [compactions]
         database_name = [ {ParamName, ParamValue}, {ParamName, ParamValue}, ... ]
         _default = [ {ParamName, ParamValue}, {ParamName, ParamValue}, ... ]

     For example:

         [compactions]
         _default = [{db_fragmentation, "70%"}, {view_fragmentation, "60%"}, {from, "23:00"}, {to, "04:00"}]


        - `db_fragmentation': If the ratio of legacy data, including
          metadata, to current data in the database file size is equal
          to or greater than this value, this condition is satisfied.
          The percentage is expressed as an integer percentage. This
          value is computed as:

              (file_size - data_size) / file_size * 100

          The data_size and file_size values can be obtained when
          querying *note GET /{db}: 15.

        - `view_fragmentation': If the ratio of legacy data, including
          metadata, to current data in a view index file size is equal
          to or greater then this value, this database compaction
          condition is satisfied. The percentage is expressed as an
          integer percentage. This value is computed as:

              (file_size - data_size) / file_size * 100

          The data_size and file_size values can be obtained when
          querying a *note view group's information URI: 1ea.

        - `from' and `to': The period for which a database (and its
          view group) compaction is allowed. The value for these
          parameters must obey the format:

              HH:MM - HH:MM  (HH in [0..23], MM in [0..59])


        - `strict_window': If a compaction is still running after the
          end of the allowed period, it will be canceled if this
          parameter is set to `true'.  It defaults to `false' and is
          meaningful only if the _period_ parameter is also specified.

        - `parallel_view_compaction': If set to `true', the database
          and its views are compacted in parallel. This is only useful
          on certain setups, like for example when the database and
          view index directories point to different disks. It defaults
          to `false'.

     Before a compaction is triggered, an estimation of how much free
     disk space is needed is computed. This estimation corresponds to
     two times the data size of the database or view index. When
     there's not enough free disk space to compact a particular
     database or view index, a warning message is logged.

     Examples:

       1. `[{db_fragmentation, "70%"}, {view_fragmentation, "60%"}]'

          The `foo' database is compacted if its fragmentation is 70%
          or more.  Any view index of this database is compacted only
          if its fragmentation is 60% or more.

       2. `[{db_fragmentation, "70%"}, {view_fragmentation, "60%"},
          {from, "00:00"}, {to, "04:00"}]'

          Similar to the preceding example but a compaction (database
          or view index) is only triggered if the current time is
          between midnight and 4 AM.

       3. `[{db_fragmentation, "70%"}, {view_fragmentation, "60%"},
          {from, "00:00"}, {to, "04:00"}, {strict_window, true}]'

          Similar to the preceding example - a compaction (database or
          view index) is only triggered if the current time is between
          midnight and 4 AM. If at 4 AM the database or one of its
          views is still compacting, the compaction process will be
          canceled.

       4. `[{db_fragmentation, "70%"}, {view_fragmentation, "60%"},
          {from, "00:00"}, {to, "04:00"}, {strict_window, true},
          {parallel_view_compaction, true}]'

          Similar to the preceding example, but a database and its
          views can be compacted in parallel.


File: CouchDB.info,  Node: Configuration of Compaction Daemon,  Next: Views Compaction Options,  Prev: Compaction Daemon Rules,  Up: Compaction Configuration

3.5.3 Configuration of Compaction Daemon
----------------------------------------

 -- Config Section: [compaction_daemon]
      -- Config Option: check_interval
          The delay, in seconds, between each check for which database
          and view indexes need to be compacted:

              [compaction_daemon]
              check_interval = 300



      -- Config Option: min_file_size
          If a database or view index file is smaller than this value
          (in bytes), compaction will not happen. Very small files
          always have high fragmentation, so compacting them is
          inefficient.

              [compaction_daemon]
              min_file_size = 131072




File: CouchDB.info,  Node: Views Compaction Options,  Prev: Configuration of Compaction Daemon,  Up: Compaction Configuration

3.5.4 Views Compaction Options
------------------------------

 -- Config Section: [view_compaction]
      -- Config Option: keyvalue_buffer_size
          Specifies maximum copy buffer size in bytes used during
          compaction:

              [view_compaction]
              keyvalue_buffer_size = 2097152




File: CouchDB.info,  Node: Logging,  Next: Replicator,  Prev: Compaction Configuration,  Up: Configuring CouchDB

3.6 Logging
===========

* Menu:

* Logging options::
* Per module logging::


File: CouchDB.info,  Node: Logging options,  Next: Per module logging,  Up: Logging

3.6.1 Logging options
---------------------

 -- Config Section: [log]
     CouchDB logging configuration.

      -- Config Option: file
          Specifies the location of file for logging output:

              [log]
              file = /var/log/couchdb/couch.log

          This path should be readable and writable for user that runs
          CouchDB service (`couchdb' by default).

      -- Config Option: level
          Changed in version 1.3:: Added `warning' level.

          Logging level defines how verbose and detailed logging will
          be:

              [log]
              level = info

          Available levels:

             - `debug': Very informative and detailed debug logging.
               Includes HTTP headers, external processes
               communications, authorization information and more;

             - `info': Informative logging. Includes HTTP requests
               headlines, startup of an external processes etc.

             - `warning': Warning messages are alerts about edge
               situations that may lead to errors. For instance,
               compaction daemon alerts about low or insufficient disk
               space at this level.

             - `error': Error level includes only things that going
               wrong, crush reports and HTTP error responses (5xx
               codes).

             - `none': Disables logging any messages.

      -- Config Option: include_sasl
          Includes SASL(1) information in logs:

              [log]
              include_sasl = true



---------- Footnotes ----------

  (1) http://www.erlang.org/doc/apps/sasl/


File: CouchDB.info,  Node: Per module logging,  Prev: Logging options,  Up: Logging

3.6.2 Per module logging
------------------------

 -- Config Section: [log_level_by_module]
     New in version 1.3.

     In this section you can specify *note log level: bf. on a
     per-module basis:

         [log_level_by_module]
         couch_httpd = debug
         couch_replicator = info
         couch_query_servers = error

     See src/*/*.erl(1) for available modules.

  ---------- Footnotes ----------

  (1)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=tree;f=src;hb=HEAD


File: CouchDB.info,  Node: Replicator,  Next: Query Servers,  Prev: Logging,  Up: Configuring CouchDB

3.7 Replicator
==============

* Menu:

* Replicator Database Configuration::


File: CouchDB.info,  Node: Replicator Database Configuration,  Up: Replicator

3.7.1 Replicator Database Configuration
---------------------------------------

 -- Config Section: [replicator]
     New in version 1.2.

      -- Config Option: db
          Specifies replicator database name:

              [replicator]
              db = _replicator



      -- Config Option: max_replication_retry_count
          Maximum replication retry count can be a non-negative integer
          or "infinity"

              [replicator]
              max_replication_retry_count = 10



      -- Config Option: worker_batch_size
          With lower batch sizes checkpoints are done more frequently.
          Lower batch sizes also reduce the total amount of used RAM
          memory:

              [replicator]
              worker_batch_size = 500



      -- Config Option: worker_processes
          More worker processes can give higher network throughput but
          can also imply more disk and network IO:

              [replicator]
              worker_processes = 4



      -- Config Option: http_connections
          Maximum number of HTTP connections per replication:

              [replicator]
              http_connections = 20



      -- Config Option: connection_timeout
          HTTP connection timeout per replication.  Even for very
          fast/reliable networks it might need to be increased if a
          remote database is too busy:

              [replicator]
              connection_timeout = 30000



      -- Config Option: retries_per_request
          If a request fails, the replicator will retry it up to N
          times:

              [replicator]
              retries_per_request = 10



      -- Config Option: socket_options
          Some socket options that might boost performance in some
          scenarios:

             - `{nodelay, boolean()}'

             - `{sndbuf, integer()}'

             - `{recbuf, integer()}'

             - `{priority, integer()}'

          See the inet(1) Erlang module's man page for the full list of
          options:

              [replicator]
              socket_options = [{keepalive, true}, {nodelay, false}]



      -- Config Option: checkpoint_interval
          New in version 1.6.

          Defines replication checkpoint interval in milliseconds.
          *note Replicator: 1f8. will *note requests: 15. from the
          Source database at the specified interval:

              [replicator]
              checkpoint_interval = 5000

          Lower intervals may be useful for frequently changing data,
          while higher values will lower bandwidth and make fewer
          requests for infrequently updated databases.

      -- Config Option: use_checkpoints
          New in version 1.6.

          If `use_checkpoints' is set to `true', CouchDB will make
          checkpoints during replication and at the completion of
          replication. CouchDB can efficiently resume replication from
          any of these checkpoints:

              [replicator]
              use_checkpoints = true


               Note: Checkpoints are stored in *note local documents:
               1f9.  on both the source and target databases (which
               requires write access).

               Warning: Disabling checkpoints is *not recommended* as
               CouchDB will scan the Source database's changes feed
               from the beginning.

      -- Config Option: cert_file
          Path to a file containing the user's certificate:

              [replicator]
              cert_file = /full/path/to/server_cert.pem



      -- Config Option: key_file
          Path to file containing user's private PEM encoded key:

              [replicator]
              key_file = /full/path/to/server_key.pem



      -- Config Option: password
          String containing the user's password. Only used if the
          private keyfile is password protected:

              [replicator]
              password = somepassword



      -- Config Option: verify_ssl_certificates
          Set to true to validate peer certificates:

              [replicator]
              verify_ssl_certificates = false



      -- Config Option: ssl_trusted_certificates_file
          File containing a list of peer trusted certificates (in the
          PEM format):

              [replicator]
              ssl_trusted_certificates_file = /etc/ssl/certs/ca-certificates.crt



      -- Config Option: ssl_certificate_max_depth
          Maximum peer certificate depth (must be set even if
          certificate validation is off):

              [replicator]
              ssl_certificate_max_depth = 3



---------- Footnotes ----------

  (1) http://www.erlang.org/doc/man/inet.html#setopts-2


File: CouchDB.info,  Node: Query Servers,  Next: External Processes,  Prev: Replicator,  Up: Configuring CouchDB

3.8 Query Servers
=================

* Menu:

* Query Servers Definition::
* Query Servers Configuration::
* Native Erlang Query Server::


File: CouchDB.info,  Node: Query Servers Definition,  Next: Query Servers Configuration,  Up: Query Servers

3.8.1 Query Servers Definition
------------------------------

 -- Config Section: [query_servers]
     Changed in version 1.2:: Added CoffeeScript query server

     CouchDB delegates computation of *note design documents: 177.
     functions to external query servers. The external query server is
     a special OS process which communicates with CouchDB over standard
     input/output using a very simple line-based protocol with JSON
     messages.

     The external query server may be defined in configuration file
     following next pattern:

         [query_servers]
         LANGUAGE = PATH ARGS

     Where:

        - `LANGUAGE': is a programming language which code this query
          server may execute. For instance, there are `python', `ruby',
          `clojure' and other query servers in wild. This value is also
          used for `ddoc' field `language' to determine which query
          server processes the functions.

          Note, that you may setup multiple query servers for the same
          programming language, but you have to name them different
          (like `python-dev' etc.).

        - `PATH': is a system path to the executable binary program
          that runs the query server.

        - `ARGS': optionally, you may specify additional command line
          arguments for the executable `PATH'.

     The default query server is written in *note JavaScript: f9,
     running via Mozilla SpiderMonkey(1):

         [query_servers]
         javascript = /usr/bin/couchjs /usr/share/couchdb/server/main.js
         coffeescript = /usr/bin/couchjs /usr/share/couchdb/server/main-coffee.js


See also
........

     *note Native Erlang Query Server: 1fe. that allows to process
Erlang `ddocs' and runs within CouchDB bypassing stdio communication
and JSON serialization/deserialization round trip overhead.

  ---------- Footnotes ----------

  (1) https://developer.mozilla.org/en/docs/SpiderMonkey


File: CouchDB.info,  Node: Query Servers Configuration,  Next: Native Erlang Query Server,  Prev: Query Servers Definition,  Up: Query Servers

3.8.2 Query Servers Configuration
---------------------------------

 -- Config Section: [query_server_config]
      -- Config Option: commit_freq
          Specifies the delay in seconds before view index changes are
          committed to disk.  The default value is `5':

              [query_server_config]
              commit_freq = 5



      -- Config Option: os_process_limit
          Amount of time in seconds that the Query Server may process
          CouchDB command:

              [query_server_config]
              os_process_limit = 10

          CouchDB will raise `os_process_timeout' error and kill the
          process in case the Query Server doesn't return any result
          within this limit.

      -- Config Option: reduce_limit
          Controls `Reduce overflow' error that raises when output of
          *note reduce functions: 201. is too big:

              [query_server_config]
              reduce_limit = true

          Normally, you don't have to disable (by setting `false'
          value) this option since main propose of `reduce' functions
          is to _reduce_ the input.


File: CouchDB.info,  Node: Native Erlang Query Server,  Prev: Query Servers Configuration,  Up: Query Servers

3.8.3 Native Erlang Query Server
--------------------------------

 -- Config Section: [native_query_servers]
          Warning: Due to security restrictions, the Erlang query
          server is disabled by default.

          Unlike the JavaScript query server, the Erlang one does not
          runs in a sandbox mode. This means that Erlang code has full
          access to your OS, filesystem and network, which may lead to
          security issues. While Erlang functions are faster than
          JavaScript ones, you need to be careful about running them,
          especially if they were written by someone else.

     CouchDB has a native Erlang query server, allowing you to write
     your map/reduce functions in Erlang.

     First, you'll need to edit your `local.ini' to include a
     `[native_query_servers]' section:

         [native_query_servers]
         erlang = {couch_native_process, start_link, []}

     To see these changes you will also need to restart the server.  To
     test out using *note Erlang views: 203, visit the `Futon' admin
     interface, create a new database and open a temporary view.  You
     should now be able to select `erlang' from the language drop-down.

     Let's try an example of map/reduce functions which count the total
     documents at each number of revisions (there are x many documents
     at version "1", and y documents at "2"... etc). Add a few
     documents to the database, then enter the following functions as a
     temporary view:

         %% Map Function
         fun({Doc}) ->
           <<K,_/binary>> = proplists:get_value(<<"_rev">>, Doc, null),
           V = proplists:get_value(<<"_id">>, Doc, null),
           Emit(<<K>>, V)
         end.

         %% Reduce Function
         fun(Keys, Values, ReReduce) -> length(Values) end.

     If all has gone well, after running the view you should see a list
     of the total number of documents at each revision number.


File: CouchDB.info,  Node: External Processes,  Next: HTTP Resource Handlers,  Prev: Query Servers,  Up: Configuring CouchDB

3.9 External Processes
======================

* Menu:

* OS Daemons::
* OS Daemons settings::
* Update notifications::


File: CouchDB.info,  Node: OS Daemons,  Next: OS Daemons settings,  Up: External Processes

3.9.1 OS Daemons
----------------

 -- Config Section: [os_daemons]
     This is a simple feature that allows users to configure CouchDB so
     that it maintains a given OS level process alive. If the process
     dies for any reason, CouchDB will restart it. If the process
     restarts too often, then CouchDB will mark it has halted and not
     attempt to restart it. The default max restart rate is `3' times
     in the last `5' seconds. These parameters are *note adjustable: c3.

     Commands that are started in this manner will have access to a
     simple API over stdio to request configuration parameters or to
     add log statements to CouchDB's logs.

     To configure an OS process as a CouchDB os_daemon, create a section
     in your `local.ini' like such:

         [os_daemons]
         daemon_name = /path/to/command -with args

     This will make CouchDB bring up the command and attempt to keep it
     alive. To request a configuration parameter, an `os_daemon' can
     write a simple JSON message to stdout like such:

         ["get", "os_daemons"]\n

     which would return:

         {"daemon_name": "/path/to/command -with args"}\n

     Or:

         ["get", "os_daemons", "daemon_name"]\n

     which would return:

         "/path/to/command -with args"\n

     There's no restriction on what configuration variables are visible.
     There's also no method for altering the configuration.

     If you would like your OS daemon to be restarted in the event that
     the configuration changes, you can send the following messages:

         ["register", $(SECTION)]\n

     When anything in that section changes, your OS process will be
     rebooted so it can pick up the new configuration settings. If you
     want to listen for changes on a specific key, you can send
     something like:

         ["register", $(SECTION), $(KEY)]\n

     In this case, CouchDB will only restart your daemon if that exact
     section/key pair changes, instead of anything in that entire
     section.

     Logging commands look like:

         ["log", $(JSON_MESSAGE)]\n

     Where `$(JSON_MESSAGE)' is arbitrary JSON data. These messages are
     logged at the 'info' level. If you want to log at a different level
     you can pass messages like such:

         ["log", $(JSON_MESSAGE), {"level": $(LEVEL)}]\n

     Where `$(LEVEL)' is one of "debug", "info", or "error".

     When implementing a daemon process to be managed by CouchDB you
     should remember to use a method like checking the parent process
     id or if stdin has been closed. These flags can tell you if your
     daemon process has been orphaned so you can exit cleanly.

     There is no interactivity between CouchDB and the running process,
     but you can use the OS Daemons service to create new HTTP servers
     and responders and then use the new proxy service to redirect
     requests and output to the CouchDB managed service. For more
     information on proxying, see *note CouchDB As Proxy: 208. For
     further background on the OS Daemon service, see *note CouchDB
     Externals API: 209.


File: CouchDB.info,  Node: OS Daemons settings,  Next: Update notifications,  Prev: OS Daemons,  Up: External Processes

3.9.2 OS Daemons settings
-------------------------

 -- Config Section: [os_daemon_settings]
      -- Config Option: max_retries
          Specifies maximum attempts to run *note os_daemons: c6. before
          mark them halted:

              [os_daemon_settings]
              max_retries = 3



      -- Config Option: retry_time
          Delay in seconds between *note os_daemons: c6. restarts:

              [os_daemon_settings]
              retry_time = 5




File: CouchDB.info,  Node: Update notifications,  Prev: OS Daemons settings,  Up: External Processes

3.9.3 Update notifications
--------------------------

 -- Config Section: [update_notification]
     CouchDB is able to spawn OS processes to notify them about recent
     databases updates. The notifications are in form of JSON messages
     sent as a line of text, terminated by `CR' (`\n') character, to
     the OS processes through `stdout':

         [update_notification]
         ;unique notifier name=/full/path/to/exe -with "cmd line arg"
         index_updater = ruby /usr/local/bin/index_updater.rb

     The update notification messages are depend upon of event type:

        - *Database created*:

              {"type":"created","db":"dbname"}


        - *Database updated*:  this event raises when any document gets
          updated for specified database:

              {"type":"updated","db":"dbname"}


        - *Design document updated*: for design document updates there
          is special event raised in additional to regular db update
          one:

              {"type":"ddoc_updated","db":"dbname","id":"_design/ddoc_name"}


        - *Database deleted*:

              {"type":"deleted","db":"dbname"}



          Note: New line (`\n') trailing character was removed from
          examples.


File: CouchDB.info,  Node: HTTP Resource Handlers,  Next: CouchDB Internal Services,  Prev: External Processes,  Up: Configuring CouchDB

3.10 HTTP Resource Handlers
===========================

* Menu:

* Global HTTP Handlers::
* Database HTTP Handlers::
* Design Documents HTTP Handlers::


File: CouchDB.info,  Node: Global HTTP Handlers,  Next: Database HTTP Handlers,  Up: HTTP Resource Handlers

3.10.1 Global HTTP Handlers
---------------------------

 -- Config Section: [httpd_global_handlers]
     These HTTP resources are provided for CouchDB server root level.

      -- Config Option: /
              [httpd_global_handlers]
              / = {couch_httpd_misc_handlers, handle_welcome_req, <<"Welcome">>}



      -- Config Option: favicon.ico
          The favicon handler looks for `favicon.ico' file within
          specified directory:

              [httpd_global_handlers]
              favicon.ico = {couch_httpd_misc_handlers, handle_favicon_req, "/usr/share/couchdb/www"}



      -- Config Option: _active_tasks
              [httpd_global_handlers]
              _active_tasks = {couch_httpd_misc_handlers, handle_task_status_req}



      -- Config Option: _all_dbs
          Provides a list of all server's databases:

              [httpd_global_handlers]
              _all_dbs = {couch_httpd_misc_handlers, handle_all_dbs_req}


               Note: Sometimes you don't want to disclose database
               names for everyone, but you also don't like/want/able to
               setup any proxies in front of CouchDB.  Removing this
               handler disables `_all_dbs' resource and there will be
               no way to get list of available databases.

               The same also is true for other resource handlers.

      -- Config Option: _config
          Provides resource to work with CouchDB config *note remotely:
          168.  Any config changes that was made via HTTP API are
          applied automatically on fly and doesn't requires server
          instance to be restarted:

              [httpd_global_handlers]
              _config = {couch_httpd_misc_handlers, handle_config_req}



      -- Config Option: _log
              [httpd_global_handlers]
              _log = {couch_httpd_misc_handlers, handle_log_req}


           -- Config Option: _oauth

              [httpd_global_handlers]
              _oauth = {couch_httpd_oauth, handle_oauth_req}



      -- Config Option: _replicate
          Provides an API to run *note temporary replications: 15b.:

              [httpd_global_handlers]
              _replicate = {couch_replicator_httpd, handle_req}



      -- Config Option: _restart
              [httpd_global_handlers]
              _restart = {couch_httpd_misc_handlers, handle_restart_req}



      -- Config Option: _session
          Provides a resource with information about the current user's
          session:

              [httpd_global_handlers]
              _session = {couch_httpd_auth, handle_session_req}



      -- Config Option: _stats
              [httpd_global_handlers]
              _stats = {couch_httpd_stats_handlers, handle_stats_req}



      -- Config Option: _utils
          The *note _utils: 213. handler serves `Futon's web
          administration page:

              [httpd_global_handlers]
              _utils = {couch_httpd_misc_handlers, handle_utils_dir_req, "/usr/share/couchdb/www"}

          In similar way, you may setup custom handler to let CouchDB
          serve any static files.

      -- Config Option: _uuids
          Provides a resource to get UUIDs generated by CouchDB:

              [httpd_global_handlers]
              _uuids = {couch_httpd_misc_handlers, handle_uuids_req}

          This is useful when your client environment isn't capable of
          providing truly random IDs (web browsers e.g.).


File: CouchDB.info,  Node: Database HTTP Handlers,  Next: Design Documents HTTP Handlers,  Prev: Global HTTP Handlers,  Up: HTTP Resource Handlers

3.10.2 Database HTTP Handlers
-----------------------------

 -- Config Section: [httpd_db_handlers]
     These HTTP resources are available on every CouchDB database.

      -- Config Option: _all_docs
              [httpd_db_handlers]
              _all_docs = {couch_mrview_http, handle_all_docs_req}



      -- Config Option: _changes
              [httpd_db_handlers]
              _changes = {couch_httpd_db, handle_changes_req}



      -- Config Option: _compact
              [httpd_db_handlers]
              _compact = {couch_httpd_db, handle_compact_req}



      -- Config Option: _design
              [httpd_db_handlers]
              _design = {couch_httpd_db, handle_design_req}



      -- Config Option: _temp_view
              [httpd_db_handlers]
              _temp_view = {couch_mrview_http, handle_temp_view_req}



      -- Config Option: _view_cleanup
              [httpd_db_handlers]
              _view_cleanup = {couch_mrview_http, handle_cleanup_req}




File: CouchDB.info,  Node: Design Documents HTTP Handlers,  Prev: Database HTTP Handlers,  Up: HTTP Resource Handlers

3.10.3 Design Documents HTTP Handlers
-------------------------------------

 -- Config Section: [httpd_design_handlers]

  These HTTP resources are provided for design documents.

      -- Config Option: _compact
              [httpd_design_handlers]
              _compact = {couch_mrview_http, handle_compact_req}



      -- Config Option: _info
              [httpd_design_handlers]
              _info = {couch_mrview_http, handle_info_req}



      -- Config Option: _list
              [httpd_design_handlers]
              _list = {couch_mrview_show, handle_view_list_req}



      -- Config Option: _rewrite
              [httpd_design_handlers]
              _rewrite = {couch_httpd_rewrite, handle_rewrite_req}



      -- Config Option: _show
              [httpd_design_handlers]
              _show = {couch_mrview_show, handle_doc_show_req}



      -- Config Option: _update
              [httpd_design_handlers]
              _update = {couch_mrview_show, handle_doc_update_req}



      -- Config Option: _view
              [httpd_design_handlers]
              _view = {couch_mrview_http, handle_view_req}




File: CouchDB.info,  Node: CouchDB Internal Services,  Next: Miscellaneous Parameters,  Prev: HTTP Resource Handlers,  Up: Configuring CouchDB

3.11 CouchDB Internal Services
==============================

* Menu:

* CouchDB Daemonized Mini Apps::


File: CouchDB.info,  Node: CouchDB Daemonized Mini Apps,  Up: CouchDB Internal Services

3.11.1 CouchDB Daemonized Mini Apps
-----------------------------------

 -- Config Section: [daemons]
      -- Config Option: auth_cache
          This daemon provides authentication caching to avoid repeated
          opening and closing of the `_users' database for each request
          requiring authentication:

              [daemons]
              auth_cache={couch_auth_cache, start_link, []}



      -- Config Option: compaction_daemon
          *note Automatic compaction: 1e9. daemon:

              [daemons]
              compaction_daemon={couch_compaction_daemon, start_link, []}



      -- Config Option: external_manager
          `External' processes manager:

              [daemons]
              external_manager={couch_external_manager, start_link, []}



      -- Config Option: httpd
          HTTP server daemon:

              [daemons]
              httpd={couch_httpd, start_link, []}



      -- Config Option: httpsd
          Provides *note SSL support: 16e. The default ssl port CouchDB
          listens on is `6984':

              [daemons]
              httpsd = {couch_httpd, start_link, [https]}



      -- Config Option: index_server
          The `couch_index' application is responsible for managing all
          of the different types of indexers. This manages the process
          handling for keeping track of the index state as well as
          managing the updater and compactor handling:

              [daemons]
              index_server={couch_index_server, start_link, []}



      -- Config Option: os_daemons
          *note OS Daemons: 207. manager:

              [daemons]
              os_daemons={couch_os_daemons, start_link, []}



      -- Config Option: query_servers
          *note Query servers: 1fc. manager:

              [daemons]
              query_servers={couch_query_servers, start_link, []}



      -- Config Option: replicator_manager
          Replications manager:

              [daemons]
              replicator_manager={couch_replicator_manager, start_link, []}



      -- Config Option: stats_aggregator
          Runtime statistics aggregator:

              [daemons]
              stats_aggregator={couch_stats_aggregator, start, []}



      -- Config Option: stats_collector
          Runtime statistics collector:

              [daemons]
              stats_collector={couch_stats_collector, start, []}



      -- Config Option: uuids
          *note UUIDs: 21c. generator daemon:

              [daemons]
              uuids={couch_uuids, start, []}



      -- Config Option: vhosts
          *note Virtual hosts: 1d4. manager. Provides dynamic add of
          vhosts without restart, wildcards support and dynamic routing
          via pattern matching

              [daemons]
              vhosts={couch_httpd_vhost, start_link, []}




File: CouchDB.info,  Node: Miscellaneous Parameters,  Next: Proxying Configuration,  Prev: CouchDB Internal Services,  Up: Configuring CouchDB

3.12 Miscellaneous Parameters
=============================

* Menu:

* Configuration of Attachment Storage::
* Statistic Calculation::
* UUIDs Configuration::
* Vendor information::


File: CouchDB.info,  Node: Configuration of Attachment Storage,  Next: Statistic Calculation,  Up: Miscellaneous Parameters

3.12.1 Configuration of Attachment Storage
------------------------------------------

 -- Config Section: [attachments]
      -- Config Option: compression_level
          Defines zlib compression level for the attachments from `1'
          (lowest, fastest) to `9' (highest, slowest). A value of `0'
          disables compression

              [attachments]
              compression_level = 8



      -- Config Option: compressible_types
          Since compression is ineffective for some types of files, it
          is possible to let CouchDB compress only some types of
          attachments, specified by their MIME type:

              [attachments]
              compressible_types = text/*, application/javascript, application/json, application/xml




File: CouchDB.info,  Node: Statistic Calculation,  Next: UUIDs Configuration,  Prev: Configuration of Attachment Storage,  Up: Miscellaneous Parameters

3.12.2 Statistic Calculation
----------------------------

 -- Config Section: [stats]
      -- Config Option: rate
          Rate of statistics gathering in milliseconds:

              [stats]
              rate = 1000



      -- Config Option: samples
          Samples are used to track the mean and standard value
          deviation within specified intervals (in seconds):

              [stats]
              samples = [0, 60, 300, 900]




File: CouchDB.info,  Node: UUIDs Configuration,  Next: Vendor information,  Prev: Statistic Calculation,  Up: Miscellaneous Parameters

3.12.3 UUIDs Configuration
--------------------------

 -- Config Section: [uuids]
      -- Config Option: algorithm
          Changed in version 1.3: Added `utc_id' algorithm.

          CouchDB provides various algorithms to generate the UUID
          values that are used for document `_id's by default:

              [uuids]
              algorithm = sequential

          Available algorithms:

             - `random': 128 bits of random awesome. All awesome, all
               the time:

                   {
                     "uuids": [
                       "5fcbbf2cb171b1d5c3bc6df3d4affb32",
                       "9115e0942372a87a977f1caf30b2ac29",
                       "3840b51b0b81b46cab99384d5cd106e3",
                       "b848dbdeb422164babf2705ac18173e1",
                       "b7a8566af7e0fc02404bb676b47c3bf7",
                       "a006879afdcae324d70e925c420c860d",
                       "5f7716ee487cc4083545d4ca02cd45d4",
                       "35fdd1c8346c22ccc43cc45cd632e6d6",
                       "97bbdb4a1c7166682dc026e1ac97a64c",
                       "eb242b506a6ae330bda6969bb2677079"
                     ]
                   }


             - `sequential': Monotonically increasing ids with random
               increments.  The first 26 hex characters are random, the
               last 6 increment in random amounts until an overflow
               occurs. On overflow, the random prefix is regenerated
               and the process starts over.

                   {
                     "uuids": [
                       "4e17c12963f4bee0e6ec90da54804894",
                       "4e17c12963f4bee0e6ec90da5480512f",
                       "4e17c12963f4bee0e6ec90da54805c25",
                       "4e17c12963f4bee0e6ec90da54806ba1",
                       "4e17c12963f4bee0e6ec90da548072b3",
                       "4e17c12963f4bee0e6ec90da54807609",
                       "4e17c12963f4bee0e6ec90da54807718",
                       "4e17c12963f4bee0e6ec90da54807754",
                       "4e17c12963f4bee0e6ec90da54807e5d",
                       "4e17c12963f4bee0e6ec90da54808d28"
                     ]
                   }


             - `utc_random': The time since Jan 1, 1970 UTC, in
               microseconds. The first 14 characters are the time in
               hex. The last 18 are random.

                   {
                     "uuids": [
                       "04dd32b3af699659b6db9486a9c58c62",
                       "04dd32b3af69bb1c2ac7ebfee0a50d88",
                       "04dd32b3af69d8591b99a8e86a76e0fb",
                       "04dd32b3af69f4a18a76efd89867f4f4",
                       "04dd32b3af6a1f7925001274bbfde952",
                       "04dd32b3af6a3fe8ea9b120ed906a57f",
                       "04dd32b3af6a5b5c518809d3d4b76654",
                       "04dd32b3af6a78f6ab32f1e928593c73",
                       "04dd32b3af6a99916c665d6bbf857475",
                       "04dd32b3af6ab558dd3f2c0afacb7d66"
                     ]
                   }


             - `utc_id': The time since Jan 1, 1970 UTC, in
               microseconds, plus the `utc_id_suffix' string. The first
               14 characters are the time in hex.  The *note
               uuids/utc_id_suffix: ec. string value is appended to
               these.

                   {
                     "uuids": [
                       "04dd32bd5eabcc@mycouch",
                       "04dd32bd5eabee@mycouch",
                       "04dd32bd5eac05@mycouch",
                       "04dd32bd5eac28@mycouch",
                       "04dd32bd5eac43@mycouch",
                       "04dd32bd5eac58@mycouch",
                       "04dd32bd5eac6e@mycouch",
                       "04dd32bd5eac84@mycouch",
                       "04dd32bd5eac98@mycouch",
                       "04dd32bd5eacad@mycouch"
                     ]
                   }



               Note: *Impact of UUID choices:* the choice of UUID has a
               significant impact on the layout of the B-tree, prior to
               compaction.

               For example, using a sequential UUID algorithm while
               uploading a large batch of documents will avoid the need
               to rewrite many intermediate B-tree nodes. A random UUID
               algorithm may require rewriting intermediate nodes on a
               regular basis, resulting in significantly decreased
               throughput and wasted disk space space due to the
               append-only B-tree design.

               It is generally recommended to set your own UUIDs, or
               use the sequential algorithm unless you have a specific
               need and take into account the likely need for
               compaction to re-balance the B-tree and reclaim wasted
               space.

      -- Config Option: utc_id_suffix
          New in version 1.3.

          The `utc_id_suffix' value will be appended to UUIDs generated
          by the `utc_id' algorithm. Replicating instances should have
          unique `utc_id_suffix' values to ensure uniqueness of
          `utc_id' ids.

              [uuid]
              utc_id_suffix = my-awesome-suffix



      -- Config Option: max_count
          New in version 1.5.1.

          No more than this number of UUIDs will be sent in a single
          request. If more UUIDs are requested, an HTTP error response
          will be thrown.

              [uuid]
              max_count = 1000




File: CouchDB.info,  Node: Vendor information,  Prev: UUIDs Configuration,  Up: Miscellaneous Parameters

3.12.4 Vendor information
-------------------------

 -- Config Section: [vendor]
     New in version 1.3.

     CouchDB distributors have the option of customizing CouchDB's
     welcome message. This is returned when requesting `GET /'.

         [vendor]
         name = The Apache Software Foundation
         version = 1.5.0




File: CouchDB.info,  Node: Proxying Configuration,  Prev: Miscellaneous Parameters,  Up: Configuring CouchDB

3.13 Proxying Configuration
===========================

* Menu:

* CouchDB As Proxy::


File: CouchDB.info,  Node: CouchDB As Proxy,  Up: Proxying Configuration

3.13.1 CouchDB As Proxy
-----------------------

The HTTP proxy feature makes it easy to map and redirect different
content through your CouchDB URL. The proxy works by mapping a pathname
and passing all content after that prefix through to the configured
proxy address.

  Configuration of the proxy redirect is handled through the
`[httpd_global_handlers]' section of the CouchDB configuration file
(typically `local.ini'). The format is:

    [httpd_global_handlers]
    PREFIX = {couch_httpd_proxy, handle_proxy_req, <<"DESTINATION">>}

Where:

   - `PREFIX'

     Is the string that will be matched. The string can be any valid
     qualifier, although to ensure that existing database names are not
     overridden by a proxy configuration, you can use an underscore
     prefix.

   - `DESTINATION'

     The fully-qualified URL to which the request should be sent. The
     destination must include the `http' prefix. The content is used
     verbatim in the original request, so you can also forward to
     servers on different ports and to specific paths on the target
     host.

  The proxy process then translates requests of the form:

    http://couchdb:5984/PREFIX/path

To:

    DESTINATION/path


     Note: Everything after `PREFIX' including the required forward
     slash will be appended to the `DESTINATION'.

  The response is then communicated back to the original client.

  For example, the following configuration:

    [httpd_global_handlers]
    _google = {couch_httpd_proxy, handle_proxy_req, <<"http://www.google.com">>}

Would forward all requests for `http://couchdb:5984/_google' to the
Google website.

  The service can also be used to forward to related CouchDB services,
such as `Lucene':

    [httpd_global_handlers]
    _fti = {couch_httpd_proxy, handle_proxy_req, <<"http://127.0.0.1:5985">>}


     Note: The proxy service is basic. If the request is not identified
     by the `DESTINATION', or the remainder of the `PATH' specification
     is incomplete, the original request URL is interpreted as if the
     `PREFIX' component of that URL does not exist.

     For example, requesting `http://couchdb:5984/_intranet/media' when
     `/media' on the proxy destination does not exist, will cause the
     request URL to be interpreted as `http://couchdb:5984/media'. Care
     should be taken to ensure that both requested URLs and destination
     URLs are able to cope.


File: CouchDB.info,  Node: Replication<2>,  Next: CouchDB Maintenance,  Prev: Configuring CouchDB,  Up: Top

4 Replication
*************

The replication is an incremental one way process involving two
databases (a source and a destination).

  The aim of the replication is that at the end of the process, all
active documents on the source database are also in the destination
database and all documents that were deleted in the source databases
are also deleted (if exists) on the destination database.

  The replication process only copies the last revision of a document,
so all previous revisions that were only on the source database are not
copied to the destination database.

* Menu:

* Introduction Into Replications::
* CouchDB Replication Protocol::
* Replicator Database::
* Replication and conflict model::

Introduction Into Replications

* Triggering Replication: Triggering Replication<2>.
* Replication Procedure::
* Master - Master replication::
* Controlling which Documents to Replicate::
* Migrating Data to Clients::

CouchDB Replication Protocol

* Language::
* Goals::
* Definitions::
* Algorithm::
* Filter replication::
* Optimisations::
* API Reference::
* Reference::

API Reference

* Push Only::
* Pull Only::

Replicator Database

* Basics::
* Documents describing the same replication::
* Canceling replications::
* Server restart::
* Changing the Replicator Database::
* Replicating the replicator database::
* Delegations::

Replication and conflict model

* CouchDB replication::
* Conflict avoidance::
* Conflicts in batches::
* Revision tree::
* Working with conflicting documents::
* Multiple document API::
* View map functions::
* Merging and revision history::
* Comparison with other replicating data stores::

Comparison with other replicating data stores

* Unison::
* Git::

Git

* What is the CouchDB replication protocol? Is it like Git?::


File: CouchDB.info,  Node: Introduction Into Replications,  Next: CouchDB Replication Protocol,  Up: Replication<2>

4.1 Introduction Into Replications
==================================

One of CouchDB's strengths is the ability to synchronize two copies of
the same database. This enables users to distribute data across several
nodes or datacenters, but also to move data more closely to clients.

  Replication involves a source and a destination database, which can
be one the same or on different CouchDB instances. The aim of the
replication is that at the end of the process, all active documents on
the source database are also in the destination database and all
documents that were deleted in the source databases are also deleted on
the destination database (if they even existed).

* Menu:

* Triggering Replication: Triggering Replication<2>.
* Replication Procedure::
* Master - Master replication::
* Controlling which Documents to Replicate::
* Migrating Data to Clients::


File: CouchDB.info,  Node: Triggering Replication<2>,  Next: Replication Procedure,  Up: Introduction Into Replications

4.1.1 Triggering Replication
----------------------------

Replication is controlled through documents in the *note Replicator
Database: 1f8, where each document describes one replication process
(see *note Replication Settings: 230.).

  A replication is triggered by storing a replication document in the
replicator database. Its status can be inspected through the active
tasks API (see *note /_active_tasks: 183. and *note Replication Status:
231.). A replication can be stopped by deleting the document, or by
updating it with its `cancel' property set to `true'.


File: CouchDB.info,  Node: Replication Procedure,  Next: Master - Master replication,  Prev: Triggering Replication<2>,  Up: Introduction Into Replications

4.1.2 Replication Procedure
---------------------------

During replication, CouchDB will compare the source and the destination
database to determine which documents differ between the source and the
destination database. It does so by following the *note Changes Feeds:
fc. on the source and comparing the documents to the destination.
Changes are submitted to the destination in batches where they can
introduce conflicts. Documents that already exist on the destination in
the same revision are not transferred. As the deletion of documents is
represented by a new revision, a document deleted on the source will
also be deleted on the target.

  A replication task will finish once it reaches the end of the changes
feed. If its `continuous' property is set to true, it will wait for new
changes to appear until the task is cancelled. Replication tasks also
create checkpoint documents on the destination to ensure that a
restarted task can continue from where it stopped, for example after it
has crashed.

  When a replication task is initiated on the sending node, it is
called _push_ replication, if it is initiated by the receiving node, it
is called _pull_ replication.


File: CouchDB.info,  Node: Master - Master replication,  Next: Controlling which Documents to Replicate,  Prev: Replication Procedure,  Up: Introduction Into Replications

4.1.3 Master - Master replication
---------------------------------

One replication task will only transfer changes in one direction. To
achieve master-master replication it is possible to set up two
replication tasks in different directions. When a change is replication
from database A to B by the first task, the second will discover that
the new change on B already exists in A and will wait for further
changes.


File: CouchDB.info,  Node: Controlling which Documents to Replicate,  Next: Migrating Data to Clients,  Prev: Master - Master replication,  Up: Introduction Into Replications

4.1.4 Controlling which Documents to Replicate
----------------------------------------------

There are two ways for controlling which documents are replicated, and
which are skipped. _Local_ documents are never replicated (see *note
Local (non-replicating) Documents: 1f9.).

  Additionally, *note Filter functions: 235. can be used in a
replication documents (see *note Replication Settings: 230.). The
replication task will then evaluate the filter function for each
document in the changes feed. The document will only be replicated if
the filter returns `true'.


File: CouchDB.info,  Node: Migrating Data to Clients,  Prev: Controlling which Documents to Replicate,  Up: Introduction Into Replications

4.1.5 Migrating Data to Clients
-------------------------------

Replication can be especially useful for bringing data closer to
clients.  PouchDB(1) implements the replication algorithm of CouchDB in
JavaScript, making it possible to make data from a CouchDB database
available in an offline browser application, and synchronize changes
back to CouchDB.

  ---------- Footnotes ----------

  (1) http://pouchdb.com/


File: CouchDB.info,  Node: CouchDB Replication Protocol,  Next: Replicator Database,  Prev: Introduction Into Replications,  Up: Replication<2>

4.2 CouchDB Replication Protocol
================================

The *CouchDB Replication protocol* is a protocol for synchronizing
documents between 2 peers over HTTP/1.1.

* Menu:

* Language::
* Goals::
* Definitions::
* Algorithm::
* Filter replication::
* Optimisations::
* API Reference::
* Reference::


File: CouchDB.info,  Node: Language,  Next: Goals,  Up: CouchDB Replication Protocol

4.2.1 Language
--------------

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119(1).

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2119.html


File: CouchDB.info,  Node: Goals,  Next: Definitions,  Prev: Language,  Up: CouchDB Replication Protocol

4.2.2 Goals
-----------

The CouchDB Replication protocol is a synchronization protocol for
synchronizing documents between 2 peers over HTTP/1.1.

  In theory the CouchDB protocol can be used between products that
implement it. However the reference implementation, written in
Erlang(1), is provided by the couch_replicator(2) module available in
Apache CouchDB.

  The CouchDB(3) replication protocol is using the CouchDB REST API(4)
and so is based on HTTP and the Apache CouchDB MVCC Data model. The
primary goal of this specification is to describe the CouchDB
replication algorithm.

  ---------- Footnotes ----------

  (1) http://erlang.org

  (2) https://github.com/apache/couchdb/tree/master/src/couch_replicator

  (3) http://couchdb.apache.org

  (4) http://wiki.apache.org/couchdb/Reference


File: CouchDB.info,  Node: Definitions,  Next: Algorithm,  Prev: Goals,  Up: CouchDB Replication Protocol

4.2.3 Definitions
-----------------

ID:
     An identifier (could be an UUID) as described in RFC 4122(1)

Sequence:
     An ID provided by the changes feed. It can be numeric but not
     necessarily.

Revision:
     (to define)

Document
     A document is JSON entity with a unique ID and revision.

Database
     A collection of documents with a unique URI

URI
     An uri is defined by the RFC 2396(2) . It can be an URL as defined
     in RFC 1738(3).

Source
     Database from where the Documents are replicated

Target
     Database where the Document are replicated

Checkpoint
     Last source sequence ID

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc4122.html

  (2) http://tools.ietf.org/html/rfc2396.html

  (3) http://tools.ietf.org/html/rfc1738.html


File: CouchDB.info,  Node: Algorithm,  Next: Filter replication,  Prev: Definitions,  Up: CouchDB Replication Protocol

4.2.4 Algorithm
---------------

  1. Get unique identifiers for the Source and Target based on their
     URI if replication task ID is not available.

  2. Save this identifier in a special Document named
     `_local/<uniqueid>' on the Target database. This document isn't
     replicated. It will collect the last Source sequence ID, the
     Checkpoint, from the previous replication process.

  3. Get the Source changes feed by passing it the Checkpoint using the
     `since' parameter by calling the `/<source>/_changes' URL. The
     changes feed only return a list of current revisions.

     Note: This step can be done continuously using the `feed=longpoll'
     or `feed=continuous' parameters. Then the feed will continuously
     get the changes.

  4. Collect a group of Document/Revisions ID pairs from the *changes
     feed* and send them to the target databases on the
     `/<target>/_revs_diffs' URL. The result will contain the list of
     revisions *NOT* in the Target.

  5. GET each revisions from the source Database by calling the URL
     `/<source>/<docid>?revs=true&open_revs`=<revision>' . This will
     get the document with its parent revisions. Also don't forget to
     get attachments that aren't already stored at the target. As an
     optimisation you can use the HTTP multipart api to get all.

  6. Collect a group of revisions fetched at previous step and store
     them on the target database using the Bulk Docs(1) API with the
     `new_edit: false' JSON property to preserve their revisions ID.

  7. After the group of revision is stored on the Target, save the new
     Checkpoint on the Source.

     Note:
        - Even if some revisions have been ignored the sequence should
          be take in consideration for the Checkpoint.

        - To compare non numeric sequence ordering, you will have to
          keep an ordered list of the sequences IDS as they appear in
          the _changes feed and compare their indices.

  ---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/HTTP_Document_API#Bulk_Docs


File: CouchDB.info,  Node: Filter replication,  Next: Optimisations,  Prev: Algorithm,  Up: CouchDB Replication Protocol

4.2.5 Filter replication
------------------------

The replication can be filtered by passing the `filter' parameter to the
changes feeds with a function name. This will call a function on each
changes. If this function return True, the document will be added to the
feed.


File: CouchDB.info,  Node: Optimisations,  Next: API Reference,  Prev: Filter replication,  Up: CouchDB Replication Protocol

4.2.6 Optimisations
-------------------

   - The system should run each steps in parallel to reduce the latency.

   - The number of revisions passed to the step 3 and 6 should be large
     enough to reduce the bandwidth and make sure to reduce the latency.


File: CouchDB.info,  Node: API Reference,  Next: Reference,  Prev: Optimisations,  Up: CouchDB Replication Protocol

4.2.7 API Reference
-------------------

   - *note HEAD /{db}: 14. - Check Database existence

   - *note POST /{db}/_ensure_full_commit: 37. - Ensure that all
     changes are stored on disk

   - _:get:`/{db}/_local/{id}`_ - Read the last Checkpoint

   - _:put:`/{db}/_local/{id}`_ - Save a new Checkpoint

* Menu:

* Push Only::
* Pull Only::


File: CouchDB.info,  Node: Push Only,  Next: Pull Only,  Up: API Reference

4.2.7.1 Push Only
.................

   - *note PUT /{db}: 17. - Create Target if it not exists and option
     was provided

   - *note POST /{db}/_revs_diff: 3e. - Locate Revisions that are not
     known to the Target

   - *note POST /{db}/_bulk_docs: 1b. - Upload Revisions to the Target

   - *note PUT /{db}/{docid}: 47.?new_edits=false - Upload a single
     Document with attachments to the Target


File: CouchDB.info,  Node: Pull Only,  Prev: Push Only,  Up: API Reference

4.2.7.2 Pull Only
.................

   - *note GET /{db}/_changes: 1c. - Locate changes since on Source the
     last pull.  The request uses next query parameters:

        - `style=all_docs'

        - `feed=feed' , where feed is *note normal: 243. or *note
          longpoll: 244.

        - `limit=limit'

        - `heartbeat=heartbeat'

   - *note GET /{db}/{docid}: 46. - Retrieve a single Document from
     Source with attachments.  The request uses next query parameters:

        - `open_revs=revid' - where `revid' is the actual Document
          Revision at the moment of the pull request

        - `revs=true'

        - `atts_since=lastrev'


File: CouchDB.info,  Node: Reference,  Prev: API Reference,  Up: CouchDB Replication Protocol

4.2.8 Reference
---------------

   * TouchDB iOS wiki(1)

   * CouchDB documentation(2)

   * CouchDB change notifications(3)

  ---------- Footnotes ----------

  (1)
https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm

  (2) http://wiki.apache.org/couchdb/Replication

  (3) http://guide.couchdb.org/draft/notifications.html


File: CouchDB.info,  Node: Replicator Database,  Next: Replication and conflict model,  Prev: CouchDB Replication Protocol,  Up: Replication<2>

4.3 Replicator Database
=======================

The `_replicator' database works like any other in CouchDB, but
documents added to it will trigger replications. Creating (`PUT' or
`POST') a document to start a replication. `DELETE' a replicaiton
document to cancel an ongoing replication.

  These documents have exactly the same content as the JSON objects we
use to `POST' to `_replicate' (fields `source', `target',
`create_target', `continuous', `doc_ids', `filter', `query_params',
`use_checkpoints', `checkpoint_interval').

  Replication documents can have a user defined `_id' (handy for
finding a specific replication request later). Design Documents (and
`_local' documents) added to the replicator database are ignored.

  The default name of this database is `_replicator'. The name can be
changed in the `local.ini' configuration, section `[replicator]',
parameter `db'.

* Menu:

* Basics::
* Documents describing the same replication::
* Canceling replications::
* Server restart::
* Changing the Replicator Database::
* Replicating the replicator database::
* Delegations::


File: CouchDB.info,  Node: Basics,  Next: Documents describing the same replication,  Up: Replicator Database

4.3.1 Basics
------------

Let's say you POST the following document into `_replicator':

    {
        "_id": "my_rep",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "create_target":  true
    }

In the couch log you'll see 2 entries like these:

    [Thu, 17 Feb 2011 19:43:59 GMT] [info] [<0.291.0>] Document `my_rep` triggered replication `c0ebe9256695ff083347cbf95f93e280+create_target`
    [Thu, 17 Feb 2011 19:44:37 GMT] [info] [<0.124.0>] Replication `c0ebe9256695ff083347cbf95f93e280+create_target` finished (triggered by document `my_rep`)

As soon as the replication is triggered, the document will be updated by
CouchDB with 3 new fields:

    {
        "_id": "my_rep",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "create_target":  true,
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
        "_replication_state":  "triggered",
        "_replication_state_time":  1297974122
    }

Special fields set by the replicator start with the prefix
`_replication_'.

   - `_replication_id'

     The ID internally assigned to the replication. This is also the ID
     exposed by `/_active_tasks'.

   - `_replication_state'

     The current state of the replication.

   - `_replication_state_time'

     A Unix timestamp (number of seconds since 1 Jan 1970) that tells us
     when the current replication state (marked in `_replication_state')
     was set.

   - `_replication_state_reason'

     If `replication_state' is `error', this field contains the reason.

    {
    "_id": "my_rep",
    "_rev": "2-9f2c0d9372f4ee4dc75652ab8f8e7c70",
    "source": "foodb",
    "target": "bardb",
    "_replication_state": "error",
    "_replication_state_time": "2013-12-13T18:48:00+01:00",
    "_replication_state_reason": "db_not_found: could not open foodb",
    "_replication_id": "fe965cdc47b4d5f6c02811d9d351ac3d"
    }

When the replication finishes, it will update the `_replication_state'
field (and `_replication_state_time') with the value `completed', so
the document will look like:

    {
        "_id": "my_rep",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "create_target":  true,
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
        "_replication_state":  "completed",
        "_replication_state_time":  1297974122
    }

When an error happens during replication, the `_replication_state'
field is set to `error' (and `_replication_state_reason' and
`_replication_state_time' are updated).

  When you PUT/POST a document to the `_replicator' database, CouchDB
will attempt to start the replication up to 10 times (configurable under
`[replicator]', parameter `max_replication_retry_count'). If it fails
on the first attempt, it waits 5 seconds before doing a second attempt.
If the second attempt fails, it waits 10 seconds before doing a third
attempt. If the third attempt fails, it waits 20 seconds before doing a
fourth attempt (each attempt doubles the previous wait period).  When
an attempt fails, the Couch log will show you something like:

    [error] [<0.149.0>] Error starting replication `67c1bb92010e7abe35d7d629635f18b6+create_target` (document `my_rep_2`): {db_not_found,<<"could not open http://myserver:5986/foo/">>


     Note: The `_replication_state' field is only set to `error' when
     all the attempts were unsuccessful.

  There are only 3 possible values for the `_replication_state' field:
`triggered', `completed' and `error'. Continuous replications never get
their state set to `completed'.


File: CouchDB.info,  Node: Documents describing the same replication,  Next: Canceling replications,  Prev: Basics,  Up: Replicator Database

4.3.2 Documents describing the same replication
-----------------------------------------------

Lets suppose 2 documents are added to the `_replicator' database in the
following order:

    {
        "_id": "doc_A",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar"
    }

and

    {
        "_id": "doc_B",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar"
    }

Both describe exactly the same replication (only their `_ids' differ).
In this case document `doc_A' triggers the replication, getting updated
by CouchDB with the fields `_replication_state',
`_replication_state_time' and `_replication_id', just like it was
described before. Document `doc_B' however, is only updated with one
field, the `_replication_id' so it will look like this:

    {
        "_id": "doc_B",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280"
    }

While document `doc_A' will look like this:

    {
        "_id": "doc_A",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
        "_replication_state":  "triggered",
        "_replication_state_time":  1297974122
    }

Note that both document get exactly the same value for the
`_replication_id' field. This way you can identify which documents
refer to the same replication - you can for example define a view which
maps replication IDs to document IDs.


File: CouchDB.info,  Node: Canceling replications,  Next: Server restart,  Prev: Documents describing the same replication,  Up: Replicator Database

4.3.3 Canceling replications
----------------------------

To cancel a replication simply `DELETE' the document which triggered
the replication. The Couch log will show you an entry like the
following:

    [Thu, 17 Feb 2011 20:16:29 GMT] [info] [<0.125.0>] Stopped replication `c0ebe9256695ff083347cbf95f93e280+continuous+create_target` because replication document `doc_A` was deleted


     Note: You need to `DELETE' the document that triggered the
     replication.  `DELETE'-ing another document that describes the
     same replication but did not trigger it, will not cancel the
     replication.


File: CouchDB.info,  Node: Server restart,  Next: Changing the Replicator Database,  Prev: Canceling replications,  Up: Replicator Database

4.3.4 Server restart
--------------------

When CouchDB is restarted, it checks its `_replicator' database and
restarts any replication that is described by a document that either has
its `_replication_state' field set to `triggered' or it doesn't have
yet the `_replication_state' field set.

     Note: Continuous replications always have a `_replication_state'
     field with the value `triggered', therefore they're always
     restarted when CouchDB is restarted.


File: CouchDB.info,  Node: Changing the Replicator Database,  Next: Replicating the replicator database,  Prev: Server restart,  Up: Replicator Database

4.3.5 Changing the Replicator Database
--------------------------------------

Imagine your replicator database (default name is `_replicator') has the
two following documents that represent pull replications from servers A
and B:

    {
        "_id": "rep_from_A",
        "source":  "http://aserver.com:5984/foo",
        "target":  "foo_a",
        "continuous":  true,
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
        "_replication_state":  "triggered",
        "_replication_state_time":  1297971311
    }


    {
        "_id": "rep_from_B",
        "source":  "http://bserver.com:5984/foo",
        "target":  "foo_b",
        "continuous":  true,
        "_replication_id":  "231bb3cf9d48314eaa8d48a9170570d1",
        "_replication_state":  "triggered",
        "_replication_state_time":  1297974122
    }

Now without stopping and restarting CouchDB, you change the name of the
replicator database to `another_replicator_db':

    $ curl -X PUT http://localhost:5984/_config/replicator/db -d '"another_replicator_db"'
    "_replicator"

As soon as this is done, both pull replications defined before, are
stopped. This is explicitly mentioned in CouchDB's log:

    [Fri, 11 Mar 2011 07:44:20 GMT] [info] [<0.104.0>] Stopping all ongoing replications because the replicator database was deleted or changed
    [Fri, 11 Mar 2011 07:44:20 GMT] [info] [<0.127.0>] 127.0.0.1 - - PUT /_config/replicator/db 200

Imagine now you add a replication document to the new replicator
database named `another_replicator_db':

    {
        "_id": "rep_from_X",
        "source":  "http://xserver.com:5984/foo",
        "target":  "foo_x",
        "continuous":  true
    }

From now own you have a single replication going on in your system: a
pull replication pulling from server X. Now you change back the
replicator database to the original one `_replicator':

    $ curl -X PUT http://localhost:5984/_config/replicator/db -d '"_replicator"'
    "another_replicator_db"

Immediately after this operation, the replication pulling from server X
will be stopped and the replications defined in the `_replicator'
database (pulling from servers A and B) will be resumed.

  Changing again the replicator database to `another_replicator_db' will
stop the pull replications pulling from servers A and B, and resume the
pull replication pulling from server X.


File: CouchDB.info,  Node: Replicating the replicator database,  Next: Delegations,  Prev: Changing the Replicator Database,  Up: Replicator Database

4.3.6 Replicating the replicator database
-----------------------------------------

Imagine you have in server C a replicator database with the two
following pull replication documents in it:

    {
         "_id": "rep_from_A",
         "source":  "http://aserver.com:5984/foo",
         "target":  "foo_a",
         "continuous":  true,
         "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
         "_replication_state":  "triggered",
         "_replication_state_time":  1297971311
    }


    {
         "_id": "rep_from_B",
         "source":  "http://bserver.com:5984/foo",
         "target":  "foo_b",
         "continuous":  true,
         "_replication_id":  "231bb3cf9d48314eaa8d48a9170570d1",
         "_replication_state":  "triggered",
         "_replication_state_time":  1297974122
    }

Now you would like to have the same pull replications going on in server
D, that is, you would like to have server D pull replicating from
servers A and B. You have two options:

   - Explicitly add two documents to server's D replicator database

   - Replicate server's C replicator database into server's D replicator
     database

  Both alternatives accomplish exactly the same goal.


File: CouchDB.info,  Node: Delegations,  Prev: Replicating the replicator database,  Up: Replicator Database

4.3.7 Delegations
-----------------

Replication documents can have a custom `user_ctx' property. This
property defines the user context under which a replication runs. For
the old way of triggering replications (POSTing to `/_replicate/'),
this property was not needed (it didn't exist in fact) - this is because
at the moment of triggering the replication it has information about the
authenticated user. With the replicator database, since it's a regular
database, the information about the authenticated user is only present
at the moment the replication document is written to the database - the
replicator database implementation is like a `_changes' feed consumer
(with `?include_docs=true') that reacts to what was written to the
replicator database - in fact this feature could be implemented with an
external script/program. This implementation detail implies that for non
admin users, a `user_ctx' property, containing the user's name and a
subset of their roles, must be defined in the replication document.
This is ensured by the document update validation function present in
the default design document of the replicator database. This validation
function also ensure that a non admin user can set a user name property
in the `user_ctx' property that doesn't match their own name (same
principle applies for the roles).

  For admins, the `user_ctx' property is optional, and if it's missing
it defaults to a user context with name null and an empty list of roles
- this mean design documents will not be written to local targets. If
writing design documents to local targets is desired, the a user context
with the roles `_admin' must be set explicitly.

  Also, for admins the `user_ctx' property can be used to trigger a
replication on behalf of another user. This is the user context that
will be passed to local target database document validation functions.

     Note: The `user_ctx' property only has effect for local endpoints.

  Example delegated replication document:

    {
         "_id": "my_rep",
         "source":  "http://bserver.com:5984/foo",
         "target":  "bar",
         "continuous":  true,
         "user_ctx": {
              "name": "joe",
              "roles": ["erlanger", "researcher"]
         }
    }

As stated before, for admins the `user_ctx' property is optional, while
for regular (non admin) users it's mandatory. When the roles property of
`user_ctx' is missing, it defaults to the empty list `[ ]'.


File: CouchDB.info,  Node: Replication and conflict model,  Prev: Replicator Database,  Up: Replication<2>

4.4 Replication and conflict model
==================================

Let's take the following example to illustrate replication and conflict
handling.

   - Alice has a document containing Bob's business card;

   - She synchronizes it between her desktop PC and her laptop;

   - On the desktop PC, she updates Bob's E-mail address; Without
     syncing again, she updates Bob's mobile number on the laptop;

   - Then she replicates the two to each other again.

  So on the desktop the document has Bob's new E-mail address and his
old mobile number, and on the laptop it has his old E-mail address and
his new mobile number.

  The question is, what happens to these conflicting updated documents?

* Menu:

* CouchDB replication::
* Conflict avoidance::
* Conflicts in batches::
* Revision tree::
* Working with conflicting documents::
* Multiple document API::
* View map functions::
* Merging and revision history::
* Comparison with other replicating data stores::


File: CouchDB.info,  Node: CouchDB replication,  Next: Conflict avoidance,  Up: Replication and conflict model

4.4.1 CouchDB replication
-------------------------

CouchDB works with JSON documents inside databases. Replication of
databases takes place over HTTP, and can be either a "pull" or a
"push", but is unidirectional. So the easiest way to perform a full
sync is to do a "push" followed by a "pull" (or vice versa).

  So, Alice creates v1 and sync it. She updates to v2a on one side and
v2b on the other, and then replicates. What happens?

  The answer is simple: both versions exist on both sides!

      DESKTOP                          LAPTOP
    +---------+
    | /db/bob |                                     INITIAL
    |   v1    |                                     CREATION
    +---------+

    +---------+                      +---------+
    | /db/bob |  ----------------->  | /db/bob |     PUSH
    |   v1    |                      |   v1    |
    +---------+                      +---------+

    +---------+                      +---------+  INDEPENDENT
    | /db/bob |                      | /db/bob |     LOCAL
    |   v2a   |                      |   v2b   |     EDITS
    +---------+                      +---------+

    +---------+                      +---------+
    | /db/bob |  ----------------->  | /db/bob |     PUSH
    |   v2a   |                      |   v2a   |
    +---------+                      |   v2b   |
                                     +---------+

    +---------+                      +---------+
    | /db/bob |  <-----------------  | /db/bob |     PULL
    |   v2a   |                      |   v2a   |
    |   v2b   |                      |   v2b   |
    +---------+                      +---------+

After all, this is not a filesystem, so there's no restriction that
only one document can exist with the name /db/bob. These are just
"conflicting" revisions under the same name.

  Because the changes are always replicated, the data is safe. Both
machines have identical copies of both documents, so failure of a hard
drive on either side won't lose any of the changes.

  Another thing to notice is that peers do not have to be configured or
tracked.  You can do regular replications to peers, or you can do
one-off, ad-hoc pushes or pulls. After the replication has taken place,
there is no record kept of which peer any particular document or
revision came from.

  So the question now is: what happens when you try to read /db/bob? By
default, CouchDB picks one arbitrary revision as the "winner", using a
deterministic algorithm so that the same choice will be made on all
peers. The same happens with views: the deterministically-chosen winner
is the only revision fed into your map function.

  Let's say that the winner is v2a. On the desktop, if Alice reads the
document she'll see v2a, which is what she saved there. But on the
laptop, after replication, she'll also see only v2a. It could look as
if the changes she made there have been lost - but of course they have
not, they have just been hidden away as a conflicting revision. But
eventually she'll need these changes merged into Bob's business card,
otherwise they will effectively have been lost.

  Any sensible business-card application will, at minimum, have to
present the conflicting versions to Alice and allow her to create a new
version incorporating information from them all. Ideally it would merge
the updates itself.


File: CouchDB.info,  Node: Conflict avoidance,  Next: Conflicts in batches,  Prev: CouchDB replication,  Up: Replication and conflict model

4.4.2 Conflict avoidance
------------------------

When working on a single node, CouchDB will avoid creating conflicting
revisions by returning a 409 Conflict(1) error. This is because, when
you PUT a new version of a document, you must give the `_rev' of the
previous version. If that `_rev' has already been superseded, the
update is rejected with a  409 Conflict(2) response.

  So imagine two users on the same node are fetching Bob's business
card, updating it concurrently, and writing it back:

    USER1    ----------->  GET /db/bob
             <-----------  {"_rev":"1-aaa", ...}

    USER2    ----------->  GET /db/bob
             <-----------  {"_rev":"1-aaa", ...}

    USER1    ----------->  PUT /db/bob?rev=1-aaa
             <-----------  {"_rev":"2-bbb", ...}

    USER2    ----------->  PUT /db/bob?rev=1-aaa
             <-----------  409 Conflict  (not saved)

User2's changes are rejected, so it's up to the app to fetch /db/bob
again, and either:

  1. apply the same changes as were applied to the earlier revision,
     and submit a new PUT

  2. redisplay the document so the user has to edit it again

  3. just overwrite it with the document being saved before (which is
     not advisable, as user1's changes will be silently lost)

  So when working in this mode, your application still has to be able
to handle these conflicts and have a suitable retry strategy, but these
conflicts never end up inside the database itself.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10


File: CouchDB.info,  Node: Conflicts in batches,  Next: Revision tree,  Prev: Conflict avoidance,  Up: Replication and conflict model

4.4.3 Conflicts in batches
--------------------------

There are two different ways that conflicts can end up in the database:

   - Conflicting changes made on different databases, which are
     replicated to each other, as shown earlier.

   - Changes are written to the database using `_bulk_docs' and
     all_or_nothing, which bypasses the 409 mechanism.

  The *note _bulk_docs API: 255. lets you submit multiple updates
(and/or deletes) in a single HTTP POST. Normally, these are treated as
independent updates; some in the batch may fail because the `_rev' is
stale (just like a 409 from a PUT) whilst others are written
successfully.  The response from `_bulk_docs' lists the success/fail
separately for each document in the batch.

  However there is another mode of working, whereby you specify
`{"all_or_nothing":true}' as part of the request. This is CouchDB's
nearest equivalent of a "transaction", but it's not the same as a
database transaction which can fail and roll back. Rather, it means
that all of the changes in the request will be forcibly applied to the
database, even if that introduces conflicts. The only guarantee you are
given is that they will either all be applied to the database, or none
of them (e.g. if the power is pulled out before the update is finished
writing to disk).

  So this gives you a way to introduce conflicts within a single
database instance. If you choose to do this instead of PUT, it means
you don't have to write any code for the possibility of getting a 409
response, because you will never get one. Rather, you have to deal with
conflicts appearing later in the database, which is what you'd have to
do in a multi-master application anyway.

    POST /db/_bulk_docs


    {
      "all_or_nothing": true,
      "docs": [
        {"_id":"x", "_rev":"1-xxx", ...},
        {"_id":"y", "_rev":"1-yyy", ...},
        ...
      ]
    }



File: CouchDB.info,  Node: Revision tree,  Next: Working with conflicting documents,  Prev: Conflicts in batches,  Up: Replication and conflict model

4.4.4 Revision tree
-------------------

When you update a document in CouchDB, it keeps a list of the previous
revisions. In the case where conflicting updates are introduced, this
history branches into a tree, where the current conflicting revisions
for this document form the tips (leaf nodes) of this tree:

      ,--> r2a
    r1 --> r2b
      `--> r2c

Each branch can then extend its history - for example if you read
revision r2b and then PUT with ?rev=r2b then you will make a new
revision along that particular branch.

      ,--> r2a -> r3a -> r4a
    r1 --> r2b -> r3b
      `--> r2c -> r3c

Here, (r4a, r3b, r3c) are the set of conflicting revisions. The way you
resolve a conflict is to delete the leaf nodes along the other
branches. So when you combine (r4a+r3b+r3c) into a single merged
document, you would replace r4a and delete r3b and r3c.

      ,--> r2a -> r3a -> r4a -> r5a
    r1 --> r2b -> r3b -> (r4b deleted)
      `--> r2c -> r3c -> (r4c deleted)

Note that r4b and r4c still exist as leaf nodes in the history tree,
but as deleted docs. You can retrieve them but they will be marked
`"_deleted":true'.

  When you compact a database, the bodies of all the non-leaf documents
are discarded. However, the list of historical _revs is retained, for
the benefit of later conflict resolution in case you meet any old
replicas of the database at some time in future. There is "revision
pruning" to stop this getting arbitrarily large.


File: CouchDB.info,  Node: Working with conflicting documents,  Next: Multiple document API,  Prev: Revision tree,  Up: Replication and conflict model

4.4.5 Working with conflicting documents
----------------------------------------

The basic _:get:`/{doc}/{docid}`_ operation will not show you any
information about conflicts. You see only the deterministically-chosen
winner, and get no indication as to whether other conflicting revisions
exist or not:

    {
      "_id":"test",
      "_rev":"2-b91bb807b4685080c6a651115ff558f5",
      "hello":"bar"
    }

If you do `GET /db/bob?conflicts=true', and the document is in a
conflict state, then you will get the winner plus a _conflicts member
containing an array of the revs of the other, conflicting revision(s).
You can then fetch them individually using subsequent `GET
/db/bob?rev=xxxx' operations:

    {
      "_id":"test",
      "_rev":"2-b91bb807b4685080c6a651115ff558f5",
      "hello":"bar",
      "_conflicts":[
        "2-65db2a11b5172bf928e3bcf59f728970",
        "2-5bc3c6319edf62d4c624277fdd0ae191"
      ]
    }

If you do `GET /db/bob?open_revs=all' then you will get all the leaf
nodes of the revision tree. This will give you all the current
conflicts, but will also give you leaf nodes which have been deleted
(i.e. parts of the conflict history which have since been resolved).
You can remove these by filtering out documents with `"_deleted":true':

    [
      {"ok":{"_id":"test","_rev":"2-5bc3c6319edf62d4c624277fdd0ae191","hello":"foo"}},
      {"ok":{"_id":"test","_rev":"2-65db2a11b5172bf928e3bcf59f728970","hello":"baz"}},
      {"ok":{"_id":"test","_rev":"2-b91bb807b4685080c6a651115ff558f5","hello":"bar"}}
    ]

The `"ok"' tag is an artifact of `open_revs', which also lets you list
explicit revisions as a JSON array, e.g. `open_revs=[rev1,rev2,rev3]'.
In this form, it would be possible to request a revision which is now
missing, because the database has been compacted.

     Note: The order of revisions returned by `open_revs=all' is *NOT*
     related to the deterministic "winning" algorithm. In the above
     example, the winning revision is 2-b91b... and happens to be
     returned last, but in other cases it can be returned in a
     different position.

  Once you have retrieved all the conflicting revisions, your
application can then choose to display them all to the user. Or it
could attempt to merge them, write back the merged version, and delete
the conflicting versions - that is, to resolve the conflict permanently.

  As described above, you need to update one revision and delete all the
conflicting revisions explicitly. This can be done using a single
`POST' to `_bulk_docs', setting `"_deleted":true' on those revisions
you wish to delete.


File: CouchDB.info,  Node: Multiple document API,  Next: View map functions,  Prev: Working with conflicting documents,  Up: Replication and conflict model

4.4.6 Multiple document API
---------------------------

You can fetch multiple documents at once using `include_docs=true' on a
view.  However, a `conflicts=true' request is ignored; the "doc" part
of the value never includes a `_conflicts' member. Hence you would need
to do another query to determine for each document whether it is in a
conflicting state:

    $ curl 'http://127.0.0.1:5984/conflict_test/_all_docs?include_docs=true&conflicts=true'


    {
      "total_rows":1,
      "offset":0,
      "rows":[
        {
          "id":"test",
          "key":"test",
          "value":{"rev":"2-b91bb807b4685080c6a651115ff558f5"},
          "doc":{
            "_id":"test",
            "_rev":"2-b91bb807b4685080c6a651115ff558f5",
            "hello":"bar"
          }
        }
      ]
    }


    $ curl 'http://127.0.0.1:5984/conflict_test/test?conflicts=true'


    {
      "_id":"test",
      "_rev":"2-b91bb807b4685080c6a651115ff558f5",
      "hello":"bar",
      "_conflicts":[
        "2-65db2a11b5172bf928e3bcf59f728970",
        "2-5bc3c6319edf62d4c624277fdd0ae191"
      ]
    }



File: CouchDB.info,  Node: View map functions,  Next: Merging and revision history,  Prev: Multiple document API,  Up: Replication and conflict model

4.4.7 View map functions
------------------------

Views only get the winning revision of a document. However they do also
get a `_conflicts' member if there are any conflicting revisions. This
means you can write a view whose job is specifically to locate
documents with conflicts.  Here is a simple map function which achieves
this:

    function(doc) {
      if (doc._conflicts) {
        emit(null, [doc._rev].concat(doc._conflicts));
      }
    }

which gives the following output:

    {
      "total_rows":1,
      "offset":0,
      "rows":[
        {
          "id":"test",
          "key":null,
          "value":[
            "2-b91bb807b4685080c6a651115ff558f5",
            "2-65db2a11b5172bf928e3bcf59f728970",
            "2-5bc3c6319edf62d4c624277fdd0ae191"
          ]
        }
      ]
    }

If you do this, you can have a separate "sweep" process which
periodically scans your database, looks for documents which have
conflicts, fetches the conflicting revisions, and resolves them.

  Whilst this keeps the main application simple, the problem with this
approach is that there will be a window between a conflict being
introduced and it being resolved. From a user's viewpoint, this may
appear that the document they just saved successfully may suddenly lose
their changes, only to be resurrected some time later. This may or may
not be acceptable.

  Also, it's easy to forget to start the sweeper, or not to implement
it properly, and this will introduce odd behaviour which will be hard
to track down.

  CouchDB's "winning" revision algorithm may mean that information
drops out of a view until a conflict has been resolved. Consider Bob's
business card again; suppose Alice has a view which emits mobile
numbers, so that her telephony application can display the caller's
name based on caller ID. If there are conflicting documents with Bob's
old and new mobile numbers, and they happen to be resolved in favour of
Bob's old number, then the view won't be able to recognise his new one.
In this particular case, the application might have preferred to put
information from both the conflicting documents into the view, but this
currently isn't possible.

  Suggested algorithm to fetch a document with conflict resolution:

  1. Get document via `GET docid?conflicts=true' request;

  2. For each member in the `_conflicts' array call `GET docid?rev=xxx'.
     If any errors occur at this stage, restart from step 1.  (There
     could be a race where someone else has already resolved this
     conflict and deleted that rev)

  3. Perform application-specific merging

  4. Write `_bulk_docs' with an update to the first rev and deletes of
     the other revs.

  This could either be done on every read (in which case you could
replace all calls to GET in your application with calls to a library
which does the above), or as part of your sweeper code.

  And here is an example of this in Ruby using the low-level
RestClient(1):

    require 'rubygems'
    require 'rest_client'
    require 'json'
    DB="http://127.0.0.1:5984/conflict_test"

    # Write multiple documents as all_or_nothing, can introduce conflicts
    def writem(docs)
      JSON.parse(RestClient.post("#{DB}/_bulk_docs", {
        "all_or_nothing" => true,
        "docs" => docs,
      }.to_json))
    end

    # Write one document, return the rev
    def write1(doc, id=nil, rev=nil)
      doc['_id'] = id if id
      doc['_rev'] = rev if rev
      writem([doc]).first['rev']
    end

    # Read a document, return *all* revs
    def read1(id)
      retries = 0
      loop do
        # FIXME: escape id
        res = [JSON.parse(RestClient.get("#{DB}/#{id}?conflicts=true"))]
        if revs = res.first.delete('_conflicts')
          begin
            revs.each do |rev|
              res << JSON.parse(RestClient.get("#{DB}/#{id}?rev=#{rev}"))
            end
          rescue
            retries += 1
            raise if retries >= 5
            next
          end
        end
        return res
      end
    end

    # Create DB
    RestClient.delete DB rescue nil
    RestClient.put DB, {}.to_json

    # Write a document
    rev1 = write1({"hello"=>"xxx"},"test")
    p read1("test")

    # Make three conflicting versions
    write1({"hello"=>"foo"},"test",rev1)
    write1({"hello"=>"bar"},"test",rev1)
    write1({"hello"=>"baz"},"test",rev1)

    res = read1("test")
    p res

    # Now let's replace these three with one
    res.first['hello'] = "foo+bar+baz"
    res.each_with_index do |r,i|
      unless i == 0
        r.replace({'_id'=>r['_id'], '_rev'=>r['_rev'], '_deleted'=>true})
      end
    end
    writem(res)

    p read1("test")

An application written this way never has to deal with a `PUT 409', and
is automatically multi-master capable.

  You can see that it's straightforward enough when you know what
you're doing.  It's just that CouchDB doesn't currently provide a
convenient HTTP API for "fetch all conflicting revisions", nor "PUT to
supersede these N revisions", so you need to wrap these yourself. I
also don't know of any client-side libraries which provide support for
this.

  ---------- Footnotes ----------

  (1) https://rubygems.org/gems/rest-client


File: CouchDB.info,  Node: Merging and revision history,  Next: Comparison with other replicating data stores,  Prev: View map functions,  Up: Replication and conflict model

4.4.8 Merging and revision history
----------------------------------

Actually performing the merge is an application-specific function. It
depends on the structure of your data. Sometimes it will be easy: e.g.
if a document contains a list which is only ever appended to, then you
can perform a union of the two list versions.

  Some merge strategies look at the changes made to an object, compared
to its previous version. This is how git's merge function works.

  For example, to merge Bob's business card versions v2a and v2b, you
could look at the differences between v1 and v2b, and then apply these
changes to v2a as well.

  With CouchDB, you can sometimes get hold of old revisions of a
document.  For example, if you fetch `/db/bob?rev=v2b&revs_info=true'
you'll get a list of the previous revision ids which ended up with
revision v2b. Doing the same for v2a you can find their common ancestor
revision. However if the database has been compacted, the content of
that document revision will have been lost.  `revs_info' will still
show that v1 was an ancestor, but report it as "missing":

    BEFORE COMPACTION           AFTER COMPACTION

         ,-> v2a                     v2a
       v1
         `-> v2b                     v2b

So if you want to work with diffs, the recommended way is to store
those diffs within the new revision itself. That is: when you replace
v1 with v2a, include an extra field or attachment in v2a which says
which fields were changed from v1 to v2a. This unfortunately does mean
additional book-keeping for your application.


File: CouchDB.info,  Node: Comparison with other replicating data stores,  Prev: Merging and revision history,  Up: Replication and conflict model

4.4.9 Comparison with other replicating data stores
---------------------------------------------------

The same issues arise with other replicating systems, so it can be
instructive to look at these and see how they compare with CouchDB.
Please feel free to add other examples.

* Menu:

* Unison::
* Git::


File: CouchDB.info,  Node: Unison,  Next: Git,  Up: Comparison with other replicating data stores

4.4.9.1 Unison
..............

Unison(1) is a bi-directional file synchronisation tool. In this case,
the business card would be a file, say `bob.vcf'.

  When you run unison, changes propagate both ways. If a file has
changed on one side but not the other, the new replaces the old. Unison
maintains a local state file so that it knows whether a file has
changed since the last successful replication.

  In our example it has changed on both sides. Only one file called
`bob.vcf' can exist within the filesystem. Unison solves the problem by
simply ducking out: the user can choose to replace the remote version
with the local version, or vice versa (both of which would lose data),
but the default action is to leave both sides unchanged.

  From Alice's point of view, at least this is a simple solution.
Whenever she's on the desktop she'll see the version she last edited on
the desktop, and whenever she's on the laptop she'll see the version
she last edited there.

  But because no replication has actually taken place, the data is not
protected.  If her laptop hard drive dies, she'll lose all her changes
made on the laptop; ditto if her desktop hard drive dies.

  It's up to her to copy across one of the versions manually (under a
different filename), merge the two, and then finally push the merged
version to the other side.

  Note also that the original file (version v1) has been lost by this
point.  So it's not going to be known from inspection alone which of
v2a and v2b has the most up-to-date E-mail address for Bob, and which
has the most up-to-date mobile number. Alice has to remember which she
entered last.

  ---------- Footnotes ----------

  (1) http://www.cis.upenn.edu/~bcpierce/unison/


File: CouchDB.info,  Node: Git,  Prev: Unison,  Up: Comparison with other replicating data stores

4.4.9.2 Git
...........

Git(1) is a well-known distributed source control system. Like Unison,
git deals with files. However, git considers the state of a whole set
of files as a single object, the "tree". Whenever you save an update,
you create a "commit" which points to both the updated tree and the
previous commit(s), which in turn point to the previous tree(s). You
therefore have a full history of all the states of the files. This
forms a branch, and a pointer is kept to the tip of the branch, from
which you can work backwards to any previous state. The "pointer" is
actually an SHA1 hash of the tip commit.

  If you are replicating with one or more peers, a separate branch is
made for each of the peers. For example, you might have:

    master               -- my local branch
    remotes/foo/master   -- branch on peer 'foo'
    remotes/bar/master   -- branch on peer 'bar'

In the normal way of working, replication is a "pull", importing
changes from a remote peer into the local repository. A "pull" does two
things: first "fetch" the state of the peer into the remote tracking
branch for that peer; and then attempt to "merge" those changes into
the local branch.

  Now let's consider the business card. Alice has created a git repo
containing `bob.vcf', and cloned it across to the other machine. The
branches look like this, where `AAAAAAAA' is the SHA1 of the commit:

    ---------- desktop ----------           ---------- laptop ----------
    master: AAAAAAAA                        master: AAAAAAAA
    remotes/laptop/master: AAAAAAAA         remotes/desktop/master: AAAAAAAA

Now she makes a change on the desktop, and commits it into the desktop
repo; then she makes a different change on the laptop, and commits it
into the laptop repo:

    ---------- desktop ----------           ---------- laptop ----------
    master: BBBBBBBB                        master: CCCCCCCC
    remotes/laptop/master: AAAAAAAA         remotes/desktop/master: AAAAAAAA

Now on the desktop she does `git pull laptop'. Firstly, the remote
objects are copied across into the local repo and the remote tracking
branch is updated:

    ---------- desktop ----------           ---------- laptop ----------
    master: BBBBBBBB                        master: CCCCCCCC
    remotes/laptop/master: CCCCCCCC         remotes/desktop/master: AAAAAAAA


     Note: repo still contains AAAAAAAA because commits BBBBBBBB and
     CCCCCCCC point to it

  Then git will attempt to merge the changes in. It can do this because
it knows the parent commit to `CCCCCCCC' is `AAAAAAAA', so it takes a
diff between `AAAAAAAA' and `CCCCCCCC' and tries to apply it to
`BBBBBBBB'.

  If this is successful, then you'll get a new version with a merge
commit:

    ---------- desktop ----------           ---------- laptop ----------
    master: DDDDDDDD                        master: CCCCCCCC
    remotes/laptop/master: CCCCCCCC         remotes/desktop/master: AAAAAAAA

Then Alice has to logon to the laptop and run `git pull desktop'. A
similar process occurs. The remote tracking branch is updated:

    ---------- desktop ----------           ---------- laptop ----------
    master: DDDDDDDD                        master: CCCCCCCC
    remotes/laptop/master: CCCCCCCC         remotes/desktop/master: DDDDDDDD

Then a merge takes place. This is a special-case: `CCCCCCCC' one of the
parent commits of `DDDDDDDD', so the laptop can `fast forward' update
from `CCCCCCCC' to `DDDDDDDD' directly without having to do any complex
merging.  This leaves the final state as:

    ---------- desktop ----------           ---------- laptop ----------
    master: DDDDDDDD                        master: DDDDDDDD
    remotes/laptop/master: CCCCCCCC         remotes/desktop/master: DDDDDDDD

Now this is all and good, but you may wonder how this is relevant when
thinking about CouchDB.

  Firstly, note what happens in the case when the merge algorithm fails.
The changes are still propagated from the remote repo into the local
one, and are available in the remote tracking branch; so unlike Unison,
you know the data is protected. It's just that the local working copy
may fail to update, or may diverge from the remote version. It's up to
you to create and commit the combined version yourself, but you are
guaranteed to have all the history you might need to do this.

  Note that whilst it's possible to build new merge algorithms into Git,
the standard ones are focused on line-based changes to source code.
They don't work well for XML or JSON if it's presented without any line
breaks.

  The other interesting consideration is multiple peers. In this case
you have multiple remote tracking branches, some of which may match
your local branch, some of which may be behind you, and some of which
may be ahead of you (i.e. contain changes that you haven't yet merged):

    master: AAAAAAAA
    remotes/foo/master: BBBBBBBB
    remotes/bar/master: CCCCCCCC
    remotes/baz/master: AAAAAAAA

Note that each peer is explicitly tracked, and therefore has to be
explicitly created. If a peer becomes stale or is no longer needed,
it's up to you to remove it from your configuration and delete the
remote tracking branch.  This is different to CouchDB, which doesn't
keep any peer state in the database.

  Another difference with git is that it maintains all history back to
time zero - git compaction keeps diffs between all those versions in
order to reduce size, but CouchDB discards them. If you are constantly
updating a document, the size of a git repo would grow forever. It is
possible (with some effort) to use "history rewriting" to make git
forget commits earlier than a particular one.

* Menu:

* What is the CouchDB replication protocol? Is it like Git?::

  ---------- Footnotes ----------

  (1) http://git-scm.com/


File: CouchDB.info,  Node: What is the CouchDB replication protocol? Is it like Git?,  Up: Git

4.4.9.3 What is the CouchDB replication protocol? Is it like Git?
.................................................................

     Author: Jason Smith

     Date: 2011-01-29

     Source:
     <http://stackoverflow.com/questions/4766391/what-is-the-couchdb-replication-protocol-is-it-like-git>

  *Key points*

  *If you know Git, then you know how Couch replication works.*
Replicating is _very_ similar to pushing or pulling with distributed
source managers like Git.

  *CouchDB replication does not have its own protocol.* A replicator
simply connects to two DBs as a client, then reads from one and writes
to the other.  Push replication is reading the local data and updating
the remote DB; pull replication is vice versa.

   * *Fun fact 1*: The replicator is actually an independent Erlang
     application, in its own process. It connects to both couches, then
     reads records from one and writes them to the other.

   * *Fun fact 2*: CouchDB has no way of knowing who is a normal client
     and who is a replicator (let alone whether the replication is push
     or pull).  It all looks like client connections. Some of them read
     records. Some of them write records.

  *Everything flows from the data model*

  The replication algorithm is trivial, uninteresting. A trained monkey
could design it. It's simple because the cleverness is the data model,
which has these useful characteristics:

  1. Every record in CouchDB is completely independent of all others.
     That sucks if you want to do a JOIN or a transaction, but it's
     awesome if you want to write a replicator. Just figure out how to
     replicate one record, and then repeat that for each record.

  2. Like Git, records have a linked-list revision history. A record's
     revision ID is the checksum of its own data. Subsequent revision
     IDs are checksums of: the new data, plus the revision ID of the
     previous.

  3. In addition to application data (`{"name": "Jason", "awesome":
     true}'), every record stores the evolutionary timeline of all
     previous revision IDs leading up to itself.

        - Exercise: Take a moment of quiet reflection. Consider any two
          different records, A and B. If A's revision ID appears in B's
          timeline, then B definitely evolved from A. Now consider
          Git's fast-forward merges.  Do you hear that? That is the
          sound of your mind being blown.

  4. Git isn't really a linear list. It has forks, when one parent has
     multiple children. CouchDB has that too.

        - Exercise: Compare two different records, A and B. A's
          revision ID does not appear in B's timeline; however, one
          revision ID, C, is in both A's and B's timeline. Thus A
          didn't evolve from B. B didn't evolve from A. But rather, A
          and B have a common ancestor C. In Git, that is a "fork." In
          CouchDB, it's a "conflict."

        - In Git, if both children go on to develop their timelines
          independently, that's cool. Forks totally support that.

        - In CouchDB, if both children go on to develop their timelines
          independently, that cool too. Conflicts totally support that.

        - *Fun fact 3*: CouchDB "conflicts" do not correspond to Git
          "conflicts."  A Couch conflict is a divergent revision
          history, what Git calls a "fork."  For this reason the
          CouchDB community pronounces "conflict" with a silent `n':
          "co-flicked."

  5. Git also has merges, when one child has multiple parents. CouchDB
     _sort_ of has that too.

        - *In the data model, there is no merge.* The client simply
          marks one timeline as deleted and continues to work with the
          only extant timeline.

        - *In the application, it feels like a merge.* Typically, the
          client merges the _data_ from each timeline in an
          application-specific way.  Then it writes the new data to the
          timeline. In Git, this is like copying and pasting the
          changes from branch A into branch B, then commiting to branch
          B and deleting branch A. The data was merged, but there was no
          `git merge'.

        - These behaviors are different because, in Git, the timeline
          itself is important; but in CouchDB, the data is important
          and the timeline is incidental—it's just there to support
          replication. That is one reason why CouchDB's built-in
          revisioning is inappropriate for storing revision data like a
          wiki page.

  *Final notes*

  At least one sentence in this writeup (possibly this one) is complete
BS.


File: CouchDB.info,  Node: CouchDB Maintenance,  Next: CouchApp,  Prev: Replication<2>,  Up: Top

5 CouchDB Maintenance
*********************

* Menu:

* Compaction: Compaction<2>.
* Performance::

Compaction

* Database Compaction::
* Views Compaction::
* Automatic Compaction::

Views Compaction

* Views cleanup::

Performance

* Disk I/O::
* System Resource Limits::
* Network::
* CouchDB::
* Views: Views<2>.

Disk I/O

* File Size::
* Disk and File System Performance::

System Resource Limits

* CouchDB Configuration Options::
* Erlang::
* PAM and ulimit::

CouchDB Configuration Options

* delayed_commits::
* max_dbs_open::

CouchDB

* DELETE operation::
* Document's ID::

Views

* Views Generation::
* Builtin Reduce Functions::


File: CouchDB.info,  Node: Compaction<2>,  Next: Performance,  Up: CouchDB Maintenance

5.1 Compaction
==============

The `compaction' operation is the way to reduce disk space usage by
removing unused and old data from database or view index files. This
operation is a very similar to the `vacuum' (SQLite(1) ex.) available
for other database management systems.

  During compaction of the `target' CouchDB creates new file with the
`.compact' extension and transfers only actual data into. Because of
this, CouchDB checks first for the available disk space - it should be
_twice greater_ than the compacted file's data.

  When all actual data is successfully transferred to the `compacted'
file CouchDB replaces the `target' with the `compacted' file.

* Menu:

* Database Compaction::
* Views Compaction::
* Automatic Compaction::

  ---------- Footnotes ----------

  (1) http://www.sqlite.org/lang_vacuum.html


File: CouchDB.info,  Node: Database Compaction,  Next: Views Compaction,  Up: Compaction<2>

5.1.1 Database Compaction
-------------------------

Database compaction compresses the database file by removing unused file
sections created during updates. Old documents revisions are replaced
with small amount of metadata called `tombstone' which are used for
conflicts resolution during replication. The number of stored revisions
(and their `tombstones') can be configured by using the *note
_revs_limit: 3f. URL endpoint.

  Compaction is manually triggered operation per database and runs as a
background task. To start it for specific database there is need to
send HTTP *note POST /{db}/_compact: 1e. sub-resource of the target
database:

    curl -H "Content-Type: application/json" -X POST http://localhost:5984/my_db/_compact

On success, HTTP status 202 Accepted(1) is returned immediately:

    HTTP/1.1 202 Accepted
    Cache-Control: must-revalidate
    Content-Length: 12
    Content-Type: text/plain; charset=utf-8
    Date: Wed, 19 Jun 2013 09:43:52 GMT
    Server: CouchDB (Erlang/OTP)


    {"ok":true}

Although the request body is not used you must still specify
Content-Type(2) header with `application/json' value for the request.
If you don't, you will be aware about with HTTP status 415 Unsupported
Media Type(3) response:

    HTTP/1.1 415 Unsupported Media Type
    Cache-Control: must-revalidate
    Content-Length: 78
    Content-Type: application/json
    Date: Wed, 19 Jun 2013 09:43:44 GMT
    Server: CouchDB (Erlang/OTP)

    {"error":"bad_content_type","reason":"Content-Type must be application/json"}

When the compaction is successful started and running it is possible to
get information about it via *note database information resource: 267.:

    curl http://localhost:5984/my_db


    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 246
    Content-Type: application/json
    Date: Wed, 19 Jun 2013 16:51:20 GMT
    Server: CouchDB (Erlang/OTP)

    {
        "committed_update_seq": 76215,
        "compact_running": true,
        "data_size": 3787996,
        "db_name": "my_db",
        "disk_format_version": 6,
        "disk_size": 17703025,
        "doc_count": 5091,
        "doc_del_count": 0,
        "instance_start_time": "1371660751878859",
        "purge_seq": 0,
        "update_seq": 76215
    }

Note that `compaction_running' field is `true' indicating that
compaction is actually running. To track the compaction progress you
may query the *note _active_tasks: 1. resource:

    curl http://localhost:5984/my_db


    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 175
    Content-Type: application/json
    Date: Wed, 19 Jun 2013 16:27:23 GMT
    Server: CouchDB (Erlang/OTP)

    [
        {
            "changes_done": 44461,
            "database": "my_db",
            "pid": "<0.218.0>",
            "progress": 58,
            "started_on": 1371659228,
            "total_changes": 76215,
            "type": "database_compaction",
            "updated_on": 1371659241
        }
    ]


  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16


File: CouchDB.info,  Node: Views Compaction,  Next: Automatic Compaction,  Prev: Database Compaction,  Up: Compaction<2>

5.1.2 Views Compaction
----------------------

`Views' are also need compaction like databases, unlike databases views
are compacted by groups per `design document'. To start their
compaction there is need to send HTTP *note POST /{db}/_compact/{ddoc}:
1f. request:

    curl -H "Content-Type: application/json" -X POST http://localhost:5984/dbname/_compact/designname


    {"ok":true}

This compacts the view index from the current version of the specified
design document. The HTTP response code is 202 Accepted(1) (like *note
compaction for databases: 266.) and a compaction background task will
be created.

* Menu:

* Views cleanup::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3


File: CouchDB.info,  Node: Views cleanup,  Up: Views Compaction

5.1.2.1 Views cleanup
.....................

View indexes on disk are named after their `MD5' hash of the view
definition.  When you change a view, old indexes remain on disk. To
clean up all outdated view indexes (files named after the MD5
representation of views, that does not exist anymore) you can trigger a
*note view cleanup: 26c.:

    curl -H "Content-Type: application/json" -X POST http://localhost:5984/dbname/_view_cleanup


    {"ok":true}



File: CouchDB.info,  Node: Automatic Compaction,  Prev: Views Compaction,  Up: Compaction<2>

5.1.3 Automatic Compaction
--------------------------

While both *note database: 266. and *note views: 269.  compactions are
required be manually triggered, it is also possible to configure
automatic compaction, so that compaction of databases and views is
automatically triggered based on various criteria. Automatic compaction
is configured in CouchDB's *note configuration files: 1c0.

  The *note daemons/compaction_daemon: 7d. is responsible for triggering
the compaction. It is automatically started, but disabled by default.
The criteria for triggering the compactions is configured in the *note
compactions: 55. section.


File: CouchDB.info,  Node: Performance,  Prev: Compaction<2>,  Up: CouchDB Maintenance

5.2 Performance
===============

With up to tens of thousands of documents you will generally find
CouchDB to perform well no matter how you write your code. Once you
start getting into the millions of documents you need to be a lot more
careful.

* Menu:

* Disk I/O::
* System Resource Limits::
* Network::
* CouchDB::
* Views: Views<2>.

Disk I/O

* File Size::
* Disk and File System Performance::

System Resource Limits

* CouchDB Configuration Options::
* Erlang::
* PAM and ulimit::

CouchDB Configuration Options

* delayed_commits::
* max_dbs_open::

CouchDB

* DELETE operation::
* Document's ID::

Views

* Views Generation::
* Builtin Reduce Functions::


File: CouchDB.info,  Node: Disk I/O,  Next: System Resource Limits,  Up: Performance

5.2.1 Disk I/O
--------------

* Menu:

* File Size::
* Disk and File System Performance::


File: CouchDB.info,  Node: File Size,  Next: Disk and File System Performance,  Up: Disk I/O

5.2.1.1 File Size
.................

The smaller your file size, the less `I/O' operations there will be,
the more of the file can be cached by CouchDB and the operating system,
the quicker it is to replicate, backup etc. Consequently you should
carefully examine the data you are storing. For example it would be
silly to use keys that are hundreds of characters long, but your
program would be hard to maintain if you only used single character
keys. Carefully consider data that is duplicated by putting it in views.


File: CouchDB.info,  Node: Disk and File System Performance,  Prev: File Size,  Up: Disk I/O

5.2.1.2 Disk and File System Performance
........................................

Using faster disks, striped RAID arrays and modern file systems can all
speed up your CouchDB deployment. However, there is one option that can
increase the responsiveness of your CouchDB server when disk
performance is a bottleneck. From the Erlang documentation for the file
module:

     On operating systems with thread support, it is possible to let
     file operations be performed in threads of their own, allowing
     other Erlang processes to continue executing in parallel with the
     file operations.  See the command line flag +A in erl(1)(1).

  Setting this argument to a number greater than zero can keep your
CouchDB installation responsive even during periods of heavy disk
utilization. The easiest way to set this option is through the
`ERL_FLAGS' environment variable. For example, to give Erlang four
threads with which to perform I/O operations add the following to
`(prefix)/etc/defaults/couchdb' (or equivalent):

    export ERL_FLAGS="+A 4"


  ---------- Footnotes ----------

  (1) http://erlang.org/doc/man/erl.html


File: CouchDB.info,  Node: System Resource Limits,  Next: Network,  Prev: Disk I/O,  Up: Performance

5.2.2 System Resource Limits
----------------------------

One of the problems that administrators run into as their deployments
become large are resource limits imposed by the system and by the
application configuration. Raising these limits can allow your
deployment to grow beyond what the default configuration will support.

* Menu:

* CouchDB Configuration Options::
* Erlang::
* PAM and ulimit::

CouchDB Configuration Options

* delayed_commits::
* max_dbs_open::


File: CouchDB.info,  Node: CouchDB Configuration Options,  Next: Erlang,  Up: System Resource Limits

5.2.2.1 CouchDB Configuration Options
.....................................

* Menu:

* delayed_commits::
* max_dbs_open::


File: CouchDB.info,  Node: delayed_commits,  Next: max_dbs_open,  Up: CouchDB Configuration Options

5.2.2.2 delayed_commits
.......................

The *note delayed commits: 71. allows to achieve better write
performance for some workloads while sacrificing a small amount of
durability. The setting causes CouchDB to wait up to a full second
before committing new data after an update. If the server crashes before
the header is written then any writes since the last commit are lost.
Keep this option enabled on your own risk.


File: CouchDB.info,  Node: max_dbs_open,  Prev: delayed_commits,  Up: CouchDB Configuration Options

5.2.2.3 max_dbs_open
....................

In your *note configuration: 17e. (local.ini or similar) familiarize
yourself with the *note couchdb/max_dbs_open: 74.:

    [couchdb]
    max_dbs_open = 100

This option places an upper bound on the number of databases that can be
open at one time. CouchDB reference counts database accesses internally
and will close idle databases when it must. Sometimes it is necessary
to keep more than the default open at once, such as in deployments
where many databases will be continuously replicating.


File: CouchDB.info,  Node: Erlang,  Next: PAM and ulimit,  Prev: CouchDB Configuration Options,  Up: System Resource Limits

5.2.2.4 Erlang
..............

Even if you've increased the maximum connections CouchDB will allow,
the Erlang runtime system will not allow more than 1024 connections by
default. Adding the following directive to
`(prefix)/etc/default/couchdb' (or equivalent) will increase this limit
(in this case to 4096):

    export ERL_MAX_PORTS=4096

CouchDB versions up to 1.1.x also create Erlang Term Storage (ETS(1))
tables for each replication. If you are using a version of CouchDB
older than 1.2 and must support many replications, also set the
`ERL_MAX_ETS_TABLES' variable.  The default is approximately 1400
tables.

  Note that on Mac OS X, Erlang will not actually increase the file
descriptor limit past 1024 (i.e. the system header–defined value of
`FD_SETSIZE'). See this tip for a possible workaround(2) and this
thread for a deeper explanation(3).

  ---------- Footnotes ----------

  (1) http://www.erlang.org/doc/man/ets.html

  (2)
http://erlang.org/pipermail/erlang-questions/2011-December/063119.html

  (3)
http://erlang.org/pipermail/erlang-questions/2011-October/061971.html


File: CouchDB.info,  Node: PAM and ulimit,  Prev: Erlang,  Up: System Resource Limits

5.2.2.5 PAM and ulimit
......................

Finally, most *nix operating systems impose various resource limits on
every process. If your system is set up to use the Pluggable
Authentication Modules (PAM(1)) system, increasing this limit is
straightforward. For example, creating a file named
`/etc/security/limits.d/100-couchdb.conf' with the following contents
will ensure that CouchDB can open enough file descriptors to service
your increased maximum open databases and Erlang ports:

    #<domain>    <type>    <item>    <value>
    couchdb      hard      nofile    4096
    couchdb      soft      nofile    4096

If your system does not use PAM, a `ulimit' command is usually
available for use in a custom script to launch CouchDB with increased
resource limits.  If necessary, feel free to increase this limits as
long as your hardware can handle the load.

  ---------- Footnotes ----------

  (1) http://www.linux-pam.org/


File: CouchDB.info,  Node: Network,  Next: CouchDB,  Prev: System Resource Limits,  Up: Performance

5.2.3 Network
-------------

There is latency overhead making and receiving each request/response.
In general you should do your requests in batches. Most APIs have some
mechanism to do batches, usually by supplying lists of documents or
keys in the request body. Be careful what size you pick for the
batches. The larger batch requires more time your client has to spend
encoding the items into JSON and more time is spent decoding that
number of responses. Do some benchmarking with your own configuration
and typical data to find the sweet spot.  It is likely to be between
one and ten thousand documents.

  If you have a fast I/O system then you can also use concurrency - have
multiple requests/responses at the same time. This mitigates the latency
involved in assembling JSON, doing the networking and decoding JSON.

  As of CouchDB 1.1.0, users often report lower write performance of
documents compared to older releases. The main reason is that this
release ships with the more recent version of the HTTP server library
Mochiweb, which by default sets the TCP socket option SO_NODELAY(1) to
false. This means that small data sent to the TCP socket, like the
reply to a document write request (or reading a very small document),
will not be sent immediately to the network - TCP will buffer it for a
while hoping that it will be asked to send more data through the same
socket and then send all the data at once for increased performance.
This TCP buffering behaviour can be disabled via *note
httpd/socket_options: 9a.:

    [httpd]
    socket_options = [{nodelay, true}]


See also
........

Bulk *note load: 27f. and *note store: 255. API.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Nagle%27s_algorithm


File: CouchDB.info,  Node: CouchDB,  Next: Views<2>,  Prev: Network,  Up: Performance

5.2.4 CouchDB
-------------

* Menu:

* DELETE operation::
* Document's ID::


File: CouchDB.info,  Node: DELETE operation,  Next: Document's ID,  Up: CouchDB

5.2.4.1 DELETE operation
........................

When you DELETE(1) a document the database will create a new revision
which contains the `_id' and `_rev' fields as well as the `_deleted'
flag. This revision will remain even after a `database compaction' so
that the deletion can be replicated. Deleted documents, like
non-deleted documents, can affect view build times, PUT(2) and
DELETE(3) requests time and size of database on disk, since they
increase the size of the B+Tree's. You can see the number of deleted
documents in *note database information: 15. If your use case creates
lots of deleted documents (for example, if you are storing short-term
data like logfile entries, message queues, etc), you might want to
periodically switch to a new database and delete the old one (once the
entries in it have all expired).

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.7

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.7


File: CouchDB.info,  Node: Document's ID,  Prev: DELETE operation,  Up: CouchDB

5.2.4.2 Document's ID
.....................

The db file size is derived from your document and view sizes but also
on a multiple of your `_id' sizes. Not only is the `_id' present in the
document, but it and parts of it are duplicated in the binary tree
structure CouchDB uses to navigate the file to find the document in the
first place. As a real world example for one user switching from 16
byte ids to 4 byte ids made a database go from 21GB to 4GB with 10
million documents (the raw JSON text when from 2.5GB to 2GB).

  Inserting with sequential (and at least sorted) ids is faster than
random ids.  Consequently you should consider generating ids yourself,
allocating them sequentially and using an encoding scheme that consumes
fewer bytes.  For example, something that takes 16 hex digits to
represent can be done in 4 base 62 digits (10 numerals, 26 lower case,
26 upper case).


File: CouchDB.info,  Node: Views<2>,  Prev: CouchDB,  Up: Performance

5.2.5 Views
-----------

* Menu:

* Views Generation::
* Builtin Reduce Functions::


File: CouchDB.info,  Node: Views Generation,  Next: Builtin Reduce Functions,  Up: Views<2>

5.2.5.1 Views Generation
........................

Views with the Javascript query server are extremely slow to generate
when there are a non-trivial number of documents to process. The
generation process won't even saturate a single CPU let alone your I/O.
The cause is the latency involved in the CouchDB server and separate
`couchjs' query server, dramatically indicating how important it is to
take latency out of your implementation.

  You can let view access be "stale" but it isn't practical to
determine when that will occur giving you a quick response and when
views will be updated which will take a long time. (A 10 million
document database took about 10 minutes to load into CouchDB but about
4 hours to do view generation).

  View information isn't replicated - it is rebuilt on each database so
you can't do the view generation on a separate sever.


File: CouchDB.info,  Node: Builtin Reduce Functions,  Prev: Views Generation,  Up: Views<2>

5.2.5.2 Builtin Reduce Functions
................................

If you’re using a very simple view function that only performs a sum or
count reduction, you can call native Erlang implementations of them by
simply writing `_sum' or `_count' in place of your function declaration.
This will speed up things dramatically, as it cuts down on IO between
CouchDB and the *note JavaScript query server: f9. For example, as
mentioned on the mailing list(1), the time for outputting an (already
indexed and cached) view with about 78,000 items went down from 60
seconds to 4 seconds.

  Before:

    {
      "_id": "_design/foo",
      "views": {
        "bar": {
          "map": "function (doc) { emit(doc.author, 1); }",
          "reduce": "function (keys, values, rereduce) { return sum(values); }"
        }
      }
    }

After:

    {
      "_id": "_design/foo",
      "views": {
        "bar": {
          "map": "function (doc) { emit(doc.author, 1); }",
          "reduce": "_sum"
        }
      }
    }


See also
........

*note Builtin reduce functions: 286.

  ---------- Footnotes ----------

  (1)
http://mail-archives.apache.org/mod_mbox/couchdb-user/201003.mbox/%3c5E07E00E-3D69-4A8C-ADA3-1B20CF0BA4C8@julianstahnke.com%3e


File: CouchDB.info,  Node: CouchApp,  Next: CouchDB Externals API,  Prev: CouchDB Maintenance,  Up: Top

6 CouchApp
**********

CouchApps(1) are web applications served directly from CouchDB, mostly
driven by JavaScript and HTML5. If you can fit your application into
those constraints, then you get CouchDB's scalability and flexibility
"for free" (and deploying your app is as simple as replicating it to
the production server).

* Menu:

* Design Functions::
* Guide to Views::

Design Functions

* View functions::
* Show functions::
* List functions::
* Update functions::
* Filter functions::
* Validate document update functions::

View functions

* Map functions::
* Reduce and rereduce functions::

Reduce and rereduce functions

* Builtin reduce functions::

Filter functions

* Classic filters::
* View filters::

Guide to Views

* Introduction Into The Views::
* Views Collation::
* Joins With Views::
* View Cookbook for SQL Jockeys::
* Pagination Recipe::

Introduction Into The Views

* What Is a View?::
* Efficient Lookups::
* The View to Get Comments for Posts::
* Reduce/Rereduce::
* Lessons Learned::
* Wrapping Up: Wrapping Up<5>.

Efficient Lookups

* Find One::
* Find Many::
* Reversed Results::

Views Collation

* Basics: Basics<2>.
* Examples::
* Sorting by Dates::
* String Ranges::
* Collation Specification::
* _all_docs::
* Raw collation::

Collation Specification

* Key ranges::
* Complex keys::

Joins With Views

* Linked Documents::
* Using View Collation::

Using View Collation

* Approach #1; Comments Inlined: Approach #1 Comments Inlined.
* Approach #2; Comments Separate: Approach #2 Comments Separate.
* Optimization; Using the Power of View Collation: Optimization Using the Power of View Collation.

View Cookbook for SQL Jockeys

* Using Views::
* Look Up by Key::
* Look Up by Prefix::
* Aggregate Functions::
* Get Unique Values::
* Enforcing Uniqueness::

Using Views

* Defining a View::
* Querying a View::
* MapReduce Functions::
* Map functions: Map functions<2>.

Pagination Recipe

* Example Data::
* A View::
* Setup::
* Paging::
* Paging (Alternate Method): Paging Alternate Method.
* Jump to Page::

  ---------- Footnotes ----------

  (1) http://couchapp.org/


File: CouchDB.info,  Node: Design Functions,  Next: Guide to Views,  Up: CouchApp

6.1 Design Functions
====================

In this section we'll show how to write design documents, using the
built-in *note JavaScript Query Server: f9.

  But before we start to write our first function, let's take a look at
the list of common objects that will be used during our code journey -
we'll be using them extensively within each function:

   - *note Database information object: 28b.

   - *note Request object: 28c.

   - *note Response object: 28d.

   - *note UserCtx object: 1dd.

   - *note Database Security object: 28e.

   - *note Guide to JavaScript Query Server: f9.

* Menu:

* View functions::
* Show functions::
* List functions::
* Update functions::
* Filter functions::
* Validate document update functions::

View functions

* Map functions::
* Reduce and rereduce functions::

Reduce and rereduce functions

* Builtin reduce functions::

Filter functions

* Classic filters::
* View filters::


File: CouchDB.info,  Node: View functions,  Next: Show functions,  Up: Design Functions

6.1.1 View functions
--------------------

Views are the primary tool used for querying and reporting on CouchDB
databases.

* Menu:

* Map functions::
* Reduce and rereduce functions::


File: CouchDB.info,  Node: Map functions,  Next: Reduce and rereduce functions,  Up: View functions

6.1.1.1 Map functions
.....................

 -- Javascript Function: mapfun (doc)
          Arguments:

             * *doc* - Processed document object.

Map functions accept a single document as the argument and (optionally)
*note emit(): 292.  key/value pairs that are stored in a view.

    function (doc) {
      if (doc.type === 'post' && doc.tags && Array.isArray(doc.tags)) {
        doc.tags.forEach(function (tag) {
          emit(tag.toLowerCase(), 1);
        });
      }
    }

In this example a key/value pair is emitted for each value in the
`tags' array of a document with a `type' of "post". Note that *note
emit(): 292. may be called many times for a single document, so the
same document may be available by several different keys.

  Also keep in mind that each document is _sealed_ to prevent situation
when one map function changes document state and the other one received
a modified version.

  For efficiency reasons, documents are passed to a group of map
functions - each document is processed by group of map functions from
all views of related design document. This means that if you trigger
index update for one view in ddoc, all others will get updated too.

  Since `1.1.0' release `map' function supports *note CommonJS: 293.
modules and access to *note require(): 294. function.


File: CouchDB.info,  Node: Reduce and rereduce functions,  Prev: Map functions,  Up: View functions

6.1.1.2 Reduce and rereduce functions
.....................................

 -- Javascript Function: redfun (keys, values[, rereduce])
          Arguments:

             * *keys* - Array of pairs docid-key for related map
               function result.  Always `null' if rereduce is running
               (has `true' value).

             * *values* - Array of map function result values.

             * *rereduce* - Boolean sign of rereduce run.

          Returns: Reduces `values'

Reduce functions takes two required arguments of keys and values lists
- the result of the related map function - and optional third one which
indicates if `rereduce' mode is active or not. `Rereduce' is using for
additional reduce values list, so when it is `true' there is no
information about related `keys' (first argument is `null').

  Note, that if produced result by `reduce' function is longer than
initial values list then a Query Server error will be raised. However,
this behavior could be disabled by setting `reduce_limit' config option
to `false':

    [query_server_config]
    reduce_limit = false

While disabling `reduce_limit' might be useful for debug proposes,
remember, that main task of reduce functions is to _reduce_ mapped
result, not to make it even bigger. Generally, your reduce function
should converge rapidly to a single value - which could be an array or
similar object.

* Menu:

* Builtin reduce functions::


File: CouchDB.info,  Node: Builtin reduce functions,  Up: Reduce and rereduce functions

6.1.1.3 Builtin reduce functions
................................

Additionally, CouchDB has three built-in reduce functions. These are
implemented in Erlang and runs inside CouchDB, so they are much faster
than the equivalent JavaScript functions: `_sum', `_count' and
`_stats'. Their equivalents in JavaScript below:

    // could be replaced by _sum
    function(keys, values) {
      return sum(values);
    }

    // could be replaced by _count
    function(keys, values, rereduce) {
      if (rereduce) {
        return sum(values);
      } else {
        return values.length;
      }
    }

    // could be replaced by _stats
    function(keys, values, rereduce) {
      if (rereduce) {
        return {
          'sum': values.reduce(function(a, b) { return a + b.sum }, 0),
          'min': values.reduce(function(a, b) { return Math.min(a, b.min) }, Infinity),
          'max': values.reduce(function(a, b) { return Math.max(a, b.max) }, -Infinity),
          'count': values.reduce(function(a, b) { return a + b.count }, 0),
          'sumsqr': values.reduce(function(a, b) { return a + b.sumsqr }, 0)
        }
      } else {
        return {
          'sum': sum(values),
          'min': Math.min.apply(null, values),
          'max': Math.max.apply(null, values),
          'count': values.length,
          'sumsqr': (function() {
            var sumsqr = 0;

            values.forEach(function (value) {
              sumsqr += value * value;
            });

            return sumsqr;
          })(),
        }
      }
    }


     Note: *Why don't reduce functions support CommonJS modules?*

     While `map' functions have limited access to stored modules through
     *note require(): 294. function there is no such feature for
     `reduce' functions.  The reason lies deep inside in mechanism how
     `map' and `reduce' functions are processed by Query Server. Let's
     take a look on `map' functions first:

       1. CouchDB sends all `map' functions for processed design
          document to Query Server.

       2. Query Server handles them one by one, compiles and puts them
          onto an internal stack.

       3. After all `map' functions had been processed, CouchDB will
          send the remaining documents to index one by one.

       4. The Query Server receives the document object and applies it
          to every function from the stack. The emitted results are
          then joined into a single array and sent back to CouchDB.

     Now let's see how `reduce' functions are handled:

       1. CouchDB sends _as single command_ list of available `reduce'
          functions with result list of key-value pairs that was
          previously received as result of `map' functions work.

       2. Query Server compiles reduce functions and applies them to
          key-value lists. Reduced result sends back to CouchDB.

     As you may note, `reduce' functions been applied in single shot
     while `map' ones are applied in an iterative way per each
     document. This means that it's possible for `map' functions to
     precompile CommonJS libraries and use them during the entire view
     processing, but for `reduce' functions it will be compiled again
     and again for each view result reduction, which will lead to
     performance degradation (`reduce' function are already does hard
     work to make large result smaller).


File: CouchDB.info,  Node: Show functions,  Next: List functions,  Prev: View functions,  Up: Design Functions

6.1.2 Show functions
--------------------

 -- Javascript Function: showfun (doc, req)
          Arguments:

             * *doc* - Processed document, may be omitted.

             * *req* - *note Request object: 28c.

          Returns: *note Response object: 28d.

          Return type: object or string

Show functions are used to represent documents in various formats,
commonly as HTML page with nicer formatting. They can also be used to
run server-side functions without requiring a pre-existing document.

  Basic example of show function could be:

    function(doc, req){
      if (doc) {
        return "Hello from " + doc._id + "!";
      } else {
        return "Hello, world!";
      }
    }

Also, there is more simple way to return json encoded data:

    function(doc, req){
      return {
        'json': {
          'id': doc['_id'],
          'rev': doc['_rev']
        }
      }
    }

and even files (this one is CouchDB logo):

    function(doc, req){
      return {
        'headers': {
          'Content-Type' : 'image/png',
        },
        'base64': ''.concat(
          'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAsV',
          'BMVEUAAAD////////////////////////5ur3rEBn////////////////wDBL/',
          'AADuBAe9EB3IEBz/7+//X1/qBQn2AgP/f3/ilpzsDxfpChDtDhXeCA76AQH/v7',
          '/84eLyWV/uc3bJPEf/Dw/uw8bRWmP1h4zxSlD6YGHuQ0f6g4XyQkXvCA36MDH6',
          'wMH/z8/yAwX64ODeh47BHiv/Ly/20dLQLTj98PDXWmP/Pz//39/wGyJ7Iy9JAA',
          'AADHRSTlMAbw8vf08/bz+Pv19jK/W3AAAAg0lEQVR4Xp3LRQ4DQRBD0QqTm4Y5',
          'zMxw/4OleiJlHeUtv2X6RbNO1Uqj9g0RMCuQO0vBIg4vMFeOpCWIWmDOw82fZx',
          'vaND1c8OG4vrdOqD8YwgpDYDxRgkSm5rwu0nQVBJuMg++pLXZyr5jnc1BaH4GT',
          'LvEliY253nA3pVhQqdPt0f/erJkMGMB8xucAAAAASUVORK5CYII=')
      }
    }

But what if you need to represent data in different formats via a
single function?  Functions *note registerType(): 299. and *note
provides(): 29a. are your the best friends in that question:

    function(doc, req){
      provides('json', function(){
        return {'json': doc}
      });
      provides('html', function(){
        return '<pre>' + toJSON(doc) + '</pre>'
      })
      provides('xml', function(){
        return {
          'headers': {'Content-Type': 'application/xml'},
          'body' : ''.concat(
            '<?xml version="1.0" encoding="utf-8"?>\n',
            '<doc>',
            (function(){
              escape = function(s){
                return s.replace(/&quot;/g, '"')
                        .replace(/&gt;/g, '>')
                        .replace(/&lt;/g, '<')
                        .replace(/&amp;/g, '&');
              };
              var content = '';
              for(var key in doc){
                if(!doc.hasOwnProperty(key)) continue;
                var value = escape(toJSON(doc[key]));
                var key = escape(key);
                content += ''.concat(
                  '<' + key + '>',
                  value
                  '</' + key + '>'
                )
              }
              return content;
            })(),
            '</doc>'
          )
        }
      })
      registerType('text-json', 'text/json')
      provides('text-json', function(){
        return toJSON(doc);
      })
    }

This function may return `html', `json' , `xml' or our custom `text
json' format representation of same document object with same
processing rules. Probably, the `xml' provider in our function needs
more care to handle nested objects correctly, and keys with invalid
characters, but you've got the idea!

See also
........

CouchDB Wiki:
        - Showing Documents(1)

CouchDB Guide:
        - Show Functions(2)

---------- Footnotes ----------

  (1)
http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Showing_Documents

  (2) http://guide.couchdb.org/editions/1/en/show.html


File: CouchDB.info,  Node: List functions,  Next: Update functions,  Prev: Show functions,  Up: Design Functions

6.1.3 List functions
--------------------

 -- Javascript Function: listfun (head, req)
          Arguments:

             * *head* - *note View Head Information: 29c.

             * *req* - *note Request object: 28c.

          Returns: Last chunk.

          Return type: string

While *note Show functions: 176. are used to customize document
presentation, *note List functions: f8.  are used for same purpose, but
against *note View functions: 10c. results.

  The next list function formats view and represents it as a very
simple HTML page:

    function(head, req){
      start({
        'headers': {
          'Content-Type': 'text/html'
        }
      });
      send('<html><body><table>');
      send('<tr><th>ID</th><th>Key</th><th>Value</th></tr>')
      while(row = getRow()){
        send(''.concat(
          '<tr>',
          '<td>' + toJSON(row.id) + '</td>',
          '<td>' + toJSON(row.key) + '</td>',
          '<td>' + toJSON(row.value) + '</td>',
          '</tr>'
        ));
      }
      send('</table></body></html>');
    }

Templates and styles could obviously be used to present data in a nicer
fashion, but this is an excellent starting point. Note that you may also
use *note registerType(): 299. and *note provides(): 29a. functions in
the same way as for *note Show functions: 176.!

See also
........

CouchDB Wiki:
        - Listing Views with CouchDB 0.10 and later(1)

CouchDB Guide:
        - Transforming Views with List Functions(2)

---------- Footnotes ----------

  (1)
http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Listing_Views_with_CouchDB_0.10_and_later

  (2) http://guide.couchdb.org/draft/transforming.html


File: CouchDB.info,  Node: Update functions,  Next: Filter functions,  Prev: List functions,  Up: Design Functions

6.1.4 Update functions
----------------------

 -- Javascript Function: updatefun (doc, req)
          Arguments:

             * *doc* - Update function target document.

             * *req* - *note Request object: 28c.

          Returns: Two-element array: the first element is the (updated
          or new) document, which is committed to the database. If the
          first element is `null' no document will be committed to the
          database.  If you are updating an existing, it should already
          have an `_id' set, and if you are creating a new document,
          make sure to set its `_id' to something, either generated
          based on the input or the `req.uuid' provided. The second
          element is the response that will be sent back to the caller.

Update handlers are functions that clients can request to invoke
server-side logic that will create or update a document. This feature
allows a range of use cases such as providing a server-side last
modified timestamp, updating individual fields in a document without
first getting the latest revision, etc.

  When the request to an update handler includes a document ID in the
URL, the server will provide the function with the most recent version
of that document.  You can provide any other values needed by the
update handler function via the `POST'/`PUT' entity body or query
string parameters of the request.

  The basic example that demonstrates all use-cases of update handlers
below:

    function(doc, req){
        if (!doc){
            if ('id' in req && req['id']){
                // create new document
                return [{'_id': req['id']}, 'New World']
            }
            // change nothing in database
            return [null, 'Empty World']
        }
        doc['world'] = 'hello';
        doc['edited_by'] = req['userCtx']['name']
        return [doc, 'Edited World!']
    }


See also
........

CouchDB Wiki:
        - Document Update Handlers(1)

---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/Document_Update_Handlers


File: CouchDB.info,  Node: Filter functions,  Next: Validate document update functions,  Prev: Update functions,  Up: Design Functions

6.1.5 Filter functions
----------------------

 -- Javascript Function: filterfun (doc, req)
          Arguments:

             * *doc* - Processed document object.

             * *req* - *note Request object: 28c.

          Returns: Boolean value: `true' means that `doc' passes the
          filter rules, `false' means that it does not.

Filter functions mostly act like *note Show functions: 176. and *note
List functions: f8.: they format, or _filter_ the *note changes feed:
fc.

* Menu:

* Classic filters::
* View filters::


File: CouchDB.info,  Node: Classic filters,  Next: View filters,  Up: Filter functions

6.1.5.1 Classic filters
.......................

By default the changes feed emits all database documents changes. But
if you're waiting for some special changes, processing all documents is
inefficient.

  Filters are special design document functions that allow the changes
feed to emit only specific documents that pass filter rules.

  Let's assume that our database is a mailbox and we need to handle
only new mail events (documents with status `new'). Our filter function
will look like this:

    function(doc, req){
      // we need only `mail` documents
      if (doc.type != 'mail'){
        return false;
      }
      // we're interested only in `new` ones
      if (doc.status != 'new'){
        return false;
      }
      return true; // passed!
    }

Filter functions must return `true' if a document passed all defined
rules. Now, if you apply this function to the changes feed it will emit
only changes about "new mails":

    GET /somedatabase/_changes?filter=mailbox/new_mail HTTP/1.1


    {"results":[
    {"seq":1,"id":"df8eca9da37dade42ee4d7aa3401f1dd","changes":[{"rev":"1-c2e0085a21d34fa1cecb6dc26a4ae657"}]},
    {"seq":7,"id":"df8eca9da37dade42ee4d7aa34024714","changes":[{"rev":"1-29d748a6e87b43db967fe338bcb08d74"}]},
    ],
    "last_seq":27}

Note that the value of `last_seq' is 27, but we'd received only two
records.  Seems like any other changes were for documents that haven't
passed our filter.

  We probably need to filter the changes feed of our mailbox by more
than a single status value. We're also interested in statuses like
"spam" to update spam-filter heuristic rules, "outgoing" to let a mail
daemon actually send mails, and so on. Creating a lot of similar
functions that actually do similar work isn't good idea - so we need a
dynamic filter.

  You may have noticed that filter functions take a second argument
named *note request: 28c. - it allows creating dynamic filters based on
query parameters, *note user context: 1dd. and more.

  The dynamic version of our filter looks like this:

    function(doc, req){
      // we need only `mail` documents
      if (doc.type != 'mail'){
        return false;
      }
      // we're interested only in requested status
      if (doc.status != req.query.status){
        return false;
      }
      return true; // passed!
    }

and now we have passed the `status' query parameter in request to let
our filter match only required documents:

    GET /somedatabase/_changes?filter=mailbox/by_status&status=new HTTP/1.1


    {"results":[
    {"seq":1,"id":"df8eca9da37dade42ee4d7aa3401f1dd","changes":[{"rev":"1-c2e0085a21d34fa1cecb6dc26a4ae657"}]},
    {"seq":7,"id":"df8eca9da37dade42ee4d7aa34024714","changes":[{"rev":"1-29d748a6e87b43db967fe338bcb08d74"}]},
    ],
    "last_seq":27}

and we can easily change filter behavior with:

    GET /somedatabase/_changes?filter=mailbox/by_status&status=spam HTTP/1.1


    {"results":[
    {"seq":11,"id":"8960e91220798fc9f9d29d24ed612e0d","changes":[{"rev":"3-cc6ff71af716ddc2ba114967025c0ee0"}]},
    ],
    "last_seq":27}

Combining filters with a `continuous' feed allows creating powerful
event-driven systems.


File: CouchDB.info,  Node: View filters,  Prev: Classic filters,  Up: Filter functions

6.1.5.2 View filters
....................

View filters are the same as above, with one small difference: they use
views `map' function instead to `filter' one to process the changes
feed. Each time when a key-value pair could be emitted, a change is
returned. This allows to avoid creating filter functions that are
mostly does same works as views.

  To use them just specify `_view' value for `filter' parameter and
`designdoc/viewname' for `view' one:

    GET /somedatabase/_changes?filter=_view&view=dname/viewname  HTTP/1.1


     Note: Since view filters uses `map' functions as filters, they
     can't show any dynamic behavior since *note request object: 28c.
     is not available.

See also
........

CouchDB Guide:
        - Guide to filter change notification(1)

CouchDB Wiki:
        - Filtered replication(2)

---------- Footnotes ----------

  (1) http://guide.couchdb.org/draft/notifications.html#filters

  (2) http://wiki.apache.org/couchdb/Replication#Filtered_Replication


File: CouchDB.info,  Node: Validate document update functions,  Prev: Filter functions,  Up: Design Functions

6.1.6 Validate document update functions
----------------------------------------

 -- Javascript Function: validatefun (newDoc, oldDoc, userCtx, secObj)
          Arguments:

             * *newDoc* - New version of document that will be stored.

             * *oldDoc* - Previous version of document that is already
               stored.

             * *userCtx* - *note User Context Object: 1dd.

             * *secObj* - *note Security Object: 28e.

          Throws : `forbidden' error to gracefully prevent document
          storing.

          Throws : `unauthorized' error to prevent storage and allow
          the user to re-auth.

A design document may contain a function named `validate_doc_update'
which can be used to prevent invalid or unauthorized document update
requests from being stored.  The function is passed the new document
from the update request, the current document stored in the database, a
*note User Context Object: 1dd.  containing information about the user
writing the document (if present), and a *note Security Object: 28e.
with lists of database security roles.

  Validation functions typically examine the structure of the new
document to ensure that required fields are present and to verify that
the requesting user should be allowed to make changes to the document
properties.  For example, an application may require that a user must
be authenticated in order to create a new document or that specific
document fields be present when a document is updated. The validation
function can abort the pending document write by throwing one of two
error objects:

    // user is not authorized to make the change but may re-authenticate
    throw({ unauthorized: 'Error message here.' });

    // change is not allowed
    throw({ forbidden: 'Error message here.' });

Document validation is optional, and each design document in the
database may have at most one validation function.  When a write
request is received for a given database, the validation function in
each design document in that database is called in an unspecified
order.  If any of the validation functions throw an error, the write
will not succeed.

  *Example*: The `_design/_auth' ddoc from `_users' database uses a
validation function to ensure that documents contain some required
fields and are only modified by a user with the `_admin' role:

    function(newDoc, oldDoc, userCtx, secObj) {
        if (newDoc._deleted === true) {
            // allow deletes by admins and matching users
            // without checking the other fields
            if ((userCtx.roles.indexOf('_admin') !== -1) ||
                (userCtx.name == oldDoc.name)) {
                return;
            } else {
                throw({forbidden: 'Only admins may delete other user docs.'});
            }
        }

        if ((oldDoc && oldDoc.type !== 'user') || newDoc.type !== 'user') {
            throw({forbidden : 'doc.type must be user'});
        } // we only allow user docs for now

        if (!newDoc.name) {
            throw({forbidden: 'doc.name is required'});
        }

        if (!newDoc.roles) {
            throw({forbidden: 'doc.roles must exist'});
        }

        if (!isArray(newDoc.roles)) {
            throw({forbidden: 'doc.roles must be an array'});
        }

        if (newDoc._id !== ('org.couchdb.user:' + newDoc.name)) {
            throw({
                forbidden: 'Doc ID must be of the form org.couchdb.user:name'
            });
        }

        if (oldDoc) { // validate all updates
            if (oldDoc.name !== newDoc.name) {
                throw({forbidden: 'Usernames can not be changed.'});
            }
        }

        if (newDoc.password_sha && !newDoc.salt) {
            throw({
                forbidden: 'Users with password_sha must have a salt.' +
                    'See /_utils/script/couch.js for example code.'
            });
        }

        var is_server_or_database_admin = function(userCtx, secObj) {
            // see if the user is a server admin
            if(userCtx.roles.indexOf('_admin') !== -1) {
                return true; // a server admin
            }

            // see if the user a database admin specified by name
            if(secObj && secObj.admins && secObj.admins.names) {
                if(secObj.admins.names.indexOf(userCtx.name) !== -1) {
                    return true; // database admin
                }
            }

            // see if the user a database admin specified by role
            if(secObj && secObj.admins && secObj.admins.roles) {
                var db_roles = secObj.admins.roles;
                for(var idx = 0; idx < userCtx.roles.length; idx++) {
                    var user_role = userCtx.roles[idx];
                    if(db_roles.indexOf(user_role) !== -1) {
                        return true; // role matches!
                    }
                }
            }

            return false; // default to no admin
        }

        if (!is_server_or_database_admin(userCtx, secObj)) {
            if (oldDoc) { // validate non-admin updates
                if (userCtx.name !== newDoc.name) {
                    throw({
                        forbidden: 'You may only update your own user document.'
                    });
                }
                // validate role updates
                var oldRoles = oldDoc.roles.sort();
                var newRoles = newDoc.roles.sort();

                if (oldRoles.length !== newRoles.length) {
                    throw({forbidden: 'Only _admin may edit roles'});
                }

                for (var i = 0; i < oldRoles.length; i++) {
                    if (oldRoles[i] !== newRoles[i]) {
                        throw({forbidden: 'Only _admin may edit roles'});
                    }
                }
            } else if (newDoc.roles.length > 0) {
                throw({forbidden: 'Only _admin may set roles'});
            }
        }

        // no system roles in users db
        for (var i = 0; i < newDoc.roles.length; i++) {
            if (newDoc.roles[i][0] === '_') {
                throw({
                    forbidden:
                    'No system roles (starting with underscore) in users db.'
                });
            }
        }

        // no system names as names
        if (newDoc.name[0] === '_') {
            throw({forbidden: 'Username may not start with underscore.'});
        }

        var badUserNameChars = [':'];

        for (var i = 0; i < badUserNameChars.length; i++) {
            if (newDoc.name.indexOf(badUserNameChars[i]) >= 0) {
                throw({forbidden: 'Character `' + badUserNameChars[i] +
                        '` is not allowed in usernames.'});
            }
        }
    }


     Note: The `return' statement used only for function, it has no
     impact on the validation process.

See also
........

CouchDB Guide:
        - Validation Functions(1)

CouchDB Wiki:
        - Document Update Validation(2)

---------- Footnotes ----------

  (1) http://guide.couchdb.org/editions/1/en/validation.html

  (2) http://wiki.apache.org/couchdb/Document_Update_Validation


File: CouchDB.info,  Node: Guide to Views,  Prev: Design Functions,  Up: CouchApp

6.2 Guide to Views
==================

Views are the primary tool used for querying and reporting on CouchDB
documents.  There you'll learn how they works and how to use them to
build effective applications with CouchDB

* Menu:

* Introduction Into The Views::
* Views Collation::
* Joins With Views::
* View Cookbook for SQL Jockeys::
* Pagination Recipe::

Introduction Into The Views

* What Is a View?::
* Efficient Lookups::
* The View to Get Comments for Posts::
* Reduce/Rereduce::
* Lessons Learned::
* Wrapping Up: Wrapping Up<5>.

Efficient Lookups

* Find One::
* Find Many::
* Reversed Results::

Views Collation

* Basics: Basics<2>.
* Examples::
* Sorting by Dates::
* String Ranges::
* Collation Specification::
* _all_docs::
* Raw collation::

Collation Specification

* Key ranges::
* Complex keys::

Joins With Views

* Linked Documents::
* Using View Collation::

Using View Collation

* Approach #1; Comments Inlined: Approach #1 Comments Inlined.
* Approach #2; Comments Separate: Approach #2 Comments Separate.
* Optimization; Using the Power of View Collation: Optimization Using the Power of View Collation.

View Cookbook for SQL Jockeys

* Using Views::
* Look Up by Key::
* Look Up by Prefix::
* Aggregate Functions::
* Get Unique Values::
* Enforcing Uniqueness::

Using Views

* Defining a View::
* Querying a View::
* MapReduce Functions::
* Map functions: Map functions<2>.

Pagination Recipe

* Example Data::
* A View::
* Setup::
* Paging::
* Paging (Alternate Method): Paging Alternate Method.
* Jump to Page::


File: CouchDB.info,  Node: Introduction Into The Views,  Next: Views Collation,  Up: Guide to Views

6.2.1 Introduction Into The Views
---------------------------------

Views are useful for many purposes:

   - Filtering the documents in your database to find those relevant to
     a particular process.

   - Extracting data from your documents and presenting it in a
     specific order.

   - Building efficient indexes to find documents by any value or
     structure that resides in them.

   - Use these indexes to represent relationships among documents.

   - Finally, with views you can make all sorts of calculations on the
     data in your documents. For example, if documents represent your
     company’s financial transactions, a view can answer the question
     of what the spending was in the last week, month, or year.

* Menu:

* What Is a View?::
* Efficient Lookups::
* The View to Get Comments for Posts::
* Reduce/Rereduce::
* Lessons Learned::
* Wrapping Up: Wrapping Up<5>.


File: CouchDB.info,  Node: What Is a View?,  Next: Efficient Lookups,  Up: Introduction Into The Views

6.2.1.1 What Is a View?
.......................

Let’s go through the different use cases. First is extracting data that
you might need for a special purpose in a specific order. For a front
page, we want a list of blog post titles sorted by date. We’ll work
with a set of example documents as we walk through how views work:

    {
      "_id":"biking",
      "_rev":"AE19EBC7654",

      "title":"Biking",
      "body":"My biggest hobby is mountainbiking. The other day...",
      "date":"2009/01/30 18:04:11"
    }


    {
      "_id":"bought-a-cat",
      "_rev":"4A3BBEE711",

      "title":"Bought a Cat",
      "body":"I went to the the pet store earlier and brought home a little kitty...",
      "date":"2009/02/17 21:13:39"
    }


    {
      "_id":"hello-world",
      "_rev":"43FBA4E7AB",

      "title":"Hello World",
      "body":"Well hello and welcome to my new blog...",
      "date":"2009/01/15 15:52:20"
    }

Three will do for the example. Note that the documents are sorted by
"_id", which is how they are stored in the database. Now we define a
view.  Bear with us without an explanation while we show you some code:

    function(doc) {
      if(doc.date && doc.title) {
        emit(doc.date, doc.title);
      }
    }

This is a `map function', and it is written in JavaScript. If you are
not familiar with JavaScript but have used C or any other C-like
language such as Java, PHP, or C#, this should look familiar. It is a
simple function definition.

  You provide CouchDB with view functions as strings stored inside the
`views' field of a design document. You don’t run it yourself. Instead,
when you `query your view', CouchDB takes the source code and runs it
for you on every document in the database your view was defined in. You
`query your view' to retrieve the `view result'.

  All map functions have a single parameter doc. This is a single
document in the database. Our map function checks whether our document
has a `date' and a `title' attribute — luckily, all of our documents
have them — and then calls the built-in *note emit(): 292. function
with these two attributes as arguments.

  The *note emit(): 292. function always takes two arguments: the first
is `key', and the second is `value'. The `emit(key, value)' function
creates an entry in our `view result'. One more thing: the `emit()'
function can be called multiple times in the map function to create
multiple entries in the view results from a single document, but we are
not doing that yet.

  CouchDB takes whatever you pass into the emit() function and puts it
into a list (see Table 1, “View results” below). Each row in that list
includes the `key' and `value'. More importantly, the list is sorted by
key (by `doc.date' in our case).  The most important feature of a view
result is that it is sorted by `key'. We will come back to that over
and over again to do neat things. Stay tuned.

  Table 1. View results:

Key                         Value
--------------------------------------------------- 
"2009/01/15 15:52:20"       "Hello World"
"2009/01/30 18:04:11"       "Biking"
"2009/02/17 21:13:39"       "Bought a Cat"

  When you query your view, CouchDB takes the source code and runs it
for you on every document in the database. If you have a lot of
documents, that takes quite a bit of time and you might wonder if it is
not horribly inefficient to do this. Yes, it would be, but CouchDB is
designed to avoid any extra costs: it only runs through all documents
once, when you first query your view.  If a document is changed, the
map function is only run once, to recompute the keys and values for
that single document.

  The view result is stored in a B-tree, just like the structure that is
responsible for holding your documents. View B-trees are stored in their
own file, so that for high-performance CouchDB usage, you can keep
views on their own disk. The B-tree provides very fast lookups of rows
by key, as well as efficient streaming of rows in a key range. In our
example, a single view can answer all questions that involve time:
“Give me all the blog posts from last week” or “last month” or “this
year.” Pretty neat.

  When we query our view, we get back a list of all documents sorted by
date.  Each row also includes the post title so we can construct links
to posts.  Table 1 is just a graphical representation of the view
result.  The actual result is JSON-encoded and contains a little more
metadata:

    {
      "total_rows": 3,
      "offset": 0,
      "rows": [
        {
          "key": "2009/01/15 15:52:20",
          "id": "hello-world",
          "value": "Hello World"
        },

        {
          "key": "2009/01/30 18:04:11",
          "id": "biking",
          "value": "Biking"
        },

        {
          "key": "2009/02/17 21:13:39",
          "id": "bought-a-cat",
          "value": "Bought a Cat"
        }

      ]
    }

Now, the actual result is not as nicely formatted and doesn’t include
any superfluous whitespace or newlines, but this is better for you (and
us!)  to read and understand. Where does that "id" member in the result
rows come from? That wasn’t there before. That’s because we omitted it
earlier to avoid confusion. CouchDB automatically includes the document
ID of the document that created the entry in the view result. We’ll use
this as well when constructing links to the blog post pages.


File: CouchDB.info,  Node: Efficient Lookups,  Next: The View to Get Comments for Posts,  Prev: What Is a View?,  Up: Introduction Into The Views

6.2.1.2 Efficient Lookups
.........................

Let’s move on to the second use case for views: “building efficient
indexes to find documents by any value or structure that resides in
them.” We already explained the efficient indexing, but we skipped a
few details. This is a good time to finish this discussion as we are
looking at map functions that are a little more complex.

  First, back to the B-trees! We explained that the B-tree that backs
the key-sorted view result is built only once, when you first query a
view, and all subsequent queries will just read the B-tree instead of
executing the map function for all documents again. What happens,
though, when you change a document, add a new one, or delete one? Easy:
CouchDB is smart enough to find the rows in the view result that were
created by a specific document.  It marks them invalid so that they no
longer show up in view results.  If the document was deleted, we’re
good — the resulting B-tree reflects the state of the database. If a
document got updated, the new document is run through the map function
and the resulting new lines are inserted into the B-tree at the correct
spots. New documents are handled in the same way.  The B-tree is a very
efficient data structure for our needs, and the crash-only design of
CouchDB databases is carried over to the view indexes as well.

  To add one more point to the efficiency discussion: usually multiple
documents are updated between view queries. The mechanism explained in
the previous paragraph gets applied to all changes in the database
since the last time the view was queried in a batch operation, which
makes things even faster and is generally a better use of your
resources.

* Menu:

* Find One::
* Find Many::
* Reversed Results::


File: CouchDB.info,  Node: Find One,  Next: Find Many,  Up: Efficient Lookups

6.2.1.3 Find One
................

On to more complex map functions. We said “find documents by any value
or structure that resides in them.” We already explained how to extract
a value by which to sort a list of views (our date field). The same
mechanism is used for fast lookups. The URI to query to get a view’s
result is `/database/_design/designdocname/_view/viewname'. This gives
you a list of all rows in the view. We have only three documents, so
things are small, but with thousands of documents, this can get long.
You can add view parameters to the URI to constrain the result set. Say
we know the date of a blog post.  To find a single document, we would
use `/blog/_design/docs/_view/by_date?key="2009/01/30 18:04:11"' to get
the “Biking” blog post. Remember that you can place whatever you like
in the key parameter to the emit() function. Whatever you put in there,
we can now use to look up exactly — and fast.

  Note that in the case where multiple rows have the same key (perhaps
we design a view where the key is the name of the post’s author), key
queries can return more than one row.


File: CouchDB.info,  Node: Find Many,  Next: Reversed Results,  Prev: Find One,  Up: Efficient Lookups

6.2.1.4 Find Many
.................

We talked about “getting all posts for last month.” If it’s February
now, this is as easy as
`/blog/_design/docs/_view/by_date?startkey="2010/01/01
00:00:00"&endkey="2010/02/00 00:00:00"'.  The `startkey' and `endkey'
parameters specify an inclusive range on which we can search.

  To make things a little nicer and to prepare for a future example, we
are going to change the format of our date field. Instead of a string,
we are going to use an array, where individual members are part of a
timestamp in decreasing significance. This sounds fancy, but it is
rather easy. Instead of:

    {
      "date": "2009/01/31 00:00:00"
    }

we use:

    {
      "date": [2009, 1, 31, 0, 0, 0]
    }

Our map function does not have to change for this, but our view result
looks a little different:

  Table 2. New view results:

Key                             Value
------------------------------------------------------- 
[2009, 1, 15, 15, 52, 20]       "Hello World"
[2009, 2, 17, 21, 13, 39]       "Biking"
[2009, 1, 30, 18, 4, 11]        "Bought a Cat"

  And our queries change to
`/blog/_design/docs/_view/by_date?startkey=[2010, 1, 1, 0, 0,
0]&endkey=[2010, 2, 1, 0, 0, 0]'.  For all you care, this is just a
change in syntax, not meaning. But it shows you the power of views. Not
only can you construct an index with scalar values like strings and
integers, you can also use JSON structures as keys for your views. Say
we tag our documents with a list of tags and want to see all tags, but
we don’t care for documents that have not been tagged.

    {
      ...
      tags: ["cool", "freak", "plankton"],
      ...
    }


    {
      ...
      tags: [],
      ...
    }


    function(doc) {
      if(doc.tags.length > 0) {
        for(var idx in doc.tags) {
          emit(doc.tags[idx], null);
        }
      }
    }

This shows a few new things. You can have conditions on structure
(`if(doc.tags.length > 0)') instead of just values. This is also an
example of how a map function calls *note emit(): 292. multiple times
per document.  And finally, you can pass null instead of a value to the
value parameter.  The same is true for the key parameter. We’ll see in
a bit how that is useful.


File: CouchDB.info,  Node: Reversed Results,  Prev: Find Many,  Up: Efficient Lookups

6.2.1.5 Reversed Results
........................

To retrieve view results in reverse order, use the `descending=true'
query parameter. If you are using a `startkey' parameter, you will find
that CouchDB returns different rows or no rows at all. What’s up with
that?

  It’s pretty easy to understand when you see how view query options
work under the hood. A view is stored in a tree structure for fast
lookups. Whenever you query a view, this is how CouchDB operates:

  1. Starts reading at the top, or at the position that `startkey'
     specifies, if present.

  2. Returns one row at a time until the end or until it hits `endkey',
     if present.

  If you specify `descending=true', the reading direction is reversed,
not the sort  order of the rows in the view. In addition, the same
two-step procedure is followed.

  Say you have a view result that looks like this:

Key       Value
---------------------- 
0         "foo"
1         "bar"
2         "baz"

  Here are potential query options: `?startkey=1&descending=true'. What
will CouchDB do? See #1 above: it jumps to `startkey', which is the row
with the key `1', and starts reading backward until it hits the end of
the view.  So the particular result would be:

Key       Value
---------------------- 
1         "bar"
0         "foo"

  This is very likely not what you want. To get the rows with the
indexes `1' and `2' in reverse order, you need to switch the `startkey'
to `endkey': `endkey=1&descending=true':

Key       Value
---------------------- 
2         "baz"
1         "bar"

  Now that looks a lot better. CouchDB started reading at the bottom of
the view and went backward until it hit `endkey'.


File: CouchDB.info,  Node: The View to Get Comments for Posts,  Next: Reduce/Rereduce,  Prev: Efficient Lookups,  Up: Introduction Into The Views

6.2.1.6 The View to Get Comments for Posts
..........................................

We use an array key here to support the `group_level' reduce query
parameter.  CouchDB’s views are stored in the B-tree file structure.
Because of the way B-trees are structured, we can cache the
intermediate reduce results in the non-leaf nodes of the tree, so
reduce queries can be computed along arbitrary key ranges in
logarithmic time. See Figure 1, “Comments map function”.

  In the blog app, we use `group_leve``l reduce queries to compute the
count of comments both on a per-post and total basis, achieved by
querying the same view index with different methods. With some array
keys, and assuming each key has the value ``1':

    ["a","b","c"]
    ["a","b","e"]
    ["a","c","m"]
    ["b","a","c"]
    ["b","a","g"]

the reduce view:

    function(keys, values, rereduce) {
      return sum(values)
    }

returns the total number of rows between the start and end key.  So
with `startkey=["a","b"]&endkey=["b"]' (which includes the first three
of the above keys) the result would equal `3'. The effect is to count
rows.  If you’d like to count rows without depending on the row value,
you can switch on the `rereduce' parameter:

    function(keys, values, rereduce) {
      if (rereduce) {
        return sum(values);
      } else {
        return values.length;
      }
    }


     Note: JavaScript function about could be effectively replaced by
     builtin `_count' one.

 [image src="views-intro-01.png" alt="Comments map function" ]

Figure: Figure 1. Comments map function

  This is the reduce view used by the example app to count comments,
while utilizing the map to output the comments, which are more useful
than just `1' over and over. It pays to spend some time playing around
with map and reduce functions. Futon is OK for this, but it doesn’t
give full access to all the query parameters. Writing your own test
code for views in your language of choice is a great way to explore the
nuances and capabilities of CouchDB’s incremental MapReduce system.

  Anyway, with a `group_level' query, you’re basically running a series
of reduce range queries: one for each group that shows up at the level
you query.  Let’s reprint the key list from earlier, grouped at level
`1':

    ["a"]   3
    ["b"]   2

And at `group_level=2':

    ["a","b"]   2
    ["a","c"]   1
    ["b","a"]   2

Using the parameter `group=true' makes it behave as though it were
`group_level=exact', so in the case of our current example, it would
give the number `1' for each key, as there are no exactly duplicated
keys.


File: CouchDB.info,  Node: Reduce/Rereduce,  Next: Lessons Learned,  Prev: The View to Get Comments for Posts,  Up: Introduction Into The Views

6.2.1.7 Reduce/Rereduce
.......................

We briefly talked about the `rereduce' parameter to your reduce
function.  We’ll explain what’s up with it in this section. By now, you
should have learned that your view result is stored in B-tree index
structure for efficiency.  The existence and use of the `rereduce'
parameter is tightly coupled to how the B-tree index works.

  Consider the map result are:

    "afrikan", 1
    "afrikan", 1
    "chinese", 1
    "chinese", 1
    "chinese", 1
    "chinese", 1
    "french", 1
    "italian", 1
    "italian", 1
    "spanish", 1
    "vietnamese", 1
    "vietnamese", 1

Example 1. Example view result (mmm, food)

  When we want to find out how many dishes there are per origin, we can
reuse the simple reduce function shown earlier:

    function(keys, values, rereduce) {
      return sum(values);
    }

Figure 2, “The B-tree index” shows a simplified version of what the
B-tree index looks like. We abbreviated the key strings.

 [image src="views-intro-02.png" alt="The B-tree index" ]

Figure: Figure 2. The B-tree index

  The view result is what computer science grads call a “pre-order”
walk through the tree. We look at each element in each node starting
from the left. Whenever we see that there is a subnode to descend into,
we descend and start reading the elements in that subnode. When we have
walked through the entire tree, we’re done.

  You can see that CouchDB stores both keys and values inside each leaf
node.  In our case, it is simply always `1', but you might have a value
where you count other results and then all rows have a different value.
What’s important is that CouchDB runs all elements that are within a
node into the reduce function (setting the `rereduce' parameter to
false) and stores the result inside the parent node along with the edge
to the subnode. In our case, each edge has a 3 representing the reduce
value for the node it points to.

     Note: In reality, nodes have more than 1,600 elements in them.
     CouchDB computes the result for all the elements in multiple
     iterations over the elements in a single node, not all at once
     (which would be disastrous for memory consumption).

  Now let’s see what happens when we run a query. We want to know how
many "chinese" entries we have. The query option is simple:
`?key="chinese"'.  See Figure 3, “The B-tree index reduce result”.

 [image src="views-intro-03.png" alt="The B-tree index reduce result" ]

Figure: Figure 3. The B-tree index reduce result

  CouchDB detects that all values in the subnode include the "chinese"
key.  It concludes that it can take just the 3 values associated with
that node to compute the final result. It then finds the node left to
it and sees that it’s a node with keys outside the requested range
(`key=' requests a range where the beginning and the end are the same
value). It concludes that it has to use the "chinese" element’s value
and the other node’s value and run them through the reduce function
with the `rereduce' parameter set to true.

  The reduce function effectively calculates 3 + 1 on query time and
returns the desired result. The next example shows some pseudocode that
shows the last invocation of the reduce function with actual values:

    function(null, [3, 1], true) {
      return sum([3, 1]);
    }

Now, we said your reduce function must actually reduce your values. If
you see the B-tree, it should become obvious what happens when you
don’t reduce your values. Consider the following map result and reduce
function. This time we want to get a list of all the unique labels in
our view:

    "abc", "afrikan"
    "cef", "afrikan"
    "fhi", "chinese"
    "hkl", "chinese"
    "ino", "chinese"
    "lqr", "chinese"
    "mtu", "french"
    "owx", "italian"
    "qza", "italian"
    "tdx", "spanish"
    "xfg", "vietnamese"
    "zul", "vietnamese"

We don’t care for the key here and only list all the labels we have.
Our reduce function removes duplicates:

    function(keys, values, rereduce) {
      var unique_labels = {};
      values.forEach(function(label) {
        if(!unique_labels[label]) {
          unique_labels[label] = true;
        }
      });

      return unique_labels;
    }

This translates to Figure 4, “An overflowing reduce index”.

  We hope you get the picture. The way the B-tree storage works means
that if you don’t actually reduce your data in the reduce function, you
end up having CouchDB copy huge amounts of data around that grow
linearly, if not faster with the number of rows in your view.

  CouchDB will be able to compute the final result, but only for views
with a few rows. Anything larger will experience a ridiculously slow
view build time.  To help with that, CouchDB since version 0.10.0 will
throw an error if your reduce function does not reduce its input values.

 [image src="views-intro-04.png" alt="An overflowing reduce index" ]

Figure: Figure 4. An overflowing reduce index


File: CouchDB.info,  Node: Lessons Learned,  Next: Wrapping Up<5>,  Prev: Reduce/Rereduce,  Up: Introduction Into The Views

6.2.1.8 Lessons Learned
.......................

   - If you don’t use the key field in the map function, you are
     probably doing it wrong.

   - If you are trying to make a list of values unique in the reduce
     functions, you are probably doing it wrong.

   - If you don’t reduce your values to a single scalar value or a small
     fixed-sized object or array with a fixed number of scalar values
     of small sizes, you are probably doing it wrong.


File: CouchDB.info,  Node: Wrapping Up<5>,  Prev: Lessons Learned,  Up: Introduction Into The Views

6.2.1.9 Wrapping Up
...................

Map functions are side effect–free functions that take a document as
argument and `emit' key/value pairs. CouchDB stores the emitted rows by
constructing a sorted B-tree index, so row lookups by key, as well as
streaming operations across a range of rows, can be accomplished in a
small memory and processing footprint, while writes avoid seeks.
Generating a view takes `O(N)', where `N' is the total number of rows
in the view. However, querying a view is very quick, as the B-tree
remains shallow even when it contains many, many keys.

  Reduce functions operate on the sorted rows emitted by map view
functions.  CouchDB’s reduce functionality takes advantage of one of
the fundamental properties of B-tree indexes: for every leaf node (a
sorted row), there is a chain of internal nodes reaching back to the
root. Each leaf node in the B-tree carries a few rows (on the order of
tens, depending on row size), and each internal node may link to a few
leaf nodes or other internal nodes.

  The reduce function is run on every node in the tree in order to
calculate the final reduce value. The end result is a reduce function
that can be incrementally updated upon changes to the map function,
while recalculating the reduction values for a minimum number of nodes.
The initial reduction is calculated once per each node (inner and leaf)
in the tree.

  When run on leaf nodes (which contain actual map rows), the reduce
function’s third parameter, `rereduce', is false. The arguments in this
case are the keys and values as output by the map function. The
function has a single returned reduction value, which is stored on the
inner node that a working set of leaf nodes have in common, and is used
as a cache in future reduce calculations.

  When the reduce function is run on inner nodes, the `rereduce' flag is
`true'. This allows the function to account for the fact that it will be
receiving its own prior output. When `rereduce' is true, the values
passed to the function are intermediate reduction values as cached from
previous calculations. When the tree is more than two levels deep, the
`rereduce' phase is repeated, consuming chunks of the previous level’s
output until the final reduce value is calculated at the root node.

  A common mistake new CouchDB users make is attempting to construct
complex aggregate values with a reduce function. Full reductions should
result in a scalar value, like 5, and not, for instance, a JSON hash
with a set of unique keys and the count of each. The problem with this
approach is that you’ll end up with a very large final value. The
number of unique keys can be nearly as large as the number of total
keys, even for a large set. It is fine to combine a few scalar
calculations into one reduce function; for instance, to find the total,
average, and standard deviation of a set of numbers in a single
function.

  If you’re interested in pushing the edge of CouchDB’s incremental
reduce functionality, have a look at Google’s paper on Sawzall(1),
which gives examples of some of the more exotic reductions that can be
accomplished in a system with similar constraints.

  ---------- Footnotes ----------

  (1) http://research.google.com/archive/sawzall.html


File: CouchDB.info,  Node: Views Collation,  Next: Joins With Views,  Prev: Introduction Into The Views,  Up: Guide to Views

6.2.2 Views Collation
---------------------

* Menu:

* Basics: Basics<2>.
* Examples::
* Sorting by Dates::
* String Ranges::
* Collation Specification::
* _all_docs::
* Raw collation::


File: CouchDB.info,  Node: Basics<2>,  Next: Examples,  Up: Views Collation

6.2.2.1 Basics
..............

View functions specify a key and a value to be returned for each row.
CouchDB collates the view rows by this key. In the following example,
the `LastName' property serves as the key, thus the result will be
sorted by `LastName':

    function(doc) {
      if (doc.Type == "customer") {
        emit(doc.LastName, {FirstName: doc.FirstName, Address: doc.Address});
      }
    }

CouchDB allows arbitrary JSON structures to be used as keys. You can
use JSON arrays as keys for fine-grained control over sorting and
grouping.


File: CouchDB.info,  Node: Examples,  Next: Sorting by Dates,  Prev: Basics<2>,  Up: Views Collation

6.2.2.2 Examples
................

The following clever trick would return both customer and order
documents.  The key is composed of a customer `_id' and a sorting
token. Because the key for order documents begins with the `_id' of a
customer document, all the orders will be sorted by customer. Because
the sorting token for customers is lower than the token for orders, the
customer document will come before the associated orders. The values 0
and 1 for the sorting token are arbitrary.

    function(doc) {
      if (doc.Type == "customer") {
        emit([doc._id, 0], null);
      } else if (doc.Type == "order") {
        emit([doc.customer_id, 1], null);
      }
    }

To list a specific customer with `_id' XYZ, and all of that customer's
orders, limit the startkey and endkey ranges to cover only documents
for that customer's `_id':

    startkey=["XYZ"]&endkey=["XYZ", {}]

It is not recommended to emit the document itself in the view. Instead,
to include the bodies of the documents when requesting the view,
request the view with `?include_docs=true'.


File: CouchDB.info,  Node: Sorting by Dates,  Next: String Ranges,  Prev: Examples,  Up: Views Collation

6.2.2.3 Sorting by Dates
........................

It maybe be convenient to store date attributes in a human readable
format (i.e. as a `string'), but still sort by date. This can be done
by converting the date to a `number' in the *note emit(): 292.
function. For example, given a document with a created_at attribute of
`'Wed Jul 23 16:29:21 +0100 2013'', the following emit function would
sort by date:

    emit(Date.parse(doc.created_at).getTime(), null);

Alternatively, if you use a date format which sorts lexicographically,
such as `"2013/06/09 13:52:11 +0000"' you can just

    emit(doc.created_at, null);

and avoid the conversion. As a bonus, this date format is compatible
with the JavaScript date parser, so you can use `new
Date(doc.created_at)' in your client side JavaScript to make date
sorting easy in the browser.


File: CouchDB.info,  Node: String Ranges,  Next: Collation Specification,  Prev: Sorting by Dates,  Up: Views Collation

6.2.2.4 String Ranges
.....................

If you need start and end keys that encompass every string with a given
prefix, it is better to use a high value unicode character, than to use
a `'ZZZZ'' suffix.

  That is, rather than:

    startkey="abc"&endkey="abcZZZZZZZZZ"

You should use:

    startkey="abc"&endkey="abc\ufff0"



File: CouchDB.info,  Node: Collation Specification,  Next: _all_docs,  Prev: String Ranges,  Up: Views Collation

6.2.2.5 Collation Specification
...............................

This section is based on the view_collation function in
view_collation.js(1):

    // special values sort before all other types
    null
    false
    true

    // then numbers
    1
    2
    3.0
    4

    // then text, case sensitive
    "a"
    "A"
    "aa"
    "b"
    "B"
    "ba"
    "bb"

    // then arrays. compared element by element until different.
    // Longer arrays sort after their prefixes
    ["a"]
    ["b"]
    ["b","c"]
    ["b","c", "a"]
    ["b","d"]
    ["b","d", "e"]

    // then object, compares each key value in the list until different.
    // larger objects sort after their subset objects.
    {a:1}
    {a:2}
    {b:1}
    {b:2}
    {b:2, a:1} // Member order does matter for collation.
               // CouchDB preserves member order
               // but doesn't require that clients will.
               // this test might fail if used with a js engine
               // that doesn't preserve order
    {b:2, c:2}

Comparison of strings is done using ICU(2) which implements the Unicode
Collation Algorithm(3), giving a dictionary sorting of keys.  This can
give surprising results if you were expecting ASCII ordering.  Note
that:

   - All symbols sort before numbers and letters (even the "high"
     symbols like tilde, `0x7e')

   - Differing sequences of letters are compared without regard to
     case, so `a < aa' but also `A < aa' and `a < AA'

   - Identical sequences of letters are compared with regard to case,
     with lowercase before uppercase, so `a < A'

  You can demonstrate the collation sequence for 7-bit ASCII characters
like this:

    require 'rubygems'
    require 'restclient'
    require 'json'

    DB="http://127.0.0.1:5984/collator"

    RestClient.delete DB rescue nil
    RestClient.put "#{DB}",""

    (32..126).each do |c|
      RestClient.put "#{DB}/#{c.to_s(16)}", {"x"=>c.chr}.to_json
    end

    RestClient.put "#{DB}/_design/test", <<EOS
    {
      "views":{
        "one":{
          "map":"function (doc) { emit(doc.x,null); }"
        }
      }
    }
    EOS

    puts RestClient.get("#{DB}/_design/test/_view/one")

This shows the collation sequence to be:

    ` ^ _ - , ; : ! ? . ' " ( ) [ ] { } @ * / \ & # % + < = > | ~ $ 0 1 2 3 4 5 6 7 8 9
    a A b B c C d D e E f F g G h H i I j J k K l L m M n N o O p P q Q r R s S t T u U v V w W x X y Y z Z


* Menu:

* Key ranges::
* Complex keys::

  ---------- Footnotes ----------

  (1)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=blob;f=share/www/script/test/view_collation.js;hb=HEAD

  (2) http://site.icu-project.org/

  (3) http://www.unicode.org/unicode/reports/tr10/


File: CouchDB.info,  Node: Key ranges,  Next: Complex keys,  Up: Collation Specification

6.2.2.6 Key ranges
..................

Take special care when querying key ranges. For example: the query:

    startkey="Abc"&endkey="AbcZZZZ"

will match "ABC" and "abc1", but not "abc". This is because UCA sorts
as:

    abc < Abc < ABC < abc1 < AbcZZZZZ

For most applications, to avoid problems you should lowercase the
`startkey':

    startkey="abc"&endkey="abcZZZZZZZZ"

will match all keys starting with `[aA][bB][cC]'


File: CouchDB.info,  Node: Complex keys,  Prev: Key ranges,  Up: Collation Specification

6.2.2.7 Complex keys
....................

The query `startkey=["foo"]&endkey=["foo",{}]' will match most array
keys with "foo" in the first element, such as `["foo","bar"]' and
`["foo",["bar","baz"]]'. However it will not match
`["foo",{"an":"object"}]'


File: CouchDB.info,  Node: _all_docs,  Next: Raw collation,  Prev: Collation Specification,  Up: Views Collation

6.2.2.8 _all_docs
.................

The *note _all_docs: 27f.  view is a special case because it uses ASCII
collation for doc ids, not UCA:

    startkey="_design/"&endkey="_design/ZZZZZZZZ"

will not find `_design/abc' because `'Z'' comes before `'a'' in the
ASCII sequence. A better solution is:

    startkey="_design/"&endkey="_design0"



File: CouchDB.info,  Node: Raw collation,  Prev: _all_docs,  Up: Views Collation

6.2.2.9 Raw collation
.....................

To squeeze a little more performance out of views, you can specify
`"options":{"collation":"raw"}'  within the view definition for native
Erlang collation, especially if you don't require UCA. This gives a
different collation sequence:

    1
    false
    null
    true
    {"a":"a"},
    ["a"]
    "a"

Beware that `{}' is no longer a suitable "high" key sentinel value. Use
a string like `"\ufff0"' instead.


File: CouchDB.info,  Node: Joins With Views,  Next: View Cookbook for SQL Jockeys,  Prev: Views Collation,  Up: Guide to Views

6.2.3 Joins With Views
----------------------

* Menu:

* Linked Documents::
* Using View Collation::


File: CouchDB.info,  Node: Linked Documents,  Next: Using View Collation,  Up: Joins With Views

6.2.3.1 Linked Documents
........................

If your *note map function: 291. emits an object value which has
`{'_id': XXX}' and you *note query view: 2c4. with `include_docs=true'
parameter, then CouchDB will fetch the document with id `XXX' rather
than the document which was processed to emit the key/value pair.

  This means that if one document contains the ids of other documents,
it can cause those documents to be fetched in the view too, adjacent to
the same key if required.

  For example, if you have the following hierarchically-linked
documents:

    [
      { "_id": "11111" },
      { "_id": "22222", "ancestors": ["11111"], "value": "hello" },
      { "_id": "33333", "ancestors": ["22222","11111"], "value": "world" }
    ]

You can emit the values with the ancestor documents adjacent to them in
the view like this:

    function(doc) {
      if (doc.value) {
        emit([doc.value, 0], null);
        if (doc.ancestors) {
          for (var i in doc.ancestors) {
            emit([doc.value, Number(i)+1], {_id: doc.ancestors[i]});
          }
        }
      }
    }

The result you get is:

    {
        "total_rows": 5,
        "offset": 0,
        "rows": [
            {
                "id": "22222",
                "key": [
                    "hello",
                    0
                ],
                "value": null,
                "doc": {
                    "_id": "22222",
                    "_rev": "1-0eee81fecb5aa4f51e285c621271ff02",
                    "ancestors": [
                        "11111"
                    ],
                    "value": "hello"
                }
            },
            {
                "id": "22222",
                "key": [
                    "hello",
                    1
                ],
                "value": {
                    "_id": "11111"
                },
                "doc": {
                    "_id": "11111",
                    "_rev": "1-967a00dff5e02add41819138abb3284d"
                }
            },
            {
                "id": "33333",
                "key": [
                    "world",
                    0
                ],
                "value": null,
                "doc": {
                    "_id": "33333",
                    "_rev": "1-11e42b44fdb3d3784602eca7c0332a43",
                    "ancestors": [
                        "22222",
                        "11111"
                    ],
                    "value": "world"
                }
            },
            {
                "id": "33333",
                "key": [
                    "world",
                    1
                ],
                "value": {
                    "_id": "22222"
                },
                "doc": {
                    "_id": "22222",
                    "_rev": "1-0eee81fecb5aa4f51e285c621271ff02",
                    "ancestors": [
                        "11111"
                    ],
                    "value": "hello"
                }
            },
            {
                "id": "33333",
                "key": [
                    "world",
                    2
                ],
                "value": {
                    "_id": "11111"
                },
                "doc": {
                    "_id": "11111",
                    "_rev": "1-967a00dff5e02add41819138abb3284d"
                }
            }
        ]
    }

which makes it very cheap to fetch a document plus all its ancestors in
one query.

  Note that the `"id"' in the row is still that of the originating
document.  The only difference is that `include_docs' fetches a
different doc.

  The current revision of the document is resolved at query time, not
at the time the view is generated. This means that if a new revision of
the linked document is added later, it will appear in view queries even
though the view itself hasn't changed. To force a specific revision of
a linked document to be used, emit a `"_rev"' property as well as
`"_id"'.


File: CouchDB.info,  Node: Using View Collation,  Prev: Linked Documents,  Up: Joins With Views

6.2.3.2 Using View Collation
............................

     Author: Christopher Lenz

     Date: 2007-10-05

     Source: <http://www.cmlenz.net/archives/2007/10/couchdb-joins>

  Just today, there was a discussion on IRC how you'd go about modeling
a simple blogging system with “post” and “comment” entities, where any
blog post might have N comments. If you'd be using an SQL database,
you'd obviously have two tables with foreign keys and you'd be using
joins. (At least until you needed to add some denormalization(1)).

  But what would the “obvious” approach in CouchDB look like?

* Menu:

* Approach #1; Comments Inlined: Approach #1 Comments Inlined.
* Approach #2; Comments Separate: Approach #2 Comments Separate.
* Optimization; Using the Power of View Collation: Optimization Using the Power of View Collation.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Denormalization


File: CouchDB.info,  Node: Approach #1 Comments Inlined,  Next: Approach #2 Comments Separate,  Up: Using View Collation

6.2.3.3 Approach #1: Comments Inlined
.....................................

A simple approach would be to have one document per blog post, and
store the comments inside that document:

    {
      "_id": "myslug",
      "_rev": "123456",
      "author": "john",
      "title": "My blog post",
      "content": "Bla bla bla …",
      "comments": [
        {"author": "jack", "content": "…"},
        {"author": "jane", "content": "…"}
      ]
    }


     Note: Of course the model of an actual blogging system would be
     more extensive, you'd have tags, timestamps, etc etc. This is just
     to demonstrate the basics.

  The obvious advantage of this approach is that the data that belongs
together is stored in one place. Delete the post, and you automatically
delete the corresponding comments, and so on.

  You may be thinking that putting the comments inside the blog post
document would not allow us to query for the comments themselves, but
you'd be wrong.  You could trivially write a CouchDB view that would
return all comments across all blog posts, keyed by author:

    function(doc) {
      for (var i in doc.comments) {
        emit(doc.comments[i].author, doc.comments[i].content);
      }
    }

Now you could list all comments by a particular user by invoking the
view and passing it a `?key="username"' query string parameter.

  However, this approach has a drawback that can be quite significant
for many applications: To add a comment to a post, you need to:

   - Fetch the blog post document

   - Add the new comment to the JSON structure

   - Send the updated document to the server

  Now if you have multiple client processes adding comments at roughly
the same time, some of them will get a `HTTP 409 Conflict' error on
step 3 (that's optimistic concurrency in action). For some applications
this makes sense, but in many other apps, you'd want to append new
related data regardless of whether other data has been added in the
meantime.

  The only way to allow non-conflicting addition of related data is by
putting that related data into separate documents.


File: CouchDB.info,  Node: Approach #2 Comments Separate,  Next: Optimization Using the Power of View Collation,  Prev: Approach #1 Comments Inlined,  Up: Using View Collation

6.2.3.4 Approach #2: Comments Separate
......................................

Using this approach you'd have one document per blog post, and one
document per comment. The comment documents would have a “backlink” to
the post they belong to.

  The blog post document would look similar to the above, minus the
comments property. Also, we'd now have a type property on all our
documents so that we can tell the difference between posts and comments:

    {
      "_id": "myslug",
      "_rev": "123456",
      "type": "post",
      "author": "john",
      "title": "My blog post",
      "content": "Bla bla bla …"
    }

The comments themselves are stored in separate documents, which also
have a type property (this time with the value “comment”), and in
addition feature a post property containing the ID of the post document
they belong to:

    {
      "_id": "ABCDEF",
      "_rev": "123456",
      "type": "comment",
      "post": "myslug",
      "author": "jack",
      "content": "…"
    }


    {
      "_id": "DEFABC",
      "_rev": "123456",
      "type": "comment",
      "post": "myslug",
      "author": "jane",
      "content": "…"
    }

To list all comments per blog post, you'd add a simple view, keyed by
blog post ID:

    function(doc) {
      if (doc.type == "comment") {
        emit(doc.post, {author: doc.author, content: doc.content});
      }
    }

And you'd invoke that view passing it a `?key="post_id"' query string
parameter.

  Viewing all comments by author is just as easy as before:

    function(doc) {
      if (doc.type == "comment") {
        emit(doc.author, {post: doc.post, content: doc.content});
      }
    }

So this is better in some ways, but it also has a disadvantage.
Imagine you want to display a blog post with all the associated
comments on the same web page. With our first approach, we needed just
a single request to the CouchDB server, namely a `GET' request to the
document. With this second approach, we need two requests: a `GET'
request to the post document, and a `GET' request to the view that
returns all comments for the post.

  That is okay, but not quite satisfactory. Just imagine you wanted to
added threaded comments: you'd now need an additional fetch per
comment. What we'd probably want then would be a way to join the blog
post and the various comments together to be able to retrieve them with
a single HTTP request.

  This was when Damien Katz, the author of CouchDB, chimed in to the
discussion on IRC to show us the way.


File: CouchDB.info,  Node: Optimization Using the Power of View Collation,  Prev: Approach #2 Comments Separate,  Up: Using View Collation

6.2.3.5 Optimization: Using the Power of View Collation
.......................................................

Obvious to Damien, but not at all obvious to the rest of us: it's
fairly simple to make a view that includes both the content of the blog
post document, and the content of all the comments associated with that
post. The way you do that is by using `complex keys'. Until now we've
been using simple string values for the view keys, but in fact they can
be arbitrary JSON values, so let's make some use of that:

    function(doc) {
      if (doc.type == "post") {
        emit([doc._id, 0], doc);
      } else if (doc.type == "comment") {
        emit([doc.post, 1], doc);
      }
    }

Okay, this may be confusing at first. Let's take a step back and look
at what views in CouchDB are really about.

  CouchDB views are basically highly efficient on-disk dictionaries
that map keys to values, where the key is automatically indexed and can
be used to filter and/or sort the results you get back from your views.
When you “invoke” a view, you can say that you're only interested in a
subset of the view rows by specifying a `?key=foo' query string
parameter. Or you can specify `?startkey=foo' and/or `?endkey=bar'
query string parameters to fetch rows over a range of keys.

  It's also important to note that keys are always used for collating
(i.e.  sorting) the rows. CouchDB has well defined (but as of yet
undocumented) rules for comparing arbitrary JSON objects for collation.
For example, the JSON value `["foo", 2]' is sorted after (considered
“greater than”) the values `["foo"]' or `["foo", 1, "bar"]', but before
e.g. `["foo", 2, "bar"]'.  This feature enables a whole class of tricks
that are rather non-obvious...

See also
........

*note Views Collation: 2b6.

  With that in mind, let's return to the view function above. First
note that, unlike the previous view functions we've used here, this
view handles both "post" and "comment" documents, and both of them end
up as rows in the same view. Also, the key in this view is not just a
simple string, but an array.  The first element in that array is always
the ID of the post, regardless of whether we're processing an actual
post document, or a comment associated with a post. The second element
is 0 for post documents, and 1 for comment documents.

  Let's assume we have two blog posts in our database. Without limiting
the view results via `key', `startkey', or `endkey', we'd get back
something like the following:

    {
      "total_rows": 5, "offset": 0, "rows": [{
          "id": "myslug",
          "key": ["myslug", 0],
          "value": {...}
        }, {
          "id": "ABCDEF",
          "key": ["myslug", 1],
          "value": {...}
        }, {
          "id": "DEFABC",
          "key": ["myslug", 1],
          "value": {...}
        }, {
          "id": "other_slug",
          "key": ["other_slug", 0],
          "value": {...}
        }, {
          "id": "CDEFAB",
          "key": ["other_slug", 1],
          "value": {...}
        },
      ]
    }


     Note: The `...' placeholder here would contain the complete JSON
     encoding of the corresponding document

  Now, to get a specific blog post and all associated comments, we'd
invoke that view with the query string:

    ?startkey=["myslug"]&endkey;=["myslug", 2]

We'd get back the first three rows, those that belong to the `myslug'
post, but not the others. Et voila, we now have the data we need to
display a post with all associated comments, retrieved via a single
`GET' request.

  You may be asking what the 0 and 1 parts of the keys are for. They're
simply to ensure that the post document is always sorted before the the
associated comment documents. So when you get back the results from
this view for a specific post, you'll know that the first row contains
the data for the blog post itself, and the remaining rows contain the
comment data.

  One remaining problem with this model is that comments are not
ordered, but that's simply because we don't have date/time information
associated with them.  If we had, we'd add the timestamp as third
element of the key array, probably as ISO date/time strings. Now we
would continue using the query string
`?startkey=["myslug"]&endkey=["myslug", 2]' to fetch the blog post and
all associated comments, only now they'd be in chronological order.


File: CouchDB.info,  Node: View Cookbook for SQL Jockeys,  Next: Pagination Recipe,  Prev: Joins With Views,  Up: Guide to Views

6.2.4 View Cookbook for SQL Jockeys
-----------------------------------

This is a collection of some common SQL queries and how to get the same
result in CouchDB. The key to remember here is that CouchDB does not
work like an SQL database at all and that best practices from the SQL
world do not translate well or at all to CouchDB. This documents’s
“cookbook” assumes that you are familiar with the CouchDB basics such
as creating and updating databases and documents.

* Menu:

* Using Views::
* Look Up by Key::
* Look Up by Prefix::
* Aggregate Functions::
* Get Unique Values::
* Enforcing Uniqueness::

Using Views

* Defining a View::
* Querying a View::
* MapReduce Functions::
* Map functions: Map functions<2>.


File: CouchDB.info,  Node: Using Views,  Next: Look Up by Key,  Up: View Cookbook for SQL Jockeys

6.2.4.1 Using Views
...................

How you would do this in SQL:

    CREATE TABLE

or:

    ALTER TABLE

How you can do this in CouchDB?

  Using views is a two-step process. First you define a view; then you
query it.  This is analogous to defining a table structure (with
indexes) using `CREATE TABLE' or `ALTER TABLE' and querying it using an
SQL query.

* Menu:

* Defining a View::
* Querying a View::
* MapReduce Functions::
* Map functions: Map functions<2>.


File: CouchDB.info,  Node: Defining a View,  Next: Querying a View,  Up: Using Views

6.2.4.2 Defining a View
.......................

Defining a view is done by creating a special document in a CouchDB
database.  The only real specialness is the `_id' of the document,
which starts with `_design/' — for example, _design/application. Other
than that, it is just a regular CouchDB document. To make sure CouchDB
understands that you are defining a view, you need to prepare the
contents of that design document in a special format. Here is an
example:

    {
      "_id": "_design/application",
      "_rev": "1-C1687D17",
      "views": {
        "viewname": {
          "map": "function(doc) { ... }",
          "reduce": "function(keys, values) { ... }"
        }
      }
    }

We are defining a view `viewname'. The definition of the view consists
of two functions: the map function and the reduce function. Specifying
a reduce function is optional. We’ll look at the nature of the
functions later. Note that `viewname' can be whatever you like:
`users', `by-name', or `by-date' are just some examples.

  A single design document can also include multiple view definitions,
each identified by a unique name:

    {
      "_id": "_design/application",
      "_rev": "1-C1687D17",
      "views": {
        "viewname": {
          "map": "function(doc) { ... }",
          "reduce": "function(keys, values) { ... }"
        },
        "anotherview": {
          "map": "function(doc) { ... }",
          "reduce": "function(keys, values) { ... }"
        }
      }
    }



File: CouchDB.info,  Node: Querying a View,  Next: MapReduce Functions,  Prev: Defining a View,  Up: Using Views

6.2.4.3 Querying a View
.......................

The name of the design document and the name of the view are
significant for querying the view. To query the view `viewname', you
perform an HTTP `GET' request to the following URI:

    /database/_design/application/_view/viewname

database is the name of the database you created your design document
in. Next up is the design document name, and then the view name
prefixed with `_view/'.  To query `anotherview', replace `viewname' in
that URI with `anotherview'.  If you want to query a view in a
different design document, adjust the design document name.


File: CouchDB.info,  Node: MapReduce Functions,  Next: Map functions<2>,  Prev: Querying a View,  Up: Using Views

6.2.4.4 MapReduce Functions
...........................

MapReduce is a concept that solves problems by applying a two-step
process, aptly named the map phase and the reduce phase. The map phase
looks at all documents in CouchDB separately one after the other and
creates a `map result'.  The map result is an ordered list of key/value
pairs. Both key and value can be specified by the user writing the map
function. A map function may call the built-in `emit(key, value)'
function 0 to N times per document, creating a row in the map result
per invocation.

  CouchDB is smart enough to run a map function only once for every
document, even on subsequent queries on a view. Only changes to
documents or new documents need to be processed anew.


File: CouchDB.info,  Node: Map functions<2>,  Prev: MapReduce Functions,  Up: Using Views

6.2.4.5 Map functions
.....................

Map functions run in isolation for every document. They can’t modify the
document, and they can’t talk to the outside world—they can’t have side
effects.  This is required so that CouchDB can guarantee correct
results without having to recalculate a complete result when only one
document gets changed.

  The map result looks like this:

    {"total_rows":3,"offset":0,"rows":[
    {"id":"fc2636bf50556346f1ce46b4bc01fe30","key":"Lena","value":5},
    {"id":"1fb2449f9b9d4e466dbfa47ebe675063","key":"Lisa","value":4},
    {"id":"8ede09f6f6aeb35d948485624b28f149","key":"Sarah","value":6}
    ]}

It is a list of rows sorted by the value of key. The id is added
automatically and refers back to the document that created this row.
The value is the data you’re looking for. For example purposes, it’s
the girl’s age.

  The map function that produces this result is:

    function(doc) {
      if(doc.name && doc.age) {
        emit(doc.name, doc.age);
      }
    }

It includes the if statement as a sanity check to ensure that we’re
operating on the right fields and calls the emit function with the name
and age as the key and value.


File: CouchDB.info,  Node: Look Up by Key,  Next: Look Up by Prefix,  Prev: Using Views,  Up: View Cookbook for SQL Jockeys

6.2.4.6 Look Up by Key
......................

How you would do this in SQL:

    SELECT field FROM table WHERE value="searchterm"

How you can do this in CouchDB?

  Use case: get a result (which can be a record or set of records)
associated with a key ("searchterm").

  To look something up quickly, regardless of the storage mechanism, an
index is needed. An index is a data structure optimized for quick
search and retrieval.  CouchDB’s map result is stored in such an index,
which happens to be a B+ tree.

  To look up a value by "searchterm", we need to put all values into
the key of a view. All we need is a simple map function:

    function(doc) {
      if(doc.value) {
        emit(doc.value, null);
      }
    }

This creates a list of documents that have a value field sorted by the
data in the value field. To find all the records that match
"searchterm", we query the view and specify the search term as a query
parameter:

    /database/_design/application/_view/viewname?key="searchterm"

Consider the documents from the previous section, and say we’re
indexing on the age field of the documents to find all the
five-year-olds:

    function(doc) {
      if(doc.age && doc.name) {
        emit(doc.age, doc.name);
      }
    }

Query:

    /ladies/_design/ladies/_view/age?key=5

Result:

    {"total_rows":3,"offset":1,"rows":[
    {"id":"fc2636bf50556346f1ce46b4bc01fe30","key":5,"value":"Lena"}
    ]}

Easy.

  Note that you have to emit a value. The view result includes the
associated document ID in every row. We can use it to look up more data
from the document itself. We can also use the `?include_docs=true'
parameter to have CouchDB fetch the documents individually for us.


File: CouchDB.info,  Node: Look Up by Prefix,  Next: Aggregate Functions,  Prev: Look Up by Key,  Up: View Cookbook for SQL Jockeys

6.2.4.7 Look Up by Prefix
.........................

How you would do this in SQL:

    SELECT field FROM table WHERE value LIKE "searchterm%"

How you can do this in CouchDB?

  Use case: find all documents that have a field value that starts with
`searchterm'. For example, say you stored a MIME type (like `text/html'
or `image/jpg') for each document and now you want to find all
documents that are images according to the MIME type.

  The solution is very similar to the previous example: all we need is
a map function that is a little more clever than the first one. But
first, an example document:

    {
      "_id": "Hugh Laurie",
      "_rev": "1-9fded7deef52ac373119d05435581edf",
      "mime-type": "image/jpg",
      "description": "some dude"
    }

The clue lies in extracting the prefix that we want to search for from
our document and putting it into our view index. We use a regular
expression to match our prefix:

    function(doc) {
      if(doc["mime-type"]) {
        // from the start (^) match everything that is not a slash ([^\/]+) until
        // we find a slash (\/). Slashes needs to be escaped with a backslash (\/)
        var prefix = doc["mime-type"].match(/^[^\/]+\//);
        if(prefix) {
          emit(prefix, null);
        }
      }
    }

We can now query this view with our desired MIME type prefix and not
only find all images, but also text, video, and all other formats:

    /files/_design/finder/_view/by-mime-type?key="image/"



File: CouchDB.info,  Node: Aggregate Functions,  Next: Get Unique Values,  Prev: Look Up by Prefix,  Up: View Cookbook for SQL Jockeys

6.2.4.8 Aggregate Functions
...........................

How you would do this in SQL:

    SELECT COUNT(field) FROM table

How you can do this in CouchDB?

  Use case: calculate a derived value from your data.

  We haven’t explained reduce functions yet. Reduce functions are
similar to aggregate functions in SQL. They compute a value over
multiple documents.

  To explain the mechanics of reduce functions, we’ll create one that
doesn’t make a whole lot of sense. But this example is easy to
understand. We’ll explore more useful reductions later.

  Reduce functions operate on the output of the map function (also
called the map result or intermediate result). The reduce function’s
job, unsurprisingly, is to reduce the list that the map function
produces.

  Here’s what our summing reduce function looks like:

    function(keys, values) {
      var sum = 0;
      for(var idx in values) {
        sum = sum + values[idx];
      }
      return sum;
    }

Here’s an alternate, more idiomatic JavaScript version:

    function(keys, values) {
      var sum = 0;
      values.forEach(function(element) {
        sum = sum + element;
      });
      return sum;
    }


     Note: Don't miss effective builtin *note reduce functions: 201.
     like `_sum' and `_count'

  This reduce function takes two arguments: a list of keys and a list
of values.  For our summing purposes we can ignore the keys-list and
consider only the value list. We’re looping over the list and add each
item to a running total that we’re returning at the end of the function.

  You’ll see one difference between the map and the reduce function.
The map function uses `emit()' to create its result, whereas the reduce
function returns a value.

  For example, from a list of integer values that specify the age,
calculate the sum of all years of life for the news headline, `“786
life years present at event.”' A little contrived, but very simple and
thus good for demonstration purposes. Consider the documents and the
map view we used earlier in this document.

  The reduce function to calculate the total age of all girls is:

    function(keys, values) {
      return sum(values);
    }

Note that, instead of the two earlier versions, we use CouchDB’s
predefined *note sum(): 2d4. function. It does the same thing as the
other two, but it is such a common piece of code that CouchDB has it
included.

  The result for our reduce view now looks like this:

    {"rows":[
      {"key":null,"value":15}
    ]}

The total sum of all age fields in all our documents is 15. Just what
we wanted.  The key member of the result object is null, as we can’t
know anymore which documents took part in the creation of the reduced
result. We’ll cover more advanced reduce cases later on.

  As a rule of thumb, the reduce function should reduce to a single
scalar value.  That is, an integer; a string; or a small, fixed-size
list or object that includes an aggregated value (or values) from the
values argument.  It should never just return values or similar.
CouchDB will give you a warning if you try to use reduce “the wrong
way”:

    {
      "error":"reduce_overflow_error",
      "message":"Reduce output must shrink more rapidly: Current output: ..."
    }



File: CouchDB.info,  Node: Get Unique Values,  Next: Enforcing Uniqueness,  Prev: Aggregate Functions,  Up: View Cookbook for SQL Jockeys

6.2.4.9 Get Unique Values
.........................

How you would do this in SQL:

    SELECT DISTINCT field FROM table

How you can do this in CouchDB?

  Getting unique values is not as easy as adding a keyword. But a
reduce view and a special query parameter give us the same result.
Let’s say you want a list of tags that your users have tagged
themselves with and no duplicates.

  First, let’s look at the source documents. We punt on `_id' and `_rev'
attributes here:

    {
      "name":"Chris",
      "tags":["mustache", "music", "couchdb"]
    }


    {
      "name":"Noah",
      "tags":["hypertext", "philosophy", "couchdb"]
    }


    {
      "name":"Jan",
      "tags":["drums", "bike", "couchdb"]
    }

Next, we need a list of all tags. A map function will do the trick:

    function(doc) {
      if(doc.name && doc.tags) {
        doc.tags.forEach(function(tag) {
          emit(tag, null);
        });
      }
    }

The result will look like this:

    {"total_rows":9,"offset":0,"rows":[
    {"id":"3525ab874bc4965fa3cda7c549e92d30","key":"bike","value":null},
    {"id":"3525ab874bc4965fa3cda7c549e92d30","key":"couchdb","value":null},
    {"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"couchdb","value":null},
    {"id":"da5ea89448a4506925823f4d985aabbd","key":"couchdb","value":null},
    {"id":"3525ab874bc4965fa3cda7c549e92d30","key":"drums","value":null},
    {"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"hypertext","value":null},
    {"id":"da5ea89448a4506925823f4d985aabbd","key":"music","value":null},
    {"id":"da5ea89448a4506925823f4d985aabbd","key":"mustache","value":null},
    {"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"philosophy","value":null}
    ]}

As promised, these are all the tags, including duplicates. Since each
document gets run through the map function in isolation, it cannot know
if the same key has been emitted already. At this stage, we need to
live with that. To achieve uniqueness, we need a reduce:

    function(keys, values) {
      return true;
    }

This reduce doesn’t do anything, but it allows us to specify a special
query parameter when querying the view:

    /dudes/_design/dude-data/_view/tags?group=true

CouchDB replies:

    {"rows":[
    {"key":"bike","value":true},
    {"key":"couchdb","value":true},
    {"key":"drums","value":true},
    {"key":"hypertext","value":true},
    {"key":"music","value":true},
    {"key":"mustache","value":true},
    {"key":"philosophy","value":true}
    ]}

In this case, we can ignore the value part because it is always true,
but the result includes a list of all our tags and no duplicates!

  With a small change we can put the reduce to good use, too. Let’s see
how many of the non-unique tags are there for each tag. To calculate
the tag frequency, we just use the summing up we already learned about.
In the map function, we emit a 1 instead of null:

    function(doc) {
      if(doc.name && doc.tags) {
        doc.tags.forEach(function(tag) {
          emit(tag, 1);
        });
      }
    }

In the reduce function, we return the sum of all values:

    function(keys, values) {
      return sum(values);
    }

Now, if we query the view with the `?group=true' parameter, we get back
the count for each tag:

    {"rows":[
    {"key":"bike","value":1},
    {"key":"couchdb","value":3},
    {"key":"drums","value":1},
    {"key":"hypertext","value":1},
    {"key":"music","value":1},
    {"key":"mustache","value":1},
    {"key":"philosophy","value":1}
    ]}



File: CouchDB.info,  Node: Enforcing Uniqueness,  Prev: Get Unique Values,  Up: View Cookbook for SQL Jockeys

6.2.4.10 Enforcing Uniqueness
.............................

How you would do this in SQL:

    UNIQUE KEY(column)

How you can do this in CouchDB?

  Use case: your applications require that a certain value exists only
once in a database.

  This is an easy one: within a CouchDB database, each document must
have a unique `_id' field. If you require unique values in a database,
just assign them to a document’s `_id' field and CouchDB will enforce
uniqueness for you.

  There’s one caveat, though: in the distributed case, when you are
running more than one CouchDB node that accepts write requests,
uniqueness can be guaranteed only per node or outside of CouchDB.
CouchDB will allow two identical IDs to be written to two different
nodes. On replication, CouchDB will detect a conflict and flag the
document accordingly.


File: CouchDB.info,  Node: Pagination Recipe,  Prev: View Cookbook for SQL Jockeys,  Up: Guide to Views

6.2.5 Pagination Recipe
-----------------------

This recipe explains how to paginate over view results.  Pagination is
a user interface (UI) pattern that allows the display of a large number
of rows (`the result set') without loading all the rows into the UI at
once. A fixed-size subset, the `page', is displayed along with next and
previous links or buttons that can move the `viewport' over the result
set to an adjacent page.

  We assume you’re familiar with creating and querying documents and
views as well as the multiple view query options.

* Menu:

* Example Data::
* A View::
* Setup::
* Paging::
* Paging (Alternate Method): Paging Alternate Method.
* Jump to Page::


File: CouchDB.info,  Node: Example Data,  Next: A View,  Up: Pagination Recipe

6.2.5.1 Example Data
....................

To have some data to work with, we’ll create a list of bands, one
document per band:

    { "name":"Biffy Clyro" }

    { "name":"Foo Fighters" }

    { "name":"Tool" }

    { "name":"Nirvana" }

    { "name":"Helmet" }

    { "name":"Tenacious D" }

    { "name":"Future of the Left" }

    { "name":"A Perfect Circle" }

    { "name":"Silverchair" }

    { "name":"Queens of the Stone Age" }

    { "name":"Kerub" }



File: CouchDB.info,  Node: A View,  Next: Setup,  Prev: Example Data,  Up: Pagination Recipe

6.2.5.2 A View
..............

We need a simple map function that gives us an alphabetical list of band
names. This should be easy, but we’re adding extra smarts to filter out
“The” and “A” in front of band names to put them into the right
position:

    function(doc) {
      if(doc.name) {
        var name = doc.name.replace(/^(A|The) /, "");
        emit(name, null);
      }
    }

The views result is an alphabetical list of band names. Now say we want
to display band names five at a time and have a link pointing to the
next five names that make up one page, and a link for the previous five,
if we’re not on the first page.

  We learned how to use the `startkey', `limit', and `skip' parameters
in earlier documents. We’ll use these again here. First, let’s have a
look at the full result set:

    {"total_rows":11,"offset":0,"rows":[
      {"id":"a0746072bba60a62b01209f467ca4fe2","key":"Biffy Clyro","value":null},
      {"id":"b47d82284969f10cd1b6ea460ad62d00","key":"Foo Fighters","value":null},
      {"id":"45ccde324611f86ad4932555dea7fce0","key":"Tenacious D","value":null},
      {"id":"d7ab24bb3489a9010c7d1a2087a4a9e4","key":"Future of the Left","value":null},
      {"id":"ad2f85ef87f5a9a65db5b3a75a03cd82","key":"Helmet","value":null},
      {"id":"a2f31cfa68118a6ae9d35444fcb1a3cf","key":"Nirvana","value":null},
      {"id":"67373171d0f626b811bdc34e92e77901","key":"Kerub","value":null},
      {"id":"3e1b84630c384f6aef1a5c50a81e4a34","key":"Perfect Circle","value":null},
      {"id":"84a371a7b8414237fad1b6aaf68cd16a","key":"Queens of the Stone Age","value":null},
      {"id":"dcdaf08242a4be7da1a36e25f4f0b022","key":"Silverchair","value":null},
      {"id":"fd590d4ad53771db47b0406054f02243","key":"Tool","value":null}
    ]}



File: CouchDB.info,  Node: Setup,  Next: Paging,  Prev: A View,  Up: Pagination Recipe

6.2.5.3 Setup
.............

The mechanics of paging are very simple:

   - Display first page

   - If there are more rows to show, show next link

   - Draw subsequent page

   - If this is not the first page, show a previous link

   - If there are more rows to show, show next link

  Or in a pseudo-JavaScript snippet:

    var result = new Result();
    var page = result.getPage();

    page.display();

    if(result.hasPrev()) {
      page.display_link('prev');
    }

    if(result.hasNext()) {
      page.display_link('next');
    }



File: CouchDB.info,  Node: Paging,  Next: Paging Alternate Method,  Prev: Setup,  Up: Pagination Recipe

6.2.5.4 Paging
..............

To get the first five rows from the view result, you use the `?limit=5'
query parameter:

    curl -X GET http://127.0.0.1:5984/artists/_design/artists/_view/by-name?limit=5

The result:

    {"total_rows":11,"offset":0,"rows":[
      {"id":"a0746072bba60a62b01209f467ca4fe2","key":"Biffy Clyro","value":null},
      {"id":"b47d82284969f10cd1b6ea460ad62d00","key":"Foo Fighters","value":null},
      {"id":"45ccde324611f86ad4932555dea7fce0","key":"Tenacious D","value":null},
      {"id":"d7ab24bb3489a9010c7d1a2087a4a9e4","key":"Future of the Left","value":null},
      {"id":"ad2f85ef87f5a9a65db5b3a75a03cd82","key":"Helmet","value":null}
    ]}

By comparing the `total_rows' value to our `limit' value, we can
determine if there are more pages to display. We also know by the
`offset' member that we are on the first page. We can calculate the
value for `skip=' to get the results for the next page:

    var rows_per_page = 5;
    var page = (offset / rows_per_page) + 1; // == 1
    var skip = page * rows_per_page; // == 5 for the first page, 10 for the second ...

So we query CouchDB with:

    curl -X GET 'http://127.0.0.1:5984/artists/_design/artists/_view/by-name?limit=5&skip=5'

Note we have to use `'' (single quotes) to escape the `&' character
that is special to the shell we execute curl in.

  The result:

    {"total_rows":11,"offset":5,"rows":[
      {"id":"a2f31cfa68118a6ae9d35444fcb1a3cf","key":"Nirvana","value":null},
      {"id":"67373171d0f626b811bdc34e92e77901","key":"Kerub","value":null},
      {"id":"3e1b84630c384f6aef1a5c50a81e4a34","key":"Perfect Circle","value":null},
      {"id":"84a371a7b8414237fad1b6aaf68cd16a","key":"Queens of the Stone Age",
      "value":null},
      {"id":"dcdaf08242a4be7da1a36e25f4f0b022","key":"Silverchair","value":null}
    ]}

Implementing the `hasPrev()' and `hasNext()' method is pretty
straightforward:

    function hasPrev()
    {
      return page > 1;
    }

    function hasNext()
    {
      var last_page = Math.floor(total_rows / rows_per_page) +
        (total_rows % rows_per_page);
      return page != last_page;
    }



File: CouchDB.info,  Node: Paging Alternate Method,  Next: Jump to Page,  Prev: Paging,  Up: Pagination Recipe

6.2.5.5 Paging (Alternate Method)
.................................

The method described above performed poorly with large skip values until
CouchDB 1.2. Additionally, some use cases may call for the following
alternate method even with newer versions of CouchDB. One such case is
when duplicate results should be prevented. Using skip alone it is
possible for new documents to be inserted during pagination which could
change the offset of the start of the subsequent page.

  A correct solution is not much harder. Instead of slicing the result
set into equally sized pages, we look at 10 rows at a time and use
`startkey' to jump to the next 10 rows. We even use skip, but only with
the value 1.

  Here is how it works:

   - Request `rows_per_page + 1' rows from the view

   - Display `rows_per_page' rows, `store + 1' row as `next_startkey'
     and `next_startkey_docid'

   - As page information, keep `startkey' and `next_startkey'

   - Use the `next_*' values to create the next link, and use the
     others to create the previous link

  The trick to finding the next page is pretty simple. Instead of
requesting 10 rows for a page, you request 11 rows, but display only 10
and use the values in the 11th row as the `startkey' for the next page.
Populating the link to the previous page is as simple as carrying the
current `startkey' over to the next page. If there’s no previous
`startkey', we are on the first page. We stop displaying the link to
the next page if we get `rows_per_page' or less rows back. This is
called linked list pagination, as we go from page to page, or list item
to list item, instead of jumping directly to a pre-computed page. There
is one caveat, though. Can you spot it?

  CouchDB view keys do not have to be unique; you can have multiple
index entries read. What if you have more index entries for a key than
rows that should be on a page? `startkey' jumps to the first row, and
you’d be screwed if CouchDB didn’t have an additional parameter for you
to use. All view keys with the same value are internally sorted by
`docid', that is, the ID of the document that created that view row.
You can use the `startkey_docid' and `endkey_docid' parameters to get
subsets of these rows. For pagination, we still don’t need
`endkey_docid', but `startkey_docid' is very handy. In addition to
`startkey' and `limit', you also use `startkey_docid' for pagination
if, and only if, the extra row you fetch to find the next page has the
same key as the current `startkey'.

  It is important to note that the `*_docid' parameters only work in
addition to the `*key' parameters and are only useful to further narrow
down the result set of a view for a single key. They do not work on
their own (the one exception being the built-in *note _all_docs view:
27f.  that already sorts by document ID).

  The advantage of this approach is that all the key operations can be
performed on the super-fast B-tree index behind the view. Looking up a
page doesn’t include scanning through hundreds and thousands of rows
unnecessarily.


File: CouchDB.info,  Node: Jump to Page,  Prev: Paging Alternate Method,  Up: Pagination Recipe

6.2.5.6 Jump to Page
....................

One drawback of the linked list style pagination is that you can’t
pre-compute the rows for a particular page from the page number and the
rows per page. Jumping to a specific page doesn’t really work. Our gut
reaction, if that concern is raised, is, “Not even Google is doing
that!” and we tend to get away with it. Google always pretends on the
first page to find 10 more pages of results. Only if you click on the
second page (something very few people actually do) might Google
display a reduced set of pages. If you page through the results, you
get links for the previous and next 10 pages, but no more.
Pre-computing the necessary `startkey' and `startkey_docid' for 20
pages is a feasible operation and a pragmatic optimization to know the
rows for every page in a result set that is potentially tens of
thousands of rows long, or more.

  If you really do need to jump to a page over the full range of
documents (we have seen applications that require that), you can still
maintain an integer value index as the view index and take a hybrid
approach at solving pagination.


File: CouchDB.info,  Node: CouchDB Externals API,  Next: Query Server,  Prev: CouchApp,  Up: Top

7 CouchDB Externals API
***********************

     Author: Paul Joseph Davis

     Date: 2010-09-26

     Source:
     <http://davispj.com/2010/09/26/new-couchdb-externals-api.html>

  For a bit of background, CouchDB has had an API for managing external
OS processes(1) that are capable of handling HTTP requests for a given
URL prefix. These OS processes communicate with CouchDB using JSON over
stdio. They're dead simple to write and provide CouchDB users an easy
way to extend CouchDB functionality.

  Even though they're dead simple to write, there are a few issues. The
implementation in CouchDB does not provide fancy pooling semantics. The
current API is explicitly synchronous which prevents people from writing
event driven code in an external handler. In the end, they may be
simple, but their simplicity is also quite limiting.

  During CouchCamp a few weeks ago I had multiple discussions with
various people that wanted to see the _externals API modified in slight
ways that weren't mutually compatible. After having multiple
discussions with multiple people we formed a general consensus on what
a new API could look like.

* Menu:

* The New Hotness::
* How does it work? - HTTP Proxying::
* How does it work? - OS Daemons::
* Neat. But So What?: Neat But So What?.

  ---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/ExternalProcesses


File: CouchDB.info,  Node: The New Hotness,  Next: How does it work? - HTTP Proxying,  Up: CouchDB Externals API

7.1 The New Hotness
===================

So the first idea for improving the _external API was to make CouchDB
act as a reverse proxy. This would allow people to write an HTTP server
that was as simple or as complicated as they wanted. It will allow
people to change their networking configuration more easily and also
allow for external processes to be hosted on nodes other than the one
running CouchDB. Bottom line, it not only allows us to have similar
semantics as _externals, it provides a lot more fringe benefits as
well. I'm always a fan of extra awesomeness.

  After hitting on the idea of adding a reverse proxy, people quickly
pointed out that it would require users to start manually managing
their external processes using something like Runit(1) or
Supervisord(2). After some more discussions I ran into people that
wanted something like _externals that didn't handle HTTP requests.
After that it was easy to see that adding a second feature that managed
OS processes was the way to go.

  I spent this weekend implementing both of these features. Both are at
the stage of working but requiring more testing. In the case of the
HTTP proxy I have no tests because I can't decide how to test the
thing. If you have ideas, I'd sure like to hear them.

  *[Update]*: I woke up the other morning realizing that I was being an
idiot and that Erlang is awesome. There's no reason that I can't have
an HTTP client, proxy, and server all hosted in the same process. So
that's what I did. It turns out to be a fairly nice way of configuring
matching assertions between the client and the server to test the proxy
transmissions.

  ---------- Footnotes ----------

  (1) http://smarden.org/runit/

  (2) http://supervisord.org/


File: CouchDB.info,  Node: How does it work? - HTTP Proxying,  Next: How does it work? - OS Daemons,  Prev: The New Hotness,  Up: CouchDB Externals API

7.2 How does it work? - HTTP Proxying
=====================================

To configure a *note proxy handler: 226, edit your `local.ini' and add
a section like such:

    [httpd_global_handlers]
    _fti = {couch_httpd_proxy, handle_proxy_req, <<"http://127.0.0.1:5985">>}

This would be approximately what you'd need to do to get
CouchDB-Lucene(1) handled through this interface. The URL you use to
access a query would be:

     <http://127.0.0.1:5984/_fti/db_name/_design/foo/by_content?q=hello>

  A couple things to note here. Anything in the path after the
configured proxy name ("_fti" in this case) will be appended to the
configured destination URL ("<http://127.0.0.1:5985>" in this case).
The query string and any associated body will also be proxied
transparently.

  Also, of note is that there's nothing that limits on what resources
can be proxied. You're free to choose any destination that the CouchDB
node is capable of communicating with.

  ---------- Footnotes ----------

  (1) https://github.com/rnewson/couchdb-lucene


File: CouchDB.info,  Node: How does it work? - OS Daemons,  Next: Neat But So What?,  Prev: How does it work? - HTTP Proxying,  Up: CouchDB Externals API

7.3 How does it work? - OS Daemons
==================================

The second part of the new API gives CouchDB simple OS process
management. When CouchDB boots it will start each configured OS daemon.
If one of these daemons fails at some point, it will be restarted. If
one of these daemons fails too often, CouchDB will stop attempting to
start it.

  OS daemons are one-to-one. For each daemon, CouchDB will make sure
that exactly one instance of it is alive. If you have something where
you want multiple processes, you need to either tell CouchDB about each
one, or have a main process that forks off the required sub-processes.

  To configure an *note OS daemon: c6, add this to your `local.ini':

    [os_daemons]
    my_daemon = /path/to/command -with args


* Menu:

* Configuration API::
* Logging API::
* Dynamic Daemons::


File: CouchDB.info,  Node: Configuration API,  Next: Logging API,  Up: How does it work? - OS Daemons

7.3.1 Configuration API
-----------------------

As an added benefit, because stdio is now free, I implemented a simple
API that OS daemons can use to read the configuration of their CouchDB
host. This way you can have them store their configuration inside
CouchDB's config system if you desire. Or they can peek at things like
the *note httpd/bind_address: 90. and *note httpd/port: 96. that CouchDB
is using.

  A request for a config section looks like this:

    ["get", "os_daemons"]\n

And the response:

    {"my_daemon": "/path/to/command -with args"}\n

Or to get a specific key:

    ["get", "os_daemons", "my_daemon"]\n

And the response:

    "/path/to/command -with args"\n

All requests and responses are terminated with a newline (indicated by
`\n').


File: CouchDB.info,  Node: Logging API,  Next: Dynamic Daemons,  Prev: Configuration API,  Up: How does it work? - OS Daemons

7.3.2 Logging API
-----------------

There's also an API for adding messages to CouchDB's logs. Its simply:

    ["log", $MESG]\n

Where `$MESG' is any arbitrary JSON. There is no response from this
command. As with the config API, the trailing `\n' represents a newline
byte.


File: CouchDB.info,  Node: Dynamic Daemons,  Prev: Logging API,  Up: How does it work? - OS Daemons

7.3.3 Dynamic Daemons
---------------------

The OS daemons react in real time to changes to the configuration
system. If you set or delete keys in the *note os_daemons: c6. section,
the corresponding daemons will be started or killed as appropriate.


File: CouchDB.info,  Node: Neat But So What?,  Prev: How does it work? - OS Daemons,  Up: CouchDB Externals API

7.4 Neat. But So What?
======================

It was suggested that a good first demo would be a Node.js(1) handler.
So, I present to you a "Hello, World" Node.js handler. Also, remember
that this currently relies on code in my fork on GitHub(2).

  File `node-hello-world.js':

    var http = require('http');
    var sys = require('sys');

    // Send a log message to be included in CouchDB's
    // log files.

    var log = function(mesg) {
      console.log(JSON.stringify(["log", mesg]));
    }

    // The Node.js example HTTP server

    var server = http.createServer(function (req, resp) {
      resp.writeHead(200, {'Content-Type': 'text/plain'});
      resp.end('Hello World\n');
      log(req.method + " " + req.url);
    })

    // We use stdin in a couple ways. First, we
    // listen for data that will be the requested
    // port information. We also listen for it
    // to close which indicates that CouchDB has
    // exited and that means its time for us to
    // exit as well.

    var stdin = process.openStdin();

    stdin.on('data', function(d) {
      server.listen(parseInt(JSON.parse(d)));
    });

    stdin.on('end', function () {
      process.exit(0);
    });

    // Send the request for the port to listen on.

    console.log(JSON.stringify(["get", "node_hello", "port"]));

File `local.ini' (Just add these to what you have):

    [log]
    level = info

    [os_daemons]
    node_hello = /path/to/node-hello-world.js

    [node_hello]
    port = 8000

    [httpd_global_handlers]
    _hello = {couch_httpd_proxy, handle_proxy_req, <<"http://127.0.0.1:8000">>}

And then start CouchDB and try:

    $ curl -v http://127.0.0.1:5984/_hello
    * About to connect() to 127.0.0.1 port 5984 (#0)
    *   Trying 127.0.0.1... connected
    * Connected to 127.0.0.1 (127.0.0.1) port 5984 (#0)
    > GET /_hello HTTP/1.1
    > User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
    > Host: 127.0.0.1:5984
    > Accept: */*
    >
    < HTTP/1.1 200
    < Transfer-Encoding: chunked
    < Server: CouchDB (Erlang/OTP)
    < Date: Mon, 27 Sep 2010 01:13:37 GMT
    < Content-Type: text/plain
    < Connection: keep-alive
    <
    Hello World
    * Connection #0 to host 127.0.0.1 left intact
    * Closing connection #0

The corresponding CouchDB logs look like:

    Apache CouchDB 1.5.0 (LogLevel=info) is starting.
    Apache CouchDB has started. Time to relax.
    [info] [<0.31.0>] Apache CouchDB has started on http://127.0.0.1:5984/
    [info] [<0.105.0>] 127.0.0.1 - - 'GET' /_hello 200
    [info] [<0.95.0>] Daemon "node-hello" :: GET /


  ---------- Footnotes ----------

  (1) http://nodejs.org/

  (2) http://github.com/davisp/couchdb/tree/new_externals


File: CouchDB.info,  Node: Query Server,  Next: Fauxton,  Prev: CouchDB Externals API,  Up: Top

8 Query Server
**************

The `Query server' is an external process that communicates with
CouchDB by JSON protocol through stdio interface and processed all
*note design functions: 177. calls: *note views: 10c, *note shows: 176,
*note lists: f8. and more.

  The default query server is written in *note JavaScript: f9, running
via Mozilla SpiderMonkey(1).  You can use other languages by setting a
Query server key in the `language' property of a design document or the
`Content-Type' header of a `temporary view'. Design documents that do
not specify a `language' property are assumed to be of type
`javascript', as are ad hoc queries that are POSTed to *note
_temp_view: 2ed. without a `Content-Type' header.

* Menu:

* Query Server Protocol::
* JavaScript::
* Erlang: Erlang<2>.

Query Server Protocol

* reset::
* add_lib::
* map_doc::
* reduce::
* rereduce::
* ddoc::
* Raising errors::
* Logging: Logging<2>.

add_lib

* add_fun::

ddoc

* shows::
* lists::
* updates::
* filters::
* views::
* validate_doc_update::

Raising errors

* error::
* forbidden::
* unauthorized::

JavaScript

* Design functions context::
* CommonJS Modules::

  ---------- Footnotes ----------

  (1) https://developer.mozilla.org/en/docs/SpiderMonkey


File: CouchDB.info,  Node: Query Server Protocol,  Next: JavaScript,  Up: Query Server

8.1 Query Server Protocol
=========================

The `Query Server' is an external process that communicates with
CouchDB via a JSON protocol over stdio  and processes all design
functions calls: `views', `shows', `lists', `filters', `updates' and
`validate_doc_update'.

  CouchDB communicates with the Query Server process though stdio
interface by JSON messages that terminated by newline character.
Messages that are sent to the Query Server are always `array'-typed
that could be matched by the pattern `[<command>, <*arguments>]\n'.

     Note: To simplify examples reading we omitted trailing `\n'
     character to let Sphinx highlight them well. Also, all examples
     contain formatted JSON values while real data transfers in compact
     mode without formatting spaces.

* Menu:

* reset::
* add_lib::
* map_doc::
* reduce::
* rereduce::
* ddoc::
* Raising errors::
* Logging: Logging<2>.


File: CouchDB.info,  Node: reset,  Next: add_lib,  Up: Query Server Protocol

8.1.1 `reset'
-------------

     Command: `reset'

     Arguments: *note Query server state: 200. (optional)

     Returns: `true'

  This resets the state of the Query Server and makes it forget all
previous input. If applicable, this is the point to run garbage
collection.

  CouchDB sends:

    ["reset"]

The Query Server answers:

    true

To set up new Query Server state the second argument is used with
object data.  This argument is used

  CouchDB sends:

    ["reset", {"reduce_limit": true, "timeout": 5000}]

The Query Server answers:

    true



File: CouchDB.info,  Node: add_lib,  Next: map_doc,  Prev: reset,  Up: Query Server Protocol

8.1.2 `add_lib'
---------------

     Command: `add_lib'

     Arguments: CommonJS library object by `views/lib' path

     Returns: `true'

  Adds *note CommonJS: 293. library to Query Server state for further
usage in `map' functions.

  CouchDB sends:

    [
      "add_lib",
      {
        "utils": "exports.MAGIC = 42;"
      }
    ]

The Query Server answers:

    true


     Note: This library shouldn't have any side effects nor track its
     own state or you'll have a lot of happy debugging time if
     something went wrong.  Remember that a complete index rebuild is a
     heavy operation and this is the only way to fix your mistakes with
     shared state.

* Menu:

* add_fun::


File: CouchDB.info,  Node: add_fun,  Up: add_lib

8.1.2.1 `add_fun'
.................

     Command: `add_fun'

     Arguments: Map function source code.

     Returns: `true'

  When creating or updating a view the Query Server gets sent the view
function for evaluation. The Query Server should parse, compile and
evaluate the function it receives to make it callable later. If this
fails, the Query Server returns an error. CouchDB might store several
functions before sending in any actual documents.

  CouchDB sends:

    [
      "add_fun",
      "function(doc) { if(doc.score > 50) emit(null, {'player_name': doc.name}); }"
    ]

The Query Server answers:

    true



File: CouchDB.info,  Node: map_doc,  Next: reduce,  Prev: add_lib,  Up: Query Server Protocol

8.1.3 `map_doc'
---------------

     Command: `map_doc'

     Arguments: Document object

     Returns: Array of key-value pairs per applied *note function: 2f5.

  When the view function is stored in the Query Server, CouchDB starts
sending in all the documents in the database, one at a time. The Query
Server calls the previously stored functions one after another with a
document and stores its result. When all functions have been called,
the result is returned as a JSON string.

  CouchDB sends:

    [
      "map_doc",
      {
        "_id": "8877AFF9789988EE",
        "_rev": "3-235256484",
        "name": "John Smith",
        "score": 60
      }
    ]

If the function above is the only function stored, the Query Server
answers:

    [
      [
        [null, {"player_name": "John Smith"}]
      ]
    ]

That is, an array with the result for every function for the given
document.

  If a document is to be excluded from the view, the array should be
empty.

  CouchDB sends:

    [
      "map_doc",
      {
        "_id": "9590AEB4585637FE",
        "_rev": "1-674684684",
        "name": "Jane Parker",
        "score": 43
      }
    ]

The Query Server answers:

    [[]]



File: CouchDB.info,  Node: reduce,  Next: rereduce,  Prev: map_doc,  Up: Query Server Protocol

8.1.4 `reduce'
--------------

     Command: `reduce'

     Arguments:

        - Reduce function source

        - Array of *note map function: 291. results where each item
          represented in format `[[key, id-of-doc], value]'

     Returns: Array with pair values: `true' and another array with
     reduced result

  If the view has a reduce function defined, CouchDB will enter into
the reduce phase. The view server will receive a list of reduce
functions and some map results on which it can apply them.

  CouchDB sends:

    [
      "reduce",
      [
        "function(k, v) { return sum(v); }"
      ],
      [
        [[1, "699b524273605d5d3e9d4fd0ff2cb272"], 10],
        [[2, "c081d0f69c13d2ce2050d684c7ba2843"], 20],
        [[null, "foobar"], 3]
      ]
    ]

The Query Server answers:

    [
      true,
      [33]
    ]

Note that even though the view server receives the map results in the
form `[[key, id-of-doc], value]', the function may receive them in a
different form. For example, the JavaScript Query Server applies
functions on the list of keys and the list of values.


File: CouchDB.info,  Node: rereduce,  Next: ddoc,  Prev: reduce,  Up: Query Server Protocol

8.1.5 `rereduce'
----------------

     Command: `rereduce'

     Arguments: List of values.

  When building a view, CouchDB will apply the reduce step directly to
the output of the map step and the rereduce step to the output of a
previous reduce step.

  CouchDB will send a list of values, with no keys or document ids, to
the rereduce step.

  CouchDB sends:

    [
      "rereduce",
      [
        "function(k, v, r) { return sum(v); }"
      ],
      [
        33,
        55,
        66
      ]
    ]

The Query Server answers:

    [
      true,
      [154]
    ]



File: CouchDB.info,  Node: ddoc,  Next: Raising errors,  Prev: rereduce,  Up: Query Server Protocol

8.1.6 `ddoc'
------------

     Command: `ddoc'

     Arguments: Array of objects.

        - First phase (ddoc initialization):

             - `"new"'

             - Design document `_id'

             - Design document object

        - Second phase (design function execution):

             - Design document `_id'

             - Function path as an array of object keys

             - Array of function arguments

     Returns:

        - First phase (ddoc initialization): `true'

        - Second phase (design function execution): custom object
          depending on executed function

This command acts in two phases: `ddoc' registration and `design
function' execution.

  In the first phase CouchDB sends a full design document content to
the Query Server to let it cache it by `_id' value for further function
execution.

  To do this, CouchDB sends:

    [
      "ddoc",
      "new",
      "_design/temp",
      {
        "_id": "_design/temp",
        "_rev": "8-d7379de23a751dc2a19e5638a7bbc5cc",
        "language": "javascript",
        "shows": {
          "request": "function(doc,req){ return {json: req}; }",
          "hello": "function(doc,req){ return {body: 'Hello, ' + (doc || {})._id + '!'}; }"
        }
      }
    ]

The Query Server answers:

    true

After than this design document is ready to serve next subcommands -
that's the second phase.

     Note: Each `ddoc' subcommand is the root design document key, so
     they are not actually subcommands, but first elements of the JSON
     path that may be handled and processed.

     The pattern for subcommand execution is common:

     `["ddoc", <design_doc_id>, [<subcommand>, <funcname>],
     [<argument1>, <argument2>, ...]]'

* Menu:

* shows::
* lists::
* updates::
* filters::
* views::
* validate_doc_update::


File: CouchDB.info,  Node: shows,  Next: lists,  Up: ddoc

8.1.6.1 `shows'
...............

     Command: `ddoc'

     SubCommand: `shows'

     Arguments:

        - Document object or `null' if document `id' wasn't specified
          in request

        - *note Request object: 28c.

     Returns: Array with two elements:

        - `"resp"'

        - *note Response object: 28d.

Executes *note show function: 176.

  Couchdb sends:

    [
      "ddoc",
      "_design/temp",
      [
          "shows",
          "doc"
      ],
      [
        null,
        {
          "info": {
            "db_name": "test",
            "doc_count": 8,
            "doc_del_count": 0,
            "update_seq": 105,
            "purge_seq": 0,
            "compact_running": false,
            "disk_size": 15818856,
            "data_size": 1535048,
            "instance_start_time": "1359952188595857",
            "disk_format_version": 6,
            "committed_update_seq": 105
          },
          "id": null,
          "uuid": "169cb4cc82427cc7322cb4463d0021bb",
          "method": "GET",
          "requested_path": [
            "api",
            "_design",
            "temp",
            "_show",
            "request"
          ],
          "path": [
            "api",
            "_design",
            "temp",
            "_show",
            "request"
          ],
          "raw_path": "/api/_design/temp/_show/request",
          "query": {},
          "headers": {
            "Accept": "*/*",
            "Host": "localhost:5984",
            "User-Agent": "curl/7.26.0"
          },
          "body": "undefined",
          "peer": "127.0.0.1",
          "form": {},
          "cookie": {},
          "userCtx": {
            "db": "api",
            "name": null,
            "roles": [
              "_admin"
            ]
          },
          "secObj": {}
        }
      ]
    ]

The Query Server sends:

    [
      "resp",
      {
        "body": "Hello, undefined!"
      }
    ]



File: CouchDB.info,  Node: lists,  Next: updates,  Prev: shows,  Up: ddoc

8.1.6.2 `lists'
...............

     Command: `ddoc'

     SubCommand: `lists'

     Arguments:

        - *note View Head Information: 29c.:

        - *note Request object: 28c.

     Returns: Array. See below for details.

  Executes *note list function: f8.

  The communication protocol for `list' functions is a bit complex so
let's use an example for illustration.

  Let's assume that we have view a function that emits `id-rev' pairs:

    function(doc) {
      emit(doc._id, doc._rev);
    }

And we'd like to emulate `_all_docs' JSON response with list function.
Our _first_ version of the list functions looks like this:

    function(head, req){
      start({'headers': {'Content-Type': 'application/json'}});
      var resp = head;
      var rows = [];
      while(row=getRow()){
        rows.push(row);
      }
      resp.rows = rows;
      return toJSON(resp);
    }

The whole communication session during list function execution could be
divided on three parts:

  1. Initialization

     The first returned object from list function is an array of next
     structure:

         ["start", <chunks>, <headers>]

     Where `<chunks>' is an array of text chunks that will be sent to
     client and `<headers>' is an object with response HTTP headers.

     This message is sent from the Query Server to CouchDB on the *note
     start(): 303. call which initialize HTTP response to the client:

         [
           "start",
           [],
           {
             "headers": {
               "Content-Type": "application/json"
             }
           }
         ]

     After this, the list function may start to process view rows.

  2. View Processing

     Since view results can be extremely large, it is not wise to pass
     all its rows in a single command. Instead, CouchDB can send view
     rows one by one to the Query Server allowing processing view and
     output generation in a streaming way.

     CouchDB sends a special array that carries view row data:

         [
           "list_row",
           {
             "id": "0cb42c267fe32d4b56b3500bc503e030",
             "key": "0cb42c267fe32d4b56b3500bc503e030",
             "value": "1-967a00dff5e02add41819138abb3284d"
           }
         ]

     If Query Server has something to return on this, it returns an
     array with a `"chunks"' item in the head and an array of data in
     the tail. Now, for our case it has nothing to return, so the
     response will be:

         [
           "chunks",
           []
         ]

     When there is no more view rows to process, CouchDB sends special
     message, that signs about that there is no more data to send from
     its side:

         ["list_end"]


  3. Finalization

     The last stage of the communication process is the returning _list
     tail_: the last data chunk. After this, processing list function
     will be completed and client will receive complete response.

     For our example the last message will be the next:

         [
           "end",
           [
             "{\"total_rows\":2,\"offset\":0,\"rows\":[{\"id\":\"0cb42c267fe32d4b56b3500bc503e030\",\"key\":\"0cb42c267fe32d4b56b3500bc503e030\",\"value\":\"1-967a00dff5e02add41819138abb3284d\"},{\"id\":\"431926a69504bde41851eb3c18a27b1f\",\"key\":\"431926a69504bde41851eb3c18a27b1f\",\"value\":\"1-967a00dff5e02add41819138abb3284d\"}]}"
           ]
         ]



  There, we had made a big mistake: we had returned out result in a
single message from the Query Server. That's ok when there are only a
few rows in the view result, but it's not acceptable for millions
documents and millions view rows

  Let's fix our list function and see the changes in communication:

    function(head, req){
      start({'headers': {'Content-Type': 'application/json'}});
      send('{');
      send('"total_rows":' + toJSON(head.total_rows) + ',');
      send('"offset":' + toJSON(head.offset) + ',');
      send('"rows":[');
      if (row=getRow()){
        send(toJSON(row));
      }
      while(row=getRow()){
        send(',' + toJSON(row));
      }
      send(']');
      return '}';
    }

"Wait, what?" - you'd like to ask. Yes, we'd build JSON response
manually by string chunks, but let's take a look on logs:

    [Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Output :: ["start",["{","\"total_rows\":2,","\"offset\":0,","\"rows\":["],{"headers":{"Content-Type":"application/json"}}]
    [Wed, 24 Jul 2013 05:45:30 GMT] [info] [<0.18963.1>] 127.0.0.1 - - GET /blog/_design/post/_list/index/all_docs 200
    [Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Input  :: ["list_row",{"id":"0cb42c267fe32d4b56b3500bc503e030","key":"0cb42c267fe32d4b56b3500bc503e030","value":"1-967a00dff5e02add41819138abb3284d"}]
    [Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Output :: ["chunks",["{\"id\":\"0cb42c267fe32d4b56b3500bc503e030\",\"key\":\"0cb42c267fe32d4b56b3500bc503e030\",\"value\":\"1-967a00dff5e02add41819138abb3284d\"}"]]
    [Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Input  :: ["list_row",{"id":"431926a69504bde41851eb3c18a27b1f","key":"431926a69504bde41851eb3c18a27b1f","value":"1-967a00dff5e02add41819138abb3284d"}]
    [Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Output :: ["chunks",[",{\"id\":\"431926a69504bde41851eb3c18a27b1f\",\"key\":\"431926a69504bde41851eb3c18a27b1f\",\"value\":\"1-967a00dff5e02add41819138abb3284d\"}"]]
    [Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Input  :: ["list_end"]
    [Wed, 24 Jul 2013 05:45:30 GMT] [debug] [<0.19191.1>] OS Process #Port<0.4444> Output :: ["end",["]","}"]]

Note, that now the Query Server sends response by lightweight chunks
and if our communication process was extremely slow, the client will
see how response data appears on their screen. Chunk by chunk, without
waiting for the complete result, like they have for our previous list
function.


File: CouchDB.info,  Node: updates,  Next: filters,  Prev: lists,  Up: ddoc

8.1.6.3 `updates'
.................

     Command: `ddoc'

     SubCommand: `updates'

     Arguments:

        - Document object or `null' if document `id' wasn't specified
          in request

        - *note Request object: 28c.

     Returns: Array with there elements:

        - `"up"'

        - Document object or `null' if nothing should be stored

        - *note Response object: 28d.

Executes *note update function: 29e.

  CouchDB sends:

    [
        "ddoc",
        "_design/id",
        [
            "updates",
            "nothing"
        ],
        [
            null,
            {
                "info": {
                    "db_name": "test",
                    "doc_count": 5,
                    "doc_del_count": 0,
                    "update_seq": 16,
                    "purge_seq": 0,
                    "compact_running": false,
                    "disk_size": 8044648,
                    "data_size": 7979601,
                    "instance_start_time": "1374612186131612",
                    "disk_format_version": 6,
                    "committed_update_seq": 16
                },
                "id": null,
                "uuid": "7b695cb34a03df0316c15ab529002e69",
                "method": "POST",
                "requested_path": [
                    "test",
                    "_design",
                    "1139",
                    "_update",
                    "nothing"
                ],
                "path": [
                    "test",
                    "_design",
                    "1139",
                    "_update",
                    "nothing"
                ],
                "raw_path": "/test/_design/1139/_update/nothing",
                "query": {},
                "headers": {
                    "Accept": "*/*",
                    "Accept-Encoding": "identity, gzip, deflate, compress",
                    "Content-Length": "0",
                    "Host": "localhost:5984"
                },
                "body": "",
                "peer": "127.0.0.1",
                "form": {},
                "cookie": {},
                "userCtx": {
                    "db": "test",
                    "name": null,
                    "roles": [
                        "_admin"
                    ]
                },
                "secObj": {}
            }
        ]
    ]

The Query Server answers:

    [
      "up",
      null,
      {"body": "document id wasn't provided"}
    ]

or in case of successful update:

    [
      "up",
      {
        "_id": "7b695cb34a03df0316c15ab529002e69",
        "hello": "world!"
      },
      {"body": "document was updated"}
    ]



File: CouchDB.info,  Node: filters,  Next: views,  Prev: updates,  Up: ddoc

8.1.6.4 `filters'
.................

     Command: `ddoc'

     SubCommand: `filters'

     Arguments:

        - Array of document objects

        - *note Request object: 28c.

     Returns: Array of two elements:

        - `true'

        - Array of booleans in the same order of input documents.

Executes *note filter function: 235.

  CouchDB sends:

    [
        "ddoc",
        "_design/test",
        [
            "filters",
            "random"
        ],
        [
            [
                {
                    "_id": "431926a69504bde41851eb3c18a27b1f",
                    "_rev": "1-967a00dff5e02add41819138abb3284d",
                    "_revisions": {
                        "start": 1,
                        "ids": [
                            "967a00dff5e02add41819138abb3284d"
                        ]
                    }
                },
                {
                    "_id": "0cb42c267fe32d4b56b3500bc503e030",
                    "_rev": "1-967a00dff5e02add41819138abb3284d",
                    "_revisions": {
                        "start": 1,
                        "ids": [
                            "967a00dff5e02add41819138abb3284d"
                        ]
                    }
                }
            ],
            {
                "info": {
                    "db_name": "test",
                    "doc_count": 5,
                    "doc_del_count": 0,
                    "update_seq": 19,
                    "purge_seq": 0,
                    "compact_running": false,
                    "disk_size": 8056936,
                    "data_size": 7979745,
                    "instance_start_time": "1374612186131612",
                    "disk_format_version": 6,
                    "committed_update_seq": 19
                },
                "id": null,
                "uuid": "7b695cb34a03df0316c15ab529023a81",
                "method": "GET",
                "requested_path": [
                    "test",
                    "_changes?filter=test",
                    "random"
                ],
                "path": [
                    "test",
                    "_changes"
                ],
                "raw_path": "/test/_changes?filter=test/random",
                "query": {
                    "filter": "test/random"
                },
                "headers": {
                    "Accept": "application/json",
                    "Accept-Encoding": "identity, gzip, deflate, compress",
                    "Content-Length": "0",
                    "Content-Type": "application/json; charset=utf-8",
                    "Host": "localhost:5984"
                },
                "body": "",
                "peer": "127.0.0.1",
                "form": {},
                "cookie": {},
                "userCtx": {
                    "db": "test",
                    "name": null,
                    "roles": [
                        "_admin"
                    ]
                },
                "secObj": {}
            }
        ]
    ]

The Query Server answers:

    [
      true,
      [
        true,
        false
      ]
    ]



File: CouchDB.info,  Node: views,  Next: validate_doc_update,  Prev: filters,  Up: ddoc

8.1.6.5 `views'
...............

     Command: `ddoc'

     SubCommand: `views'

     Arguments: Array of document objects

     Returns: Array of two elements:

        - `true'

        - Array of booleans in the same order of input documents.

New in version 1.2.

  Executes *note view function: 2a2. in place of the filter.

  Acts in the same way as *note filters: 306. command.


File: CouchDB.info,  Node: validate_doc_update,  Prev: views,  Up: ddoc

8.1.6.6 `validate_doc_update'
.............................

     Command: `ddoc'

     SubCommand: `validate_doc_update'

     Arguments:

        - Document object that will be stored

        - Document object that will be replaced

        - *note User Context Object: 1dd.

        - *note Security Object: 28e.

     Returns: `1'

  Executes *note validation function: 112.

  CouchDB send:

    [
      "ddoc",
      "_design/id",
      ["validate_doc_update"],
      [
        {
          "_id": "docid",
          "_rev": "2-e0165f450f6c89dc6b071c075dde3c4d",
          "score": 10
        },
        {
          "_id": "docid",
          "_rev": "1-9f798c6ad72a406afdbf470b9eea8375",
          "score": 4
        },
        {
          "name": "Mike",
          "roles": ["player"]
        },
        {
          "admins": {},
          "members": []
        }
      ]
    ]

The Query Server answers:

    1


     Note: While the only valid response for this command is `true' to
     prevent document save the Query Server need to raise an error:
     `forbidden' or `unauthorized' - these errors will be turned into
     correct `HTTP 403' and `HTTP 401' responses respectively.


File: CouchDB.info,  Node: Raising errors,  Next: Logging<2>,  Prev: ddoc,  Up: Query Server Protocol

8.1.7 Raising errors
--------------------

When something went wrong the Query Server is able to inform CouchDB
about such a situation by sending special message in response of
received command.

  Error messages prevent further command execution and return an error
description to CouchDB. All errors are logically divided into two
groups:

   - `Common errors'. These errors only break the current Query Server
     command and return the error info to the CouchDB instance
     _without_ terminating the Query Server  process.

   - `Fatal errors'. The fatal errors signal about something really bad
     that hurts the overall Query Server process stability and
     productivity. For instance, if you're using Python Query Server
     and some design function is unable to import some third party
     module, it's better to count such error as fatal and terminate
     whole process or you still have to do the same after import fixing,
     but manually.

* Menu:

* error::
* forbidden::
* unauthorized::


File: CouchDB.info,  Node: error,  Next: forbidden,  Up: Raising errors

8.1.7.1 `error'
...............

To raise an error, the Query Server have to answer:

    ["error", "error_name", "reason why"]

The `"error_name"' helps to classify problems by their type e.g. if it's
`"value_error"' so probably user have entered wrong data, `"not_found"'
notifies about missed resource and `"type_error"' definitely says about
invalid and non expected input from user.

  The `"reason why"' is the error message that explains why it raised
and, if possible, what is needed to do to fix it.

  For example, calling *note Update functions: 29e. against non
existent document could produce next error message:

    ["error", "not_found", "Update function requires existent document"]



File: CouchDB.info,  Node: forbidden,  Next: unauthorized,  Prev: error,  Up: Raising errors

8.1.7.2 `forbidden'
...................

The `forbidden' error is widely used by *note Validate document update
functions: 112. to stop further function processing and prevent on disk
store of the new document version. Since this error actually is not an
error, but an assertion against user actions, CouchDB doesn't log it at
`"error"' level, but returns `HTTP 403 Forbidden' response with error
information object.

  To raise this error, the Query Server have to answer:

    {"forbidden": "reason why"}



File: CouchDB.info,  Node: unauthorized,  Prev: forbidden,  Up: Raising errors

8.1.7.3 `unauthorized'
......................

The `unauthorized' error mostly acts like `forbidden' one, but with the
meaning of _please authorize first_. This small difference helps end
users to understand what they can do to solve the problem. CouchDB
doesn't log it at `"error"' level, but returns `HTTP 401 Unauthorized'
response with error information object.

  To raise this error, the Query Server have to answer:

    {"unauthorized": "reason why"}



File: CouchDB.info,  Node: Logging<2>,  Prev: Raising errors,  Up: Query Server Protocol

8.1.8 Logging
-------------

At any time, the Query Server may send some information that will be
saved in CouchDB's log file. This is done by sending a special object
with just one field, log, on a separate line:

    ["log", "some message"]

CouchDB responds nothing, but writes received message into log file:

    [Sun, 13 Feb 2009 23:31:30 GMT] [info] [<0.72.0>] Query Server Log Message: some message

These messages are only logged at *note info level: bf.


File: CouchDB.info,  Node: JavaScript,  Next: Erlang<2>,  Prev: Query Server Protocol,  Up: Query Server

8.2 JavaScript
==============

     Note: While every design function has access to all JavaScript
     objects, the table below describes appropriate usage cases. For
     example, you may use *note emit(): 292. in *note List functions:
     f8, but *note getRow(): 318. is not permitted during *note Map
     functions: 291.

JS Function                          Reasonable to use in design doc functions
--------------------------------------------------------------------------------------- 
*note emit(): 292.                   *note Map functions: 291.
*note getRow(): 318.                 *note List functions: f8.
*note JSON: 319.                     any
*note isArray(): 31a.                any
*note log(): 31b.                    any
*note provides(): 29a.               *note Show functions: 176, *note List functions:
                                     f8.
*note registerType(): 299.           *note Show functions: 176, *note List functions:
                                     f8.
*note require(): 294.                any, except *note Reduce and rereduce functions:
                                     201.
*note send(): 31c.                   *note List functions: f8.
*note start(): 303.                  *note List functions: f8.
*note sum(): 2d4.                    any
*note toJSON(): 31d.                 any

* Menu:

* Design functions context::
* CommonJS Modules::


File: CouchDB.info,  Node: Design functions context,  Next: CommonJS Modules,  Up: JavaScript

8.2.1 Design functions context
------------------------------

Each design function executes in a special context of predefined
objects, modules and functions:

 -- Javascript Function: emit (key, value)
     Emits a `key'-`value' pair for further processing by CouchDB after
     the map function is done.

          Arguments:

             * *key* - The view key

             * *value* - The `key's associated value

         function(doc){
           emit(doc._id, doc._rev);
         }



 -- Javascript Function: getRow ()
     Extracts the next row from a related view result.

          Returns: View result row

          Return type: object

         function(head, req){
           send('[');
           row = getRow();
           if (row){
             send(toJSON(row));
             while(row = getRow()){
               send(',');
               send(toJSON(row));
             }
           }
           return ']';
         }



 -- Javascript Data: JSON
     JSON2(1) object.

 -- Javascript Function: isArray (obj)
     A helper function to check if the provided value is an `Array'.

          Arguments:

             * *obj* - Any Javascript value

          Returns: `true' if `obj' is `Array'-typed, `false' otherwise

          Return type: boolean

 -- Javascript Function: log (message)
     Log a message to the CouchDB log (at the `INFO' level).

          Arguments:

             * *message* - Message to be logged

         function(doc){
           log('Procesing doc ' + doc['_id']);
           emit(doc['_id'], null);
         }

     After the map function has run, the following line can be found in
     CouchDB logs (e.g. at `/var/log/couchdb/couch.log'):

         [Sat, 03 Nov 2012 17:38:02 GMT] [info] [<0.7543.0>] OS Process #Port<0.3289> Log :: Processing doc 8d300b86622d67953d102165dbe99467



 -- Javascript Function: provides (key, func)
     Registers callable handler for specified MIME key.

          Arguments:

             * *key* - MIME key previously defined by *note
               registerType(): 299.

             * *func* - MIME type handler

 -- Javascript Function: registerType (key, *mimes)
     Registers list of MIME types by associated `key'.

          Arguments:

             * *key* - MIME types

             * *mimes* - MIME types enumeration

     Predefined mappings (`key'-`array'):

        - *all*: `*/*'

        - *text*: `text/plain; charset=utf-8', `txt'

        - *html*: `text/html; charset=utf-8'

        - *xhtml*: `application/xhtml+xml', `xhtml'

        - *xml*: `application/xml', `text/xml', `application/x-xml'

        - *js*: `text/javascript', `application/javascript',
          `application/x-javascript'

        - *css*: `text/css'

        - *ics*: `text/calendar'

        - *csv*: `text/csv'

        - *rss*: `application/rss+xml'

        - *atom*: `application/atom+xml'

        - *yaml*: `application/x-yaml', `text/yaml'

        - *multipart_form*: `multipart/form-data'

        - *url_encoded_form*: `application/x-www-form-urlencoded'

        - *json*: `application/json', `text/x-json'

 -- Javascript Function: require (path)
     Loads CommonJS module by a specified `path'. The path should not
     start with a slash.

          Arguments:

             * *path* - A CommonJS module path started from design
               document root

          Returns: Exported statements

 -- Javascript Function: send (chunk)
     Sends a single string `chunk' in response.

          Arguments:

             * *chunk* - Text chunk

         function(head, req){
           send('Hello,');
           send(' ');
           send('Couch');
           return !
         }



 -- Javascript Function: start (init_resp)
     Initiates chunked response. As an option, a custom *note response:
     28d. object may be sent at this point.  For `list'-functions only!

          Note: list functions may set the `HTTP response code' and
          `headers' by calling this function. This function must be
          called before *note send(): 31c, *note getRow(): 318. or a
          `return' statement; otherwise, the query server will
          implicitly call this function with the empty object (`{}').

         function(head, req){
           start({
             "code": 302,
             "headers": {
               "Location": "http://couchdb.apache.org"
             }
           });
           return "Relax!";
         }



 -- Javascript Function: sum (arr)
     Sum `arr's items.

          Arguments:

             * *arr* - Array of numbers

          Return type: number

 -- Javascript Function: toJSON (obj)
     Encodes `obj' to JSON string. This is an alias for the
     `JSON.stringify' method.

          Arguments:

             * *obj* - JSON encodable object

          Returns: JSON string

  ---------- Footnotes ----------

  (1)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=blob;f=share/server/json2.js


File: CouchDB.info,  Node: CommonJS Modules,  Prev: Design functions context,  Up: JavaScript

8.2.2 CommonJS Modules
----------------------

Support for CommonJS Modules(1) (introduced in CouchDB 0.11.0) allows
you to create modular design functions without the need for duplication
of functionality.

  Here's a CommonJS module that checks user permissions:

    function user_context(userctx, secobj) {
      var is_admin = function() {
        return userctx.indexOf('_admin') != -1;
      }
      return {'is_admin': is_admin}
    }

    exports['user'] = user_context

Each module has access to additional global variables:

   - *module* (`object'): Contains information about the stored module

        - *id* (`string'): The module id; a JSON path in ddoc context

        - *current* (`code'): Compiled module code object

        - *parent* (`object'): Parent frame

        - *exports* (`object'): Export statements

   - *exports* (`object'): Shortcut to the `module.exports' object

  The CommonJS module can be added to a design document, like so:

    {
       "views": {
          "lib": {
             "security": "function user_context(userctx, secobj) { ... }"
          }
       },
       "validate_doc_update": "function(newdoc, olddoc, userctx, secobj) {
          user = require('lib/security').user(userctx, secobj);
          return user.is_admin();
       }"
       "_id": "_design/test"
    }

Modules paths are relative to the design document's `views' object, but
modules can only be loaded from the object referenced via `lib'. The
`lib' structure can still be used for view functions as well, by simply
storing view functions at e.g. `views.lib.map', `views.lib.reduce', etc.

  ---------- Footnotes ----------

  (1) http://wiki.commonjs.org/wiki/Modules/1.1.1


File: CouchDB.info,  Node: Erlang<2>,  Prev: JavaScript,  Up: Query Server

8.3 Erlang
==========

     Note: The Erlang query server is disabled by default.  Read *note
     configuration guide: 1fe. about reasons why and how to enable it.

 -- Javascript Function: Emit (Id, Value)
     Emits `key'-`value' pairs to view indexer process.

         fun({Doc}) ->
           <<K,_/binary>> = proplists:get_value(<<"_rev">>, Doc, null),
           V = proplists:get_value(<<"_id">>, Doc, null),
           Emit(<<K>>, V)
         end.



 -- Javascript Function: FoldRows (Fun, Acc)
     Helper to iterate over all rows in a list function.

          Arguments:

             * *Fun* - Function object.

             * *Acc* - The value previously returned by `Fun'.

         fun(Head, {Req}) ->
           Fun = fun({Row}, Acc) ->
             Id = couch_util:get_value(<<"id">>, Row),
             Send(list_to_binary(io_lib:format("Previous doc id: ~p~n", [Acc]))),
             Send(list_to_binary(io_lib:format("Current  doc id: ~p~n", [Id]))),
             {ok, Id}
           end,
           FoldRows(Fun, nil),
           ""
         end.



 -- Javascript Function: GetRow ()
     Retrieves the next row from a related view result.

         %% FoldRows background implementation.
         %% https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=blob;f=src/couchdb/couch_native_process.erl;hb=HEAD#l368
         %%
         foldrows(GetRow, ProcRow, Acc) ->
           case GetRow() of
             nil ->
               {ok, Acc};
             Row ->
               case (catch ProcRow(Row, Acc)) of
                 {ok, Acc2} ->
                   foldrows(GetRow, ProcRow, Acc2);
                 {stop, Acc2} ->
                   {ok, Acc2}
               end
         end.



 -- Javascript Function: Log (Msg)
          Arguments:

             * *Msg* - Log a message at the `INFO' level.

         fun({Doc}) ->
           <<K,_/binary>> = proplists:get_value(<<"_rev">>, Doc, null),
           V = proplists:get_value(<<"_id">>, Doc, null),
           Log(lists:flatten(io_lib:format("Hello from ~s doc!", [V]))),
           Emit(<<K>>, V)
         end.

     After the map function has run, the following line can be found in
     CouchDB logs (e.g. at `/var/log/couchdb/couch.log'):

         [Sun, 04 Nov 2012 11:33:58 GMT] [info] [<0.9144.2>] Hello from 8d300b86622d67953d102165dbe99467 doc!



 -- Javascript Function: Send (Chunk)
     Sends a single string `Chunk' in response.

         fun(Head, {Req}) ->
           Send("Hello,"),
           Send(" "),
           Send("Couch"),
           "!"
         end.

     The function above produces the following response:

         Hello, Couch!



 -- Javascript Function: Start (Headers)
          Arguments:

             * *Headers* - Proplist of *note response object: 28d.

     Initialize *note List functions: f8. response. At this point,
     response code and headers may be defined. For example, this
     function redirects to the CouchDB web site:

         fun(Head, {Req}) ->
           Start({[{<<"code">>, 302},
                   {<<"headers">>, {[
                     {<<"Location">>, <<"http://couchdb.apache.org">>}]
                   }}
                 ]}),
           "Relax!"
         end.




File: CouchDB.info,  Node: Fauxton,  Next: API Reference<2>,  Prev: Query Server,  Up: Top

9 Fauxton
*********

* Menu:

* Installation: Installation<2>.
* Writting Addons::

Installation

* Get the source::
* Fauxton Setup::
* Dev Server::
* Deploy Fauxton::

Deploy Fauxton

* Understang Fauxton Code layout::
* ToDo items::

Writting Addons

* Generating an Addon::
* Routes and hooks::
* Hello world Addon::

Routes and hooks

* Routes::
* Hooks::


File: CouchDB.info,  Node: Installation<2>,  Next: Writting Addons,  Up: Fauxton

9.1 Installation
================

A recent of node.js(1) and npm(2) is required.

* Menu:

* Get the source::
* Fauxton Setup::
* Dev Server::
* Deploy Fauxton::

  ---------- Footnotes ----------

  (1) http://nodejs.org/

  (2) https://npmjs.org/doc/README.html


File: CouchDB.info,  Node: Get the source,  Next: Fauxton Setup,  Up: Installation<2>

9.1.1 Get the source
--------------------

Clone the CouchDB repo:

    $ git clone http://git-wip-us.apache.org/repos/asf/couchdb.git
    $ cd couchdb



File: CouchDB.info,  Node: Fauxton Setup,  Next: Dev Server,  Prev: Get the source,  Up: Installation<2>

9.1.2 Fauxton Setup
-------------------

Install all dependencies:

    couchdb/ $ cd src/fauxton
    couchdb/src/fauxton/ $ npm install


     Note: To avoid a npm global install add `node_modules/.bin' to
     your path:

         export PATH=./node_modules/.bin:$PATH

     Or just use the wrappers in `./bin/'.

     Development mode, non minified files:

         ./bin/grunt couchdebug

     Or fully compiled install:

         ./bin/grunt couchdb




File: CouchDB.info,  Node: Dev Server,  Next: Deploy Fauxton,  Prev: Fauxton Setup,  Up: Installation<2>

9.1.3 Dev Server
----------------

Using the dev server is the easiest way to use Fauxton, specially when
developing for it:

    grunt dev



File: CouchDB.info,  Node: Deploy Fauxton,  Prev: Dev Server,  Up: Installation<2>

9.1.4 Deploy Fauxton
--------------------

Deploy Fauxton to your local CouchDB instance:

     ./bin/grunt couchapp_deploy

  The Fauxton be available by
<http://localhost:5984/fauxton/_design/fauxton/index.html>

* Menu:

* Understang Fauxton Code layout::
* ToDo items::


File: CouchDB.info,  Node: Understang Fauxton Code layout,  Next: ToDo items,  Up: Deploy Fauxton

9.1.4.1 Understang Fauxton Code layout
......................................

Each bit of functionality is its own separate module or addon.

  All core modules are stored under `app/module' and any addons that
are optional are under `app/addons'.

  We use backbone.js(1) and Backbone.layoutmanager(2) quite heavily, so
best to get an idea how they work. Its best at this point to read
through a couple of the modules and addons to get an idea of how they
work.

  Two good starting points are `app/addon/config' and
`app/modules/databases'.

  Each module must have a `base.js' file, this is read and compile when
Fauxton is deployed.

  The `resource.js' file is usually for your `Backbone.Models' and
`Backbone.Collections', `view.js' for your `Backbone.Views'.

  The `routes.js' is used to register a url path for your view along
with what layout, data, breadcrumbs and api point is required for the
view.

  ---------- Footnotes ----------

  (1) http://backbonejs.org/

  (2) https://github.com/tbranyen/backbone.layoutmanager


File: CouchDB.info,  Node: ToDo items,  Prev: Understang Fauxton Code layout,  Up: Deploy Fauxton

9.1.4.2 ToDo items
..................

Checkout JIRA(1)  for a list of items to do.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB/component/12320406


File: CouchDB.info,  Node: Writting Addons,  Prev: Installation<2>,  Up: Fauxton

9.2 Writting Addons
===================

Addons allow you to extend Fauxton for a specific use case. Usually,
they have the following structure:

    + my_addon/
    | ---+ assets [optional]
    |    \ ---+ less
    |         \ ---- my_addon.less
    | ---+ templates/
    |    \ ---- my_addon.html - underscore template fragments
    | ---- resources.js - models and collections of the addon
    | ---- routes.js - URL routing for the addon
    | ---- views.js - views that the model provides


* Menu:

* Generating an Addon::
* Routes and hooks::
* Hello world Addon::


File: CouchDB.info,  Node: Generating an Addon,  Next: Routes and hooks,  Up: Writting Addons

9.2.1 Generating an Addon
-------------------------

We have a `grunt-init' template that lets you create a skeleton addon,
including all the boiler plate code. Run `grunt-init tasks/addon' and
answer the questions it asks to create an addon:

    ± grunt-init tasks/addon
    path.existsSync is now called `fs.existsSync`.
    Running "addon" task

    Please answer the following:
    [?] Add on Name (WickedCool) SuperAddon
    [?] Location of add ons (app/addons)
    [?] Do you need an assets folder?(for .less) (y/N)
    [?] Do you need to make any changes to the above before continuing? (y/N)

    Created addon SuperAddon in app/addons

    Done, without errors.

Once the addon is created add the name to the settings.json file to get
it compiled and added on the next install.


File: CouchDB.info,  Node: Routes and hooks,  Next: Hello world Addon,  Prev: Generating an Addon,  Up: Writting Addons

9.2.2 Routes and hooks
----------------------

An addon can insert itself into Fauxton in two ways; via a route or via
a hook.

* Menu:

* Routes::
* Hooks::


File: CouchDB.info,  Node: Routes,  Next: Hooks,  Up: Routes and hooks

9.2.2.1 Routes
..............

An addon will override an existing route should one exist, but in all
other ways is just a normal backbone `route/view'. This is how you
would add a whole new feature.


File: CouchDB.info,  Node: Hooks,  Prev: Routes,  Up: Routes and hooks

9.2.2.2 Hooks
.............

Hooks let you modify/extend an existing feature. They modify a DOM
element by selector for a named set of routes, for example:

    var Search = new FauxtonAPI.addon();
    Search.hooks = {
      // Render additional content into the sidebar
      "#sidebar-content": {
        routes:[
          "database/:database/_design/:ddoc/_search/:search",
          "database/:database/_design/:ddoc/_view/:view",
          "database/:database/_:handler"],
        callback: searchSidebar
      }
    };
    return Search;

adds the `searchSidebar' callback to `#sidebar-content' for three
routes.


File: CouchDB.info,  Node: Hello world Addon,  Prev: Routes and hooks,  Up: Writting Addons

9.2.3 Hello world Addon
-----------------------

First create the addon skeleton:

    ± bbb addon
    path.existsSync is now called `fs.existsSync`.
    Running "addon" task

    Please answer the following:
    [?] Add on Name (WickedCool) Hello
    [?] Location of add ons (app/addons)
    [?] Do you need to make any changes to the above before continuing? (y/N)

    Created addon Hello in app/addons

    Done, without errors.

In `app/addons/hello/templates/hello.html' place:

    <h1>Hello!</h1>

Next, we'll defined a simple view in `resources.js' (for more complex
addons you may want to have a views.js) that renders that template:

    define([
      "app",
      "api"
    ],

    function (app, FauxtonAPI) {
      var Resources = {};

      Resources.Hello = FauxtonAPI.View.extend({
        template: "addons/hello/templates/hello"
      });

      return Resources;
    });

Then define a route in `routes.js' that the addon is accessible at:

    define([
      "app",
      "api",
      "addons/hello/resources"
    ],

    function(app, FauxtonAPI, Resources) {
      var helloRoute = function () {
        console.log('helloRoute callback yo');
        return {
          layout: "one_pane",
          crumbs: [
            {"name": "Hello","link": "_hello"}
          ],
          views: {
            "#dashboard-content": new Resources.Hello({})
          },
          apiUrl: 'hello'
        };
      };

      Routes = {
        "_hello": helloRoute
      };

      return Routes;
    });

Then wire it all together in base.js:

    define([
      "app",
      "api",
      "addons/hello/routes"
    ],

    function(app, FauxtonAPI, HelloRoutes) {
      var Hello = new FauxtonAPI.addon();
      console.log('hello from hello');

      Hello.initialize = function() {
        FauxtonAPI.addHeaderLink({title: "Hello", href: "#_hello"});
      };

      Hello.Routes = HelloRoutes;
      console.log(Hello);
      return Hello;
    });

Once the code is in place include the add on in your `settings.json' so
that it gets included by the `require' task. Your addon is included in
one of three ways; a local path, a git URL or a name. Named plugins
assume the plugin is in the Fauxton base directory, addons with a git
URL will be cloned into the application, local paths will be copied.
Addons included from a local path will be cleaned out by the clean
task, others are left alone.


File: CouchDB.info,  Node: API Reference<2>,  Next: JSON Structure Reference,  Prev: Fauxton,  Up: Top

10 API Reference
****************

The components of the API URL path help determine the part of the
CouchDB server that is being accessed. The result is the structure of
the URL request both identifies and effectively describes the area of
the database you are accessing.

  As with all URLs, the individual components are separated by a forward
slash.

  As a general rule, URL components and JSON fields starting with the
`_' (underscore) character represent a special component or entity
within the server or returned object. For example, the URL fragment
`/_all_dbs' gets a list of all of the databases in a CouchDB instance.

  This reference is structured according to the URL structure, as below.

* Menu:

* API Basics::
* Server: Server<2>.
* Databases: Databases<2>.
* Documents: Documents<2>.
* Design Documents::
* Local (non-replicating) Documents: Local non-replicating Documents.

API Basics

* Request Format and Responses::
* HTTP Headers::
* JSON Basics::
* HTTP Status Codes::

HTTP Headers

* Request Headers::
* Response Headers::

JSON Basics

* Number Handling::

Server

* /::
* /_active_tasks::
* /_all_dbs::
* /_db_updates::
* /_log::
* /_replicate::
* /_restart::
* /_stats::
* /_utils::
* /_uuids::
* /favicon.ico: /favicon ico.
* Authentication: Authentication<2>.
* Configuration::

/_replicate

* Replication Operation::
* Specifying the Source and Target Database::
* Single Replication::
* Continuous Replication::
* Canceling Continuous Replication::

/_stats

* couchdb::
* httpd_request_methods::
* httpd_status_codes::
* httpd::

Authentication

* Basic Authentication: Basic Authentication<2>.
* Cookie Authentication: Cookie Authentication<2>.
* Proxy Authentication::
* OAuth Authentication::

Cookie Authentication

* /_session::

Configuration

* /_config::
* /_config/section::
* /_config/section/key::

Databases

* /db::
* /db/_all_docs::
* /db/_bulk_docs::
* /db/_changes::
* /db/_compact::
* /db/_compact/design-doc::
* /db/_ensure_full_commit::
* /db/_view_cleanup::
* /db/_security::
* /db/_temp_view::
* /db/_purge::
* /db/_missing_revs::
* /db/_revs_diff::
* /db/_revs_limit::

/db

* Specifying the Document ID::
* Batch Mode Writes::

/db/_bulk_docs

* Inserting Documents in Bulk::
* Updating Documents in Bulk::
* Bulk Documents Transaction Semantics::
* Bulk Document Validation and Conflict Errors::

/db/_changes

* Changes Feeds::
* Filtering::

Changes Feeds

* Polling::
* Long Polling::
* Continuous::
* Event Source::

Filtering

* _doc_ids::
* _design::
* _view::

/db/_purge

* Updating Indexes::

Documents

* /db/doc::
* /db/doc/attachment::

/db/doc

* Attachments: Attachments<2>.
* Getting a List of Revisions::
* Obtaining an Extended Revision History::
* Obtaining a Specific Revision::
* Updating an Existing Document::
* Copying from a Specific Revision::
* Copying to an Existing Document::

Attachments

* Basic Attachments Info::
* Retrieving Attachments Content::
* Retrieving Attachments Encoding Info::
* Creating Multiple Attachments::

Retrieving Attachments Content

* Efficient Multiple Attachments Retrieving::

Obtaining a Specific Revision

* Retrieving Deleted Documents::

/db/doc/attachment

* HTTP Range Requests::

Design Documents

* /db/_design/design-doc::
* /db/_design/design-doc/attachment::
* /db/_design/design-doc/_info::
* /db/_design/design-doc/_view/view-name::
* /db/_design/design-doc/_show/show-name::
* /db/_design/design-doc/_show/show-name/doc-id::
* /db/_design/design-doc/_list/list-name/view-name::
* /db/_design/design-doc/_list/list-name/other-ddoc/view-name::
* /db/_design/design-doc/_update/update-name::
* /db/_design/design-doc/_update/update-name/doc-id::
* /db/_design/design-doc/_rewrite/path::

/db/_design/design-doc/_info

* View Index Information::

/db/_design/design-doc/_view/view-name

* View Options::
* Querying Views and Indexes::
* Sorting Returned Rows::
* Using Limits and Skipping Rows::

Sorting Returned Rows

* Sorting order and startkey/endkey::
* Raw collation: Raw collation<2>.

Local (non-replicating) Documents

* /db/_local/id::


File: CouchDB.info,  Node: API Basics,  Next: Server<2>,  Up: API Reference<2>

10.1 API Basics
===============

The CouchDB API is the primary method of interfacing to a CouchDB
instance. Requests are made using HTTP and requests are used to request
information from the database, store new data, and perform views and
formatting of the information stored within the documents.

  Requests to the API can be categorised by the different areas of the
CouchDB system that you are accessing, and the HTTP method used to send
the request. Different methods imply different operations, for example
retrieval of information from the database is typically handled by the
`GET' operation, while updates are handled by either a `POST' or `PUT'
request. There are some differences between the information that must
be supplied for the different methods. For a guide to the basic HTTP
methods and request structure, see *note Request Format and Responses:
343.

  For nearly all operations, the submitted data, and the returned data
structure, is defined within a JavaScript Object Notation (JSON) object.
Basic information on the content and data types for JSON are provided in
*note JSON Basics: 104.

  Errors when accessing the CouchDB API are reported using standard HTTP
Status Codes. A guide to the generic codes returned by CouchDB are
provided in *note HTTP Status Codes: 344.

  When accessing specific areas of the CouchDB API, specific information
and examples on the HTTP methods and request, JSON structures, and error
codes are provided.

* Menu:

* Request Format and Responses::
* HTTP Headers::
* JSON Basics::
* HTTP Status Codes::


File: CouchDB.info,  Node: Request Format and Responses,  Next: HTTP Headers,  Up: API Basics

10.1.1 Request Format and Responses
-----------------------------------

CouchDB supports the following HTTP request methods:

   - `GET'

     Request the specified item. As with normal HTTP requests, the
     format of the URL defines what is returned. With CouchDB this can
     include static items, database documents, and configuration and
     statistical information. In most cases the information is returned
     in the form of a JSON document.

   - `HEAD'

     The `HEAD' method is used to get the HTTP header of a `GET'
     request without the body of the response.

   - `POST'

     Upload data. Within CouchDB `POST' is used to set values, including
     uploading documents, setting document values, and starting certain
     administration commands.

   - `PUT'

     Used to put a specified resource. In CouchDB `PUT' is used to
     create new objects, including databases, documents, views and
     design documents.

   - `DELETE'

     Deletes the specified resource, including documents, views, and
     design documents.

   - `COPY'

     A special method that can be used to copy documents and objects.

  If you use the an unsupported HTTP request type with a URL that does
not support the specified type, a 405 error will be returned, listing
the supported HTTP methods. For example:

    {
        "error":"method_not_allowed",
        "reason":"Only GET,HEAD allowed"
    }

The CouchDB design document API and the functions when returning HTML
(for example as part of a show or list) enables you to include custom
HTTP headers through the `headers' block of the return object.


File: CouchDB.info,  Node: HTTP Headers,  Next: JSON Basics,  Prev: Request Format and Responses,  Up: API Basics

10.1.2 HTTP Headers
-------------------

Because CouchDB uses HTTP for all communication, you need to ensure that
the correct HTTP headers are supplied (and processed on retrieval) so
that you get the right format and encoding. Different environments and
clients will be more or less strict on the effect of these HTTP headers
(especially when not present). Where possible you should be as specific
as possible.

* Menu:

* Request Headers::
* Response Headers::


File: CouchDB.info,  Node: Request Headers,  Next: Response Headers,  Up: HTTP Headers

10.1.2.1 Request Headers
........................

   - `Content-type'

     Specifies the content type of the information being supplied within
     the request. The specification uses MIME type specifications. For
     the majority of requests this will be JSON (`application/json').
     For some settings the MIME type will be plain text. When uploading
     attachments it should be the corresponding MIME type for the
     attachment or binary (`application/octet-stream').

     The use of the `Content-type' on a request is highly recommended.

   - `Accept'

     Specifies the list of accepted data types to be returned by the
     server (i.e. that are accepted/understandable by the client). The
     format should be a list of one or more MIME types, separated by
     colons.

     For the majority of requests the definition should be for JSON data
     (`application/json'). For attachments you can either specify the
     MIME type explicitly, or use `*/*' to specify that all file types
     are supported. If the `Accept' header is not supplied, then the
     `*/*' MIME type is assumed (i.e. client accepts all formats).

     The use of `Accept' in queries for CouchDB is not required, but is
     highly recommended as it helps to ensure that the data returned can
     be processed by the client.

     If you specify a data type using the `Accept' header, CouchDB will
     honor the specified type in the `Content-type' header field
     returned. For example, if you explicitly request `application/json'
     in the `Accept' of a request, the returned HTTP headers will use
     the value in the returned `Content-type' field.

     For example, when sending a request without an explicit `Accept'
     header, or when specifying `*/*':

         GET /recipes HTTP/1.1
         Host: couchdb:5984
         Accept: */*

     The returned headers are:

         Server: CouchDB (Erlang/OTP)
         Date: Thu, 13 Jan 2011 13:39:34 GMT
         Content-Type: text/plain;charset=utf-8
         Content-Length: 227
         Cache-Control: must-revalidate

     Note that the returned content type is `text/plain' even though the
     information returned by the request is in JSON format.

     Explicitly specifying the `Accept' header:

         GET /recipes HTTP/1.1
         Host: couchdb:5984
         Accept: application/json

     The headers returned include the `application/json' content type:

         Server: CouchDB (Erlang/OTP)
         Date: Thu, 13 Jan 2013 13:40:11 GMT
         Content-Type: application/json
         Content-Length: 227
         Cache-Control: must-revalidate




File: CouchDB.info,  Node: Response Headers,  Prev: Request Headers,  Up: HTTP Headers

10.1.2.2 Response Headers
.........................

Response headers are returned by the server when sending back content
and include a number of different header fields, many of which are
standard HTTP response header and have no significance to CouchDB
operation. The list of response headers important to CouchDB are listed
below.

   - `Content-type'

     Specifies the MIME type of the returned data. For most request, the
     returned MIME type is `text/plain'. All text is encoded in Unicode
     (UTF-8), and this is explicitly stated in the returned
     `Content-type', as `text/plain;charset=utf-8'.

   - `Cache-control'

     The cache control HTTP response header provides a suggestion for
     client caching mechanisms on how to treat the returned information.
     CouchDB typically returns the `must-revalidate', which indicates
     that the information should be revalidated if possible. This is
     used to ensure that the dynamic nature of the content is correctly
     updated.

   - `Content-length'

     The length (in bytes) of the returned content.

   - `Etag'

     The `Etag' HTTP header field is used to show the revision for a
     document, or a view.

     ETags have been assigned to a map/reduce group (the collection of
     views in a single design document). Any change to any of the
     indexes for those views would generate a new ETag for all view
     URLs in a single design doc, even if that specific view's results
     had not changed.

     Each `_view' URL has its own ETag which only gets updated when
     changes are made to the database that effect that index. If the
     index for that specific view does not change, that view keeps the
     original ETag head (therefore sending back 304 Not Modified more
     often).


File: CouchDB.info,  Node: JSON Basics,  Next: HTTP Status Codes,  Prev: HTTP Headers,  Up: API Basics

10.1.3 JSON Basics
------------------

The majority of requests and responses to CouchDB use the JavaScript
Object Notation (JSON) for formatting the content and structure of the
data and responses.

  JSON is used because it is the simplest and easiest to use solution
for working with data within a web browser, as JSON structures can be
evaluated and used as JavaScript objects within the web browser
environment. JSON also integrates with the server-side JavaScript used
within CouchDB.

  JSON supports the same basic types as supported by JavaScript, these
are:

   - Number (either integer or floating-point).

   - String; this should be enclosed by double-quotes and supports
     Unicode characters and backslash escaping. For example:

         "A String"


   - Boolean - a `true' or `false' value. You can use these strings
     directly. For example:

         { "value": true}


   - Array - a list of values enclosed in square brackets. For example:

         ["one", "two", "three"]


   - Object - a set of key/value pairs (i.e. an associative array, or
     hash). The key must be a string, but the value can be any of the
     supported JSON values. For example:

         {
            "servings" : 4,
            "subtitle" : "Easy to make in advance, and then cook when ready",
            "cooktime" : 60,
            "title" : "Chicken Coriander"
         }

     In CouchDB, the JSON object is used to represent a variety of
     structures, including the main CouchDB document.

  Parsing JSON into a JavaScript object is supported through the
`JSON.parse()' function in JavaScript, or through various libraries that
will perform the parsing of the content into a JavaScript object for
you. Libraries for parsing and generating JSON are available in many
languages, including Perl, Python, Ruby, Erlang and others.

     Warning: Care should be taken to ensure that your JSON structures
     are valid, invalid structures will cause CouchDB to return an HTTP
     status code of 500 (server error).

* Menu:

* Number Handling::


File: CouchDB.info,  Node: Number Handling,  Up: JSON Basics

10.1.3.1 Number Handling
........................

Developers and users new to computer handling of numbers often encounter
suprises when expecting that a number stored in JSON format does not
necessarily return as the same number as compared character by
character.

  Any numbers defined in JSON that contain a decimal point or exponent
will be passed through the Erlang VM's idea of the "double" data type.
Any numbers that are used in views will pass through the view server's
idea of a number (the common JavaScript case means even integers pass
through a double due to JavaScript's definition of a number).

  Consider this document that we write to CouchDB:

    {
      "_id":"30b3b38cdbd9e3a587de9b8122000cff",
      "number": 1.1
    }

Now let’s read that document back from CouchDB:

    {
      "_id":"30b3b38cdbd9e3a587de9b8122000cff",
      "_rev":"1-f065cee7c3fd93aa50f6c97acde93030",
      "number":1.1000000000000000888
    }

What happens is CouchDB is changing the textual representation of the
result of decoding what it was given into some numerical format. In most
cases this is an IEEE 754(1) double precision floating point number
which is exactly what almost all other languages use as well.

  What Erlang does a bit differently than other languages is that it
does not attempt to pretty print the resulting output to use the
shortest number of characters. For instance, this is why we have this
relationship:

    ejson:encode(ejson:decode(<<"1.1">>)).
    <<"1.1000000000000000888">>

What can be confusing here is that internally those two formats decode
into the same IEEE-754 representation. And more importantly, it will
decode into a fairly close representation when passed through all major
parsers that we know about.

  While we've only been discussing cases where the textual
representation changes, another important case is when an input value
contains more precision than can actually represented in a double.
(You could argue that this case is actually "losing" data if you don't
accept that numbers are stored in doubles).

  Here's a log for a couple of the more common JSON libraries that
happen to be on the author's machine:

  Spidermonkey:

    $ js -h 2>&1 | head -n 1
    JavaScript-C 1.8.5 2011-03-31
    $ js
    js> JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
    "1.0123456789012346"
    js> var f = JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
    js> JSON.stringify(JSON.parse(f))
    "1.0123456789012346"

Node:

    $ node -v
    v0.6.15
    $ node
    JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
    '1.0123456789012346'
    var f = JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
    undefined
    JSON.stringify(JSON.parse(f))
    '1.0123456789012346'

Python:

    $ python
    Python 2.7.2 (default, Jun 20 2012, 16:23:33)
    [GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    import json
    json.dumps(json.loads("1.01234567890123456789012345678901234567890"))
    '1.0123456789012346'
    f = json.dumps(json.loads("1.01234567890123456789012345678901234567890"))
    json.dumps(json.loads(f))
    '1.0123456789012346'

Ruby:

    $ irb --version
    irb 0.9.5(05/04/13)
    require 'JSON'
    => true
    JSON.dump(JSON.load("[1.01234567890123456789012345678901234567890]"))
    => "[1.01234567890123]"
    f = JSON.dump(JSON.load("[1.01234567890123456789012345678901234567890]"))
    => "[1.01234567890123]"
    JSON.dump(JSON.load(f))
    => "[1.01234567890123]"


     Note: A small aside on Ruby, it requires a top level object or
     array, so I just wrapped the value. Should be obvious it doesn't
     affect the result of parsing the number though.

  Ejson (CouchDB's current parser) at CouchDB sha 168a663b:

    $ ./utils/run -i
    Erlang R14B04 (erts-5.8.5) [source] [64-bit] [smp:2:2] [rq:2]
    [async-threads:4] [hipe] [kernel-poll:true]

    Eshell V5.8.5  (abort with ^G)
    1> ejson:encode(ejson:decode(<<"1.01234567890123456789012345678901234567890">>)).
    <<"1.0123456789012346135">>
    2> F = ejson:encode(ejson:decode(<<"1.01234567890123456789012345678901234567890">>)).
    <<"1.0123456789012346135">>
    3> ejson:encode(ejson:decode(F)).
    <<"1.0123456789012346135">>

As you can see they all pretty much behave the same except for Ruby
actually does appear to be losing some precision over the other
libraries.

  The astute observer will notice that ejson (the CouchDB JSON library)
reported an extra three digits. While its tempting to think that this
is due to some internal difference, its just a more specific case of
the 1.1 input as described above.

  The important point to realize here is that a double can only hold a
finite number of values. What we're doing here is generating a string
that when passed through the "standard" floating point parsing
algorithms (ie, `strtod') will result in the same bit pattern in memory
as we started with. Or, slightly different, the bytes in a JSON
serialized number are chosen such that they refer to a single specific
value that a double can represent.

  The important point to understand is that we're mapping from one
infinite set onto a finite set. An easy way to see this is by
reflecting on this:

    1.0 == 1.00 == 1.000 = 1.(infinite zeroes)

Obviously a computer can't hold infinite bytes so we have to decimate
our infinitely sized set to a finite set that can be represented
concisely.

  The game that other JSON libraries are playing is merely:

  "How few characters do I have to use to select this specific value
for a double"

  And that game has lots and lots of subtle details that are difficult
to duplicate in C without a significant amount of effort (it took
Python over a year to get it sorted with their fancy build systems that
automatically run on a number of different architectures).

  Hopefully we've shown that CouchDB is not doing anything "funky" by
changing input. Its behaving the same as any other common JSON library
does, its just not pretty printing its output.

  On the other hand, if you actually are in a position where an IEEE-754
double is not a satisfactory datatype for your numbers, then the answer
as has been stated is to not pass your numbers through this
representation. In JSON this is accomplished by encoding them as a
string or by using integer types (although integer types can still bite
you if you use a platform that has a different integer representation
than normal, ie, JavaScript).

  Further information can be found easily, including the Floating Point
Guide(2), and  David Goldberg's Reference(3).

  Also, if anyone is really interested in changing this behavior, we're
all ears for contributions to jiffy(4) (which is theoretically going to
replace ejson when we get around to updating the build system). The
places we've looked for inspiration are TCL and Python. If you know a
decent implementation of this float printing algorithm give us a holler.

  ---------- Footnotes ----------

  (1) https://en.wikipedia.org/wiki/IEEE_754-2008

  (2) http://floating-point-gui.de/

  (3) http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html

  (4) https://github.com/davisp/jiffy


File: CouchDB.info,  Node: HTTP Status Codes,  Prev: JSON Basics,  Up: API Basics

10.1.4 HTTP Status Codes
------------------------

With the interface to CouchDB working through HTTP, error codes and
statuses are reported using a combination of the HTTP status code
number, and corresponding data in the body of the response data.

  A list of the error codes returned by CouchDB, and generic
descriptions of the related errors are provided below. The meaning of
different status codes for specific request types are provided in the
corresponding API call reference.

   - `200 - OK'

     Request completed successfully.

   - `201 - Created'

     Document created successfully.

   - `202 - Accepted'

     Request has been accepted, but the corresponding operation may not
     have completed. This is used for background operations, such as
     database compaction.

   - `304 - Not Modified'

     The additional content requested has not been modified. This is
     used with the ETag system to identify the version of information
     returned.

   - `400 - Bad Request'

     Bad request structure. The error can indicate an error with the
     request URL, path or headers. Differences in the supplied MD5 hash
     and content also trigger this error, as this may indicate message
     corruption.

   - `401 - Unauthorized'

     The item requested was not available using the supplied
     authorization, or authorization was not supplied.

   - `403 - Forbidden'

     The requested item or operation is forbidden.

   - `404 - Not Found'

     The requested content could not be found. The content will include
     further information, as a JSON object, if available. The structure
     will contain two keys, `error' and `reason'. For example:

         {"error":"not_found","reason":"no_db_file"}


   - `405 - Resource Not Allowed'

     A request was made using an invalid HTTP request type for the URL
     requested. For example, you have requested a `PUT' when a `POST'
     is required. Errors of this type can also triggered by invalid URL
     strings.

   - `406 - Not Acceptable'

     The requested content type is not supported by the server.

   - `409 - Conflict'

     Request resulted in an update conflict.

   - `412 - Precondition Failed'

     The request headers from the client and the capabilities of the
     server do not match.

   - `415 - Bad Content Type'

     The content types supported, and the content type of the
     information being requested or submitted indicate that the content
     type is not supported.

   - `416 - Requested Range Not Satisfiable'

     The range specified in the request header cannot be satisfied by
     the server.

   - `417 - Expectation Failed'

     When sending documents in bulk, the bulk load operation failed.

   - `500 - Internal Server Error'

     The request was invalid, either because the supplied JSON was
     invalid, or invalid information was supplied as part of the
     request.


File: CouchDB.info,  Node: Server<2>,  Next: Databases<2>,  Prev: API Basics,  Up: API Reference<2>

10.2 Server
===========

The CouchDB server interface provides the basic interface to a CouchDB
server for obtaining CouchDB information and getting and setting
configuration information.

* Menu:

* /::
* /_active_tasks::
* /_all_dbs::
* /_db_updates::
* /_log::
* /_replicate::
* /_restart::
* /_stats::
* /_utils::
* /_uuids::
* /favicon.ico: /favicon ico.
* Authentication: Authentication<2>.
* Configuration::


File: CouchDB.info,  Node: /,  Next: /_active_tasks,  Up: Server<2>

10.2.1 `/'
----------

 -- Get: GET /
     Accessing the root of a CouchDB instance returns meta information
     about the instance. The response is a JSON structure containing
     information about the server, including a welcome message and the
     version of the server.

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(3) - Request completed successfully

     *Request*:

         GET / HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 179
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 06:33:33 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "couchdb": "Welcome",
             "uuid": "85fb71bf700c17267fef77535820e371",
             "vendor": {
                 "name": "The Apache Software Foundation",
                 "version": "1.3.1"
             },
             "version": "1.3.1"
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1


File: CouchDB.info,  Node: /_active_tasks,  Next: /_all_dbs,  Prev: /,  Up: Server<2>

10.2.2 `/_active_tasks'
-----------------------

 -- Get: GET /_active_tasks
     List of running tasks, including the task type, name, status and
     process ID. The result is a JSON array of the currently running
     tasks, with each task being described with a single object.
     Depending on operation type set of response object fields might be
     different.

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *changes_done* (_number_) - Processed changes

             * *database* (_string_) - Source database

             * *pid* (_string_) - Process ID

             * *progress* (_number_) - Current percentage progress

             * *started_on* (_number_) - Task start time as unix
               timestamp

             * *status* (_string_) - Task status message

             * *task* (_string_) - Task name

             * *total_changes* (_number_) - Total changes to process

             * *type* (_string_) - Operation Type

             * *updated_on* (_number_) - Unix timestamp of last
               operation update

          Status Codes:

             * 200 OK(3) - Request completed successfully

             * 401 Unauthorized(4) - CouchDB Server Administrator
               privileges required

     *Request*:

         GET /_active_tasks HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 1690
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 06:37:31 GMT
         Server: CouchDB (Erlang/OTP)

         [
             {
                 "changes_done": 64438,
                 "database": "mailbox",
                 "pid": "<0.12986.1>",
                 "progress": 84,
                 "started_on": 1376116576,
                 "total_changes": 76215,
                 "type": "database_compaction",
                 "updated_on": 1376116619
             },
             {
                 "changes_done": 14443,
                 "database": "mailbox",
                 "design_document": "c9753817b3ba7c674d92361f24f59b9f",
                 "pid": "<0.10461.3>",
                 "progress": 18,
                 "started_on": 1376116621,
                 "total_changes": 76215,
                 "type": "indexer",
                 "updated_on": 1376116650
             },
             {
                 "changes_done": 5454,
                 "database": "mailbox",
                 "design_document": "_design/meta",
                 "pid": "<0.6838.4>",
                 "progress": 7,
                 "started_on": 1376116632,
                 "total_changes": 76215,
                 "type": "indexer",
                 "updated_on": 1376116651
             },
             {
                 "checkpointed_source_seq": 68585,
                 "continuous": false,
                 "doc_id": null,
                 "doc_write_failures": 0,
                 "docs_read": 4524,
                 "docs_written": 4524,
                 "missing_revisions_found": 4524,
                 "pid": "<0.1538.5>",
                 "progress": 44,
                 "replication_id": "9bc1727d74d49d9e157e260bb8bbd1d5",
                 "revisions_checked": 4524,
                 "source": "mailbox",
                 "source_seq": 154419,
                 "started_on": 1376116644,
                 "target": "http://mailsrv:5984/mailbox",
                 "type": "replication",
                 "updated_on": 1376116651
             }
         ]



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2


File: CouchDB.info,  Node: /_all_dbs,  Next: /_db_updates,  Prev: /_active_tasks,  Up: Server<2>

10.2.3 `/_all_dbs'
------------------

 -- Get: GET /_all_dbs
     Returns a list of all the databases in the CouchDB instance.

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(3) - Request completed successfully

     *Request*:

         GET /_all_dbs HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 52
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 06:57:48 GMT
         Server: CouchDB (Erlang/OTP)

         [
            "_users",
            "contacts",
            "docs",
            "invoices",
            "locations"
         ]



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1


File: CouchDB.info,  Node: /_db_updates,  Next: /_log,  Prev: /_all_dbs,  Up: Server<2>

10.2.4 `/_db_updates'
---------------------

New in version 1.4.

 -- Get: GET /_db_updates
     Returns a list of all database events in the CouchDB instance.

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Query Parameters:

             * *feed* (_string_) -

                  - *longpoll*: Closes the connection after the first
                    event.

                  - *continuous*: Send a line of JSON per event. Keeps
                    the socket open until `timeout'.

                  - *eventsource*: Like, `continuous', but sends the
                    events in EventSource(2) format.

             * *timeout* (_number_) - Number of seconds until CouchDB
               closes the connection.  Default is `60'.

             * *heartbeat* (_boolean_) - Whether CouchDB will send a
               newline character (`\n') on `timeout'. Default is `true'.

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * Transfer-Encoding(4) - `chunked'

          Response JSON Object:

             * *db_name* (_string_) - Database name

             * *ok* (_boolean_) - Event operation status

             * *type* (_string_) - A database event is one of
               `created', `updated', `deleted'

          Status Codes:

             * 200 OK(5) - Request completed successfully

             * 401 Unauthorized(6) - CouchDB Server Administrator
               privileges required

     *Request*:

         GET /_db_updates HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 07:02:41 GMT
         Server: CouchDB (Erlang/OTP)
         Transfer-Encoding: chunked

         {
             "db_name": "mailbox",
             "ok": true,
             "type": "created"
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://dev.w3.org/html5/eventsource/

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2


File: CouchDB.info,  Node: /_log,  Next: /_replicate,  Prev: /_db_updates,  Up: Server<2>

10.2.5 `/_log'
--------------

 -- Get: GET /_log
     Gets the CouchDB log, equivalent to accessing the local log file
     of the corresponding CouchDB instance.

          Request Headers:

             * Accept(1) -

                  - `text/plain'


          Query Parameters:

             * *bytes* (_number_) - Bytes to be returned. Default is
               `1000'.

             * *offset* (_number_) - Offset in bytes where the log tail
               should be started.  Default is `0'.

          Response Headers:

             * Content-Type(2) - `text/plain; charset=utf-8'

             * Transfer-Encoding(3) - `chunked'

          Status Codes:

             * 200 OK(4) - Request completed successfully

             * 401 Unauthorized(5) - CouchDB Server Administrator
               privileges required

     *Request*:

         GET /_log HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         [Wed, 27 Oct 2010 10:49:42 GMT] [info] [<0.23338.2>] 192.168.0.2 - - 'PUT' /authdb 401
         [Wed, 27 Oct 2010 11:02:19 GMT] [info] [<0.23428.2>] 192.168.0.116 - - 'GET' /recipes/FishStew 200
         [Wed, 27 Oct 2010 11:02:19 GMT] [info] [<0.23428.2>] 192.168.0.116 - - 'GET' /_session 200
         [Wed, 27 Oct 2010 11:02:19 GMT] [info] [<0.24199.2>] 192.168.0.116 - - 'GET' / 200
         [Wed, 27 Oct 2010 13:03:38 GMT] [info] [<0.24207.2>] 192.168.0.116 - - 'GET' /_log?offset=5 200



  If you want to pick out specific parts of the log information you can
use the `bytes' argument, which specifies the number of bytes to be
returned, and `offset', which specifies where the reading of the log
should start, counted back from the end. For example, if you use the
following request:

    GET /_log?bytes=500&offset=2000

Reading of the log will start at 2000 bytes from the end of the log, and
500 bytes will be shown.

  *How bytes/offset works?*

  CouchDB reads specified amount of `bytes' from the end of log file,
jumping to `offset' bytes towards the beginning of the file first:

     Log File    FilePos
     ----------
    |          |  10
    |          |  20
    |          |  30
    |          |  40
    |          |  50
    |          |  60
    |          |  70 -- Bytes = 20  --
    |          |  80                 | Chunk
    |          |  90 -- Offset = 10 --
    |__________| 100


  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2


File: CouchDB.info,  Node: /_replicate,  Next: /_restart,  Prev: /_log,  Up: Server<2>

10.2.6 `/_replicate'
--------------------

 -- Post: POST /_replicate
     Request, configure, or stop, a replication operation.

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Request JSON Object:

             * *cancel* (_boolean_) - Cancels the replication

             * *continuous* (_boolean_) - Configure the replication to
               be continuous

             * *create_target* (_boolean_) - Creates the target
               database.  Required administrator's privileges on target
               server.

             * *doc_ids* (_array_) - Array of document IDs to be
               synchronized

             * *proxy* (_string_) - Address of a proxy server through
               which replication should occur (protocol can be "http"
               or "socks5")

             * *source* (_string_) - Source database name or URL

             * *target* (_string_) - Target database name or URL

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *history* (_array_) - Replication history (see below)

             * *ok* (_boolean_) - Replication status

             * *replication_id_version* (_number_) - Replication
               protocol version

             * *session_id* (_string_) - Unique session ID

             * *source_last_seq* (_number_) - Last sequence number read
               from source database

          Status Codes:

             * 200 OK(4) - Replication request successfully completed

             * 202 Accepted(5) - Continuous replication request has
               been accepted

             * 400 Bad Request(6) - Invalid JSON data

             * 401 Unauthorized(7) - CouchDB Server Administrator
               privileges required

             * 404 Not Found(8) - Either the source or target DB is not
               found or attempt to cancel unknown replication task

             * 500 Internal Server Error(9) - JSON specification was
               invalid

     The specification of the replication request is controlled through
     the JSON content of the request. The JSON should be an object with
     the fields defining the source, target and other options.

     The `Replication history' is an array of objects with following
     structure:

          JSON Object:

             * *doc_write_failures* (_number_) - Number of document
               write failures

             * *docs_read* (_number_) - Number of documents read

             * *docs_written* (_number_) - Number of documents written
               to target

             * *end_last_seq* (_number_) - Last sequence number in
               changes stream

             * *end_time* (_string_) - Date/Time replication operation
               completed in RFC 2822(10) format

             * *missing_checked* (_number_) - Number of missing
               documents checked

             * *missing_found* (_number_) - Number of missing documents
               found

             * *recorded_seq* (_number_) - Last recorded sequence number

             * *session_id* (_string_) - Session ID for this
               replication operation

             * *start_last_seq* (_number_) - First sequence number in
               changes stream

             * *start_time* (_string_) - Date/Time replication
               operation started in RFC 2822(11) format

     *Request*

         POST /_replicate HTTP/1.1
         Accept: application/json
         Content-Length: 36
         Content-Type: application/json
         Host: localhost:5984

         {
             "source": "db_a",
             "target": "db_b"
         }

     *Response*

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 692
         Content-Type: application/json
         Date: Sun, 11 Aug 2013 20:38:50 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "history": [
                 {
                     "doc_write_failures": 0,
                     "docs_read": 10,
                     "docs_written": 10,
                     "end_last_seq": 28,
                     "end_time": "Sun, 11 Aug 2013 20:38:50 GMT",
                     "missing_checked": 10,
                     "missing_found": 10,
                     "recorded_seq": 28,
                     "session_id": "142a35854a08e205c47174d91b1f9628",
                     "start_last_seq": 1,
                     "start_time": "Sun, 11 Aug 2013 20:38:50 GMT"
                 },
                 {
                     "doc_write_failures": 0,
                     "docs_read": 1,
                     "docs_written": 1,
                     "end_last_seq": 1,
                     "end_time": "Sat, 10 Aug 2013 15:41:54 GMT",
                     "missing_checked": 1,
                     "missing_found": 1,
                     "recorded_seq": 1,
                     "session_id": "6314f35c51de3ac408af79d6ee0c1a09",
                     "start_last_seq": 0,
                     "start_time": "Sat, 10 Aug 2013 15:41:54 GMT"
                 }
             ],
             "ok": true,
             "replication_id_version": 3,
             "session_id": "142a35854a08e205c47174d91b1f9628",
             "source_last_seq": 28
         }



* Menu:

* Replication Operation::
* Specifying the Source and Target Database::
* Single Replication::
* Continuous Replication::
* Canceling Continuous Replication::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1

  (10) http://tools.ietf.org/html/rfc2822.html

  (11) http://tools.ietf.org/html/rfc2822.html


File: CouchDB.info,  Node: Replication Operation,  Next: Specifying the Source and Target Database,  Up: /_replicate

10.2.6.1 Replication Operation
..............................

The aim of the replication is that at the end of the process, all active
documents on the source database are also in the destination database
and all documents that were deleted in the source databases are also
deleted (if they exist) on the destination database.

  Replication can be described as either push or pull replication:

   - _Pull replication_ is where the `source' is the remote CouchDB
     instance, and the `target' is the local database.

     Pull replication is the most useful solution to use if your source
     database has a permanent IP address, and your destination (local)
     database may have a dynamically assigned IP address (for example,
     through DHCP). This is particularly important if you are
     replicating to a mobile or other device from a central server.

   - _Push replication_ is where the `source' is a local database, and
     `target' is a remote database.


File: CouchDB.info,  Node: Specifying the Source and Target Database,  Next: Single Replication,  Prev: Replication Operation,  Up: /_replicate

10.2.6.2 Specifying the Source and Target Database
..................................................

You must use the URL specification of the CouchDB database if you want
to perform replication in either of the following two situations:

   - Replication with a remote database (i.e. another instance of
     CouchDB on the same host, or a different host)

   - Replication with a database that requires authentication

  For example, to request replication between a database local to the
CouchDB instance to which you send the request, and a remote database
you might use the following request:

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
       "source" : "recipes",
       "target" : "http://coucdb-remote:5984/recipes",
    }

In all cases, the requested databases in the `source' and `target'
specification must exist. If they do not, an error will be returned
within the JSON object:

    {
       "error" : "db_not_found"
       "reason" : "could not open http://couchdb-remote:5984/ol1ka/",
    }

You can create the target database (providing your user credentials
allow it) by adding the `create_target' field to the request object:

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
       "create_target" : true
       "source" : "recipes",
       "target" : "http://couchdb-remote:5984/recipes",
    }

The `create_target' field is not destructive. If the database already
exists, the replication proceeds as normal.


File: CouchDB.info,  Node: Single Replication,  Next: Continuous Replication,  Prev: Specifying the Source and Target Database,  Up: /_replicate

10.2.6.3 Single Replication
...........................

You can request replication of a database so that the two databases can
be synchronized. By default, the replication process occurs one time and
synchronizes the two databases together. For example, you can request a
single synchronization between two databases by supplying the `source'
and `target' fields within the request JSON content.

    POST http://couchdb:5984/_replicate
    Accept: application/json
    Content-Type: application/json

    {
       "source" : "recipes",
       "target" : "recipes-snapshot",
    }

In the above example, the databases `recipes' and `recipes-snapshot'
will be synchronized. These databases are local to the CouchDB instance
where the request was made. The response will be a JSON structure
containing the success (or failure) of the synchronization process, and
statistics about the process:

    {
       "ok" : true,
       "history" : [
          {
             "docs_read" : 1000,
             "session_id" : "52c2370f5027043d286daca4de247db0",
             "recorded_seq" : 1000,
             "end_last_seq" : 1000,
             "doc_write_failures" : 0,
             "start_time" : "Thu, 28 Oct 2010 10:24:13 GMT",
             "start_last_seq" : 0,
             "end_time" : "Thu, 28 Oct 2010 10:24:14 GMT",
             "missing_checked" : 0,
             "docs_written" : 1000,
             "missing_found" : 1000
          }
       ],
       "session_id" : "52c2370f5027043d286daca4de247db0",
       "source_last_seq" : 1000
    }



File: CouchDB.info,  Node: Continuous Replication,  Next: Canceling Continuous Replication,  Prev: Single Replication,  Up: /_replicate

10.2.6.4 Continuous Replication
...............................

Synchronization of a database with the previously noted methods happens
only once, at the time the replicate request is made. To have the target
database permanently replicated from the source, you must set the
`continuous' field of the JSON object within the request to true.

  With continuous replication changes in the source database are
replicated to the target database in perpetuity until you specifically
request that replication ceases.

    POST http://couchdb:5984/_replicate
    Accept: application/json
    Content-Type: application/json

    {
       "continuous" : true
       "source" : "recipes",
       "target" : "http://couchdb-remote:5984/recipes",
    }

Changes will be replicated between the two databases as long as a
network connection is available between the two instances.

     Note: Two keep two databases synchronized with each other, you
     need to set replication in both directions; that is, you must
     replicate from `source' to `target', and separately from `target'
     to `source'.


File: CouchDB.info,  Node: Canceling Continuous Replication,  Prev: Continuous Replication,  Up: /_replicate

10.2.6.5 Canceling Continuous Replication
.........................................

You can cancel continuous replication by adding the `cancel' field to
the JSON request object and setting the value to true. Note that the
structure of the request must be identical to the original for the
cancellation request to be honoured. For example, if you requested
continuous replication, the cancellation request must also contain the
`continuous' field.

  For example, the replication request:

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
       "source" : "recipes",
       "target" : "http://couchdb-remote:5984/recipes",
       "create_target" : true,
       "continuous" : true
    }

Must be canceled using the request:

    POST http://couchdb:5984/_replicate
    Accept: application/json
    Content-Type: application/json

    {
        "cancel" : true,
        "continuous" : true
        "create_target" : true,
        "source" : "recipes",
        "target" : "http://couchdb-remote:5984/recipes",
    }

Requesting cancellation of a replication that does not exist results in
a 404 error.


File: CouchDB.info,  Node: /_restart,  Next: /_stats,  Prev: /_replicate,  Up: Server<2>

10.2.7 `/_restart'
------------------

 -- Post: POST /_restart
     Restarts the CouchDB instance. You must be authenticated as a user
     with administration privileges for this to work.

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 202 Accepted(4) - Server goes to restart (there is no
               guarantee that it will be alive after)

             * 401 Unauthorized(5) - CouchDB Server Administrator
               privileges required

             * 415 Unsupported Media Type(6) - Bad request`s
               Content-Type(7)

     *Request*:

         POST /_restart HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 202 Accepted
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 11:33:50 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "ok": true
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17


File: CouchDB.info,  Node: /_stats,  Next: /_utils,  Prev: /_restart,  Up: Server<2>

10.2.8 `/_stats'
----------------

 -- Get: GET /_stats
     The `_stats' resource returns a JSON object containing the
     statistics for the running server. The object is structured with
     top-level sections collating the statistics for a range of
     entries, with each individual statistic being easily identified,
     and the content of each statistic is self-describing

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(3) - Request completed successfully

     *Request*:

         GET /_stats/couchdb/request_time HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 187
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 11:41:11 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "couchdb": {
                 "request_time": {
                     "current": 21.0,
                     "description": "length of a request inside CouchDB without MochiWeb",
                     "max": 19.0,
                     "mean": 7.0,
                     "min": 1.0,
                     "stddev": 10.392,
                     "sum": 21.0
                 }
             }
         }



  The fields provide the current, minimum and maximum, and a collection
of statistical means and quantities. The quantity in each case is not
defined, but the descriptions below provide

  The statistics are divided into the following top-level sections:

* Menu:

* couchdb::
* httpd_request_methods::
* httpd_status_codes::
* httpd::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1


File: CouchDB.info,  Node: couchdb,  Next: httpd_request_methods,  Up: /_stats

10.2.8.1 `couchdb'
..................

Describes statistics specific to the internals of CouchDB

Statistic ID                  Description                                                 Unit
--------------------------------------------------------------------------------------------------------------- 
`auth_cache_hits'             Number of authentication cache hits                         number
`auth_cache_misses'           Number of authentication cache misses                       number
`database_reads'              Number of times a document was read from a database         number
`database_writes'             Number of times a database was changed                      number
`open_databases'              Number of open databases                                    number
`open_os_files'               Number of file descriptors CouchDB has open                 number
`request_time'                Length of a request inside CouchDB without MochiWeb         milliseconds


File: CouchDB.info,  Node: httpd_request_methods,  Next: httpd_status_codes,  Prev: couchdb,  Up: /_stats

10.2.8.2 `httpd_request_methods'
................................

Statistic ID         Description                            Unit
--------------------------------------------------------------------------- 
`COPY'               Number of HTTP COPY requests           number
`DELETE'             Number of HTTP DELETE requests         number
`GET'                Number of HTTP GET requests            number
`HEAD'               Number of HTTP HEAD requests           number
`POST'               Number of HTTP POST requests           number
`PUT'                Number of HTTP PUT requests            number


File: CouchDB.info,  Node: httpd_status_codes,  Next: httpd,  Prev: httpd_request_methods,  Up: /_stats

10.2.8.3 `httpd_status_codes'
.............................

Statistic ID         Description                                                Unit
----------------------------------------------------------------------------------------------- 
`200'                Number of HTTP 200 OK responses                            number
`201'                Number of HTTP 201 Created responses                       number
`202'                Number of HTTP 202 Accepted responses                      number
`301'                Number of HTTP 301 Moved Permanently responses             number
`304'                Number of HTTP 304 Not Modified responses                  number
`400'                Number of HTTP 400 Bad Request responses                   number
`401'                Number of HTTP 401 Unauthorized responses                  number
`403'                Number of HTTP 403 Forbidden responses                     number
`404'                Number of HTTP 404 Not Found responses                     number
`405'                Number of HTTP 405 Method Not Allowed responses            number
`409'                Number of HTTP 409 Conflict responses                      number
`412'                Number of HTTP 412 Precondition Failed responses           number
`500'                Number of HTTP 500 Internal Server Error responses         number


File: CouchDB.info,  Node: httpd,  Prev: httpd_status_codes,  Up: /_stats

10.2.8.4 `httpd'
................

Statistic ID                           Description                                        Unit
--------------------------------------------------------------------------------------------------------- 
`bulk_requests'                        Number of bulk requests                            number
`clients_requesting_changes'           Number of clients for continuous _changes          number
`requests'                             Number of HTTP requests                            number
`temporary_view_reads'                 Number of temporary view reads                     number
`view_reads'                           Number of view reads                               number

  You can also access individual statistics by quoting the statistics
sections and statistic ID as part of the URL path. For example, to get
the `request_time' statistics, you can use:

    GET /_stats/couchdb/request_time

This returns an entire statistics object, as with the full request, but
containing only the request individual statistic. Hence, the returned
structure is as follows:

    {
       "couchdb" : {
          "request_time" : {
             "stddev" : 7454.305,
             "min" : 1,
             "max" : 34185,
             "current" : 34697.803,
             "mean" : 1652.276,
             "sum" : 34697.803,
             "description" : "length of a request inside CouchDB without MochiWeb"
          }
       }
    }



File: CouchDB.info,  Node: /_utils,  Next: /_uuids,  Prev: /_stats,  Up: Server<2>

10.2.9 `/_utils'
----------------

 -- Get: GET /_utils
     Accesses the built-in Futon administration interface for CouchDB.

          Response Headers:

             * Location(1) - New URI location

          Status Codes:

             * 301 Moved Permanently(2) - Redirects to *note GET
               /_utils/: 11.

 -- Get: GET /_utils/
          Response Headers:

             * Content-Type(3) - `text/html'

             * Last-Modified(4) - Static files modification timestamp

          Status Codes:

             * 200 OK(5) - Request completed successfully

---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.2

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1


File: CouchDB.info,  Node: /_uuids,  Next: /favicon ico,  Prev: /_utils,  Up: Server<2>

10.2.10 `/_uuids'
-----------------

Changed in version 1.5.1.

 -- Get: GET /_uuids
     Requests one or more Universally Unique Identifiers (UUIDs) from
     the CouchDB instance. The response is a JSON object providing a
     list of UUIDs.

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Query Parameters:

             * *count* (_number_) - Number of UUIDs to return. Default
               is `1'.

          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * ETag(3) - Response hash

          Status Codes:

             * 200 OK(4) - Request completed successfully

             * 403 Forbidden(5) - Requested more UUIDs than is *note
               allowed: eb. to retrieve

     *Request*:

         GET /_uuids?count=10 HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Content-Length: 362
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 11:46:25 GMT
         ETag: "DGRWWQFLUDWN5MRKSLKQ425XV"
         Expires: Fri, 01 Jan 1990 00:00:00 GMT
         Pragma: no-cache
         Server: CouchDB (Erlang/OTP)

         {
             "uuids": [
                 "75480ca477454894678e22eec6002413",
                 "75480ca477454894678e22eec600250b",
                 "75480ca477454894678e22eec6002c41",
                 "75480ca477454894678e22eec6003b90",
                 "75480ca477454894678e22eec6003fca",
                 "75480ca477454894678e22eec6004bef",
                 "75480ca477454894678e22eec600528f",
                 "75480ca477454894678e22eec6005e0b",
                 "75480ca477454894678e22eec6006158",
                 "75480ca477454894678e22eec6006161"
             ]
         }



  The UUID type is determined by the *note UUID algorithm: ea. setting
in the CouchDB configuration.

  The UUID type may be changed at any time through the *note
Configuration API: 369. For example, the UUID type could be changed to
`random' by sending this HTTP request:

    PUT http://couchdb:5984/_config/uuids/algorithm
    Content-Type: application/json
    Accept: */*

    "random"

You can verify the change by obtaining a list of UUIDs:

    {
       "uuids" : [
          "031aad7b469956cf2826fcb2a9260492",
          "6ec875e15e6b385120938df18ee8e496",
          "cff9e881516483911aa2f0e98949092d",
          "b89d37509d39dd712546f9510d4a9271",
          "2e0dbf7f6c4ad716f21938a016e4e59f"
       ]
    }


  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4


File: CouchDB.info,  Node: /favicon ico,  Next: Authentication<2>,  Prev: /_uuids,  Up: Server<2>

10.2.11 `/favicon.ico'
----------------------

 -- Get: GET /favicon.ico
     Binary content for the `favicon.ico' site icon.

          Response Headers:

             * Content-Type(1) - `image/x-icon'

          Status Codes:

             * 200 OK(2) - Request completed successfully

             * 404 Not Found(3) - The requested content could not be
               found

---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5


File: CouchDB.info,  Node: Authentication<2>,  Next: Configuration,  Prev: /favicon ico,  Up: Server<2>

10.2.12 Authentication
----------------------

Interfaces for obtaining session and authorization data.

     Note: We're also strongly recommend you to *note setup SSL: 16e.
     to improve all authentication methods security.

* Menu:

* Basic Authentication: Basic Authentication<2>.
* Cookie Authentication: Cookie Authentication<2>.
* Proxy Authentication::
* OAuth Authentication::


File: CouchDB.info,  Node: Basic Authentication<2>,  Next: Cookie Authentication<2>,  Up: Authentication<2>

10.2.12.1 Basic Authentication
..............................

Basic authentication(1) ( RFC 2617(2)) is a quick and simple way to
authenticate with CouchDB. The main drawback is the need to send user
credentials with each request which may be insecure and could hurt
operation performance (since CouchDB must compute password hash with
every request):

  *Request*:

    GET / HTTP/1.1
    Accept: application/json
    Authorization: Basic cm9vdDpyZWxheA==
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 177
    Content-Type: application/json
    Date: Mon, 03 Dec 2012 00:44:47 GMT
    Server: CouchDB (Erlang/OTP)

    {
      "couchdb":"Welcome",
      "uuid":"0a959b9b8227188afc2ac26ccdf345a6",
      "version":"1.3.0",
      "vendor": {
        "version":"1.3.0",
        "name":"The Apache Software Foundation"
      }
    }


  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Basic_access_authentication

  (2) http://tools.ietf.org/html/rfc2617.html


File: CouchDB.info,  Node: Cookie Authentication<2>,  Next: Proxy Authentication,  Prev: Basic Authentication<2>,  Up: Authentication<2>

10.2.12.2 Cookie Authentication
...............................

For cookie authentication ( RFC 2109(1)) CouchDB generates a token that
the client can use for the next few requests to CouchDB. Tokens are
valid until a timeout. When CouchDB sees a valid token in a subsequent
request, it will authenticate user by this token without requesting the
password again. By default, cookies are valid for 10 minutes, but it's
*note adjustable: 67. Also it's possible to make cookies *note
persistent: 5c.

  To obtain the first token and thus authenticate a user for the first
time, the `username' and `password' must be sent to the *note _session
API: 172.

* Menu:

* /_session::

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2109.html


File: CouchDB.info,  Node: /_session,  Up: Cookie Authentication<2>

10.2.12.3 `/_session'
.....................

 -- Post: POST /_session
     Initiates new session for specified user credentials by providing
     `Cookie' value.

          Request Headers:

             * Content-Type(1) -

                  - `application/x-www-form-urlencoded'

                  - `application/json'


          Query Parameters:

             * *next* (_string_) - Enforces redirect after successful
               login to the specified location. This location is
               relative from server root. _Optional_.

          Form Parameters:

             * *name* - User name

             * *password* - Password

          Response Headers:

             * Set-Cookie(2) - Authorization token

          Response JSON Object:

             * *ok* (_boolean_) - Operation status

             * *name* (_string_) - Username

             * *roles* (_array_) - List of user roles

          Status Codes:

             * 200 OK(3) - Successfully authenticated

             * 302 Found(4) - Redirect after successful authentication

             * 401 Unauthorized(5) - Username or password wasn't
               recognized

     *Request*:

         POST /_session HTTP/1.1
         Accept: application/json
         Content-Length: 24
         Content-Type: application/x-www-form-urlencoded
         Host: localhost:5984

         name=root&password=relax

     It's also possible to send data as JSON:

         POST /_session HTTP/1.1
         Accept: application/json
         Content-Length: 37
         Content-Type: application/json
         Host: localhost:5984

         {
             "name": "root",
             "password": "relax"
         }

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 43
         Content-Type: application/json
         Date: Mon, 03 Dec 2012 01:23:14 GMT
         Server: CouchDB (Erlang/OTP)
         Set-Cookie: AuthSession=cm9vdDo1MEJCRkYwMjq0LO0ylOIwShrgt8y-UkhI-c6BGw; Version=1; Path=/; HttpOnly

         {"ok":true,"name":"root","roles":["_admin"]}

     If `next' query parameter was provided the response will trigger
     redirection to the specified location in case of successful
     authentication:

     *Request*:

         POST /_session?next=/blog/_design/sofa/_rewrite/recent-posts HTTP/1.1
         Accept: application/json
         Content-Type: application/x-www-form-urlencoded
         Host: localhost:5984

         name=root&password=relax

     *Response*:

         HTTP/1.1 302 Moved Temporarily
         Cache-Control: must-revalidate
         Content-Length: 43
         Content-Type: application/json
         Date: Mon, 03 Dec 2012 01:32:46 GMT
         Location: http://localhost:5984/blog/_design/sofa/_rewrite/recent-posts
         Server: CouchDB (Erlang/OTP)
         Set-Cookie: AuthSession=cm9vdDo1MEJDMDEzRTp7Vu5GKCkTxTVxwXbpXsBARQWnhQ; Version=1; Path=/; HttpOnly

         {"ok":true,"name":null,"roles":["_admin"]}



 -- Get: GET /_session
     Returns complete information about authenticated user.  This
     information contains *note User Context Object: 1dd,
     authentication method and available ones and authentication
     database.

          Query Parameters:

             * *basic* (_boolean_) - Accept `Basic Auth' by requesting
               this resource.  _Optional_.

          Status Codes:

             * 200 OK(6) - Successfully authenticated.

             * 401 Unauthorized(7) - Username or password wasn't
               recognized.

     *Request*:

         GET /_session HTTP/1.1
         Host: localhost:5984
         Accept: application/json
         Cookie: AuthSession=cm9vdDo1MEJDMDQxRDpqb-Ta9QfP9hpdPjHLxNTKg_Hf9w

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 175
         Content-Type: application/json
         Date: Fri, 09 Aug 2013 20:27:45 GMT
         Server: CouchDB (Erlang/OTP)
         Set-Cookie: AuthSession=cm9vdDo1MjA1NTBDMTqmX2qKt1KDR--GUC80DQ6-Ew_XIw; Version=1; Path=/; HttpOnly

         {
             "info": {
                 "authenticated": "cookie",
                 "authentication_db": "_users",
                 "authentication_handlers": [
                     "oauth",
                     "cookie",
                     "default"
                 ]
             },
             "ok": true,
             "userCtx": {
                 "name": "root",
                 "roles": [
                     "_admin"
                 ]
             }
         }



 -- Delete: DELETE /_session
     Closes user's session.

          Status Codes:

             * 200 OK(8) - Successfully close session.

             * 401 Unauthorized(9) - User wasn't authenticated.

     *Request*:

         DELETE /_session HTTP/1.1
         Accept: application/json
         Cookie: AuthSession=cm9vdDo1MjA1NEVGMDo1QXNQkqC_0Qmgrk8Fw61_AzDeXw
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Fri, 09 Aug 2013 20:30:12 GMT
         Server: CouchDB (Erlang/OTP)
         Set-Cookie: AuthSession=; Version=1; Path=/; HttpOnly

         {
             "ok": true
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (2) http://tools.ietf.org/html/rfc2109#section-4.2.2

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2


File: CouchDB.info,  Node: Proxy Authentication,  Next: OAuth Authentication,  Prev: Cookie Authentication<2>,  Up: Authentication<2>

10.2.12.4 Proxy Authentication
..............................

     Note: To use this authentication method make sure that the
     `{couch_httpd_auth, proxy_authentication_handler}' value in added
     to the list of the active *note httpd/authentication_handlers: 8f.:

         [httpd]
         authentication_handlers = {couch_httpd_oauth, oauth_authentication_handler}, {couch_httpd_auth, cookie_authentication_handler}, {couch_httpd_auth, proxy_authentication_handler}, {couch_httpd_auth, default_authentication_handler}



`Proxy authentication' is very useful in case your application already
uses some external authentication service and you don't want to
duplicate users and their roles in CouchDB.

  This authentication method allows creation of a *note User Context
Object: 1dd. for remotely authenticated user. By default, the client
just need to pass specific headers to CouchDB with related request:

   - *note X-Auth-CouchDB-UserName: 6b.: username;

   - *note X-Auth-CouchDB-Roles: 69.: list of user roles separated by a
     comma (`,');

   - *note X-Auth-CouchDB-Token: 6a.: authentication token. Optional,
     but strongly recommended to *note force token be required: 63.  to
     prevent requests from untrusted sources.

  *Request*:

    GET /_session HTTP/1.1
    Host: localhost:5984
    Accept: application/json
    Content-Type: application/json; charset=utf-8
    X-Auth-CouchDB-Roles: users,blogger
    X-Auth-CouchDB-UserName: foo

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 190
    Content-Type: application/json
    Date: Fri, 14 Jun 2013 10:16:03 GMT
    Server: CouchDB (Erlang/OTP)

    {
        "info": {
            "authenticated": "proxy",
            "authentication_db": "_users",
            "authentication_handlers": [
                "oauth",
                "cookie",
                "proxy",
                "default"
            ]
        },
        "ok": true,
        "userCtx": {
            "name": "foo",
            "roles": [
                "users",
                "blogger"
            ]
        }
    }

Note that you don't need to request *note session: 172.  to be
authenticated by this method if all required HTTP headers are provided.


File: CouchDB.info,  Node: OAuth Authentication,  Prev: Proxy Authentication,  Up: Authentication<2>

10.2.12.5 OAuth Authentication
..............................

CouchDB supports OAuth 1.0 authentication ( RFC 5849(1)). OAuth
provides a method for clients to access server resources  without
sharing real credentials (username and password).

  First, *note configure oauth: 1e1, by setting consumer and token with
their secrets and binding token to real CouchDB username.

  Probably, it's not good idea to work with plain curl, let use some
scripting language like Python:

    #!/usr/bin/env python2
    from oauth import oauth # pip install oauth
    import httplib

    URL = 'http://localhost:5984/_session'
    CONSUMER_KEY = 'consumer1'
    CONSUMER_SECRET = 'sekr1t'
    TOKEN = 'token1'
    SECRET = 'tokensekr1t'

    consumer = oauth.OAuthConsumer(CONSUMER_KEY, CONSUMER_SECRET)
    token = oauth.OAuthToken(TOKEN, SECRET)
    req = oauth.OAuthRequest.from_consumer_and_token(
        consumer,
        token=token,
        http_method='GET',
        http_url=URL,
        parameters={}
    )
    req.sign_request(oauth.OAuthSignatureMethod_HMAC_SHA1(), consumer,token)

    headers = req.to_header()
    headers['Accept'] = 'application/json'

    con = httplib.HTTPConnection('localhost', 5984)
    con.request('GET', URL, headers=headers)
    resp = con.getresponse()
    print resp.read()

or Ruby:

    #!/usr/bin/env ruby

    require 'oauth' # gem install oauth

    URL = 'http://localhost:5984'
    CONSUMER_KEY = 'consumer1'
    CONSUMER_SECRET = 'sekr1t'
    TOKEN = 'token1'
    SECRET = 'tokensekr1t'

    @consumer = OAuth::Consumer.new CONSUMER_KEY,
                                    CONSUMER_SECRET,
                                    {:site => URL}

    @access_token = OAuth::AccessToken.new(@consumer, TOKEN, SECRET)

    puts @access_token.get('/_session').body

Both snippets produces similar request and response pair:

    GET /_session HTTP/1.1
    Host: localhost:5984
    Accept: application/json
    Authorization: OAuth realm="", oauth_nonce="81430018", oauth_timestamp="1374561749", oauth_consumer_key="consumer1", oauth_signature_method="HMAC-SHA1", oauth_version="1.0", oauth_token="token1", oauth_signature="o4FqJ8%2B9IzUpXH%2Bk4rgnv7L6eTY%3D"


    HTTP/1.1 200 OK
    Cache-Control : must-revalidate
    Content-Length : 167
    Content-Type : application/json
    Date : Tue, 23 Jul 2013 06:51:15 GMT
    Server: CouchDB (Erlang/OTP)


    {
      "ok": true,
      "info": {
        "authenticated": "oauth",
        "authentication_db": "_users",
        "authentication_handlers": ["oauth", "cookie", "default"]
      },
      "userCtx": {
        "name": "couchdb_username",
        "roles": []
      }
    }

There we request the *note _session: 172. resource to ensure that
authentication was successful and the target CouchDB username is
correct.  Change the target URL to request required resource.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc5849.html


File: CouchDB.info,  Node: Configuration,  Prev: Authentication<2>,  Up: Server<2>

10.2.13 Configuration
---------------------

The CouchDB Server Configuration API provide an interface to query and
update the various configuration values within a running CouchDB
instance.

* Menu:

* /_config::
* /_config/section::
* /_config/section/key::


File: CouchDB.info,  Node: /_config,  Next: /_config/section,  Up: Configuration

10.2.13.1 `/_config'
....................

 -- Get: GET /_config
     Returns the entire CouchDB server configuration as a JSON
     structure. The structure is organized by different configuration
     sections, with individual values.

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(3) - Request completed successfully

             * 401 Unauthorized(4) - CouchDB Server Administrator
               privileges required

     *Request*

         GET /_config HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 4148
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 12:01:42 GMT
         Server: CouchDB (Erlang/OTP)

         {
           "attachments": {
               "compressible_types": "text/*, application/javascript, application/json,  application/xml",
               "compression_level": "8"
           },
           "couch_httpd_auth": {
               "auth_cache_size": "50",
               "authentication_db": "_users",
               "authentication_redirect": "/_utils/session.html",
               "require_valid_user": "false",
               "timeout": "600"
           },
           "couchdb": {
               "database_dir": "/var/lib/couchdb",
               "delayed_commits": "true",
               "max_attachment_chunk_size": "4294967296",
               "max_dbs_open": "100",
               "max_document_size": "4294967296",
               "os_process_timeout": "5000",
               "uri_file": "/var/lib/couchdb/couch.uri",
               "util_driver_dir": "/usr/lib64/couchdb/erlang/lib/couch-1.5.0/priv/lib",
               "view_index_dir": "/var/lib/couchdb"
           },
           "daemons": {
               "auth_cache": "{couch_auth_cache, start_link, []}",
               "db_update_notifier": "{couch_db_update_notifier_sup, start_link, []}",
               "external_manager": "{couch_external_manager, start_link, []}",
               "httpd": "{couch_httpd, start_link, []}",
               "query_servers": "{couch_query_servers, start_link, []}",
               "stats_aggregator": "{couch_stats_aggregator, start, []}",
               "stats_collector": "{couch_stats_collector, start, []}",
               "uuids": "{couch_uuids, start, []}",
               "view_manager": "{couch_view, start_link, []}"
           },
           "httpd": {
               "allow_jsonp": "false",
               "authentication_handlers": "{couch_httpd_oauth, oauth_authentication_handler}, {couch_httpd_auth, cookie_authentication_handler}, {couch_httpd_auth, default_authentication_handler}",
               "bind_address": "192.168.0.2",
               "default_handler": "{couch_httpd_db, handle_request}",
               "max_connections": "2048",
               "port": "5984",
               "secure_rewrites": "true",
               "vhost_global_handlers": "_utils, _uuids, _session, _oauth, _users"
           },
           "httpd_db_handlers": {
               "_changes": "{couch_httpd_db, handle_changes_req}",
               "_compact": "{couch_httpd_db, handle_compact_req}",
               "_design": "{couch_httpd_db, handle_design_req}",
               "_temp_view": "{couch_httpd_view, handle_temp_view_req}",
               "_view_cleanup": "{couch_httpd_db, handle_view_cleanup_req}"
           },
           "httpd_design_handlers": {
               "_info": "{couch_httpd_db,   handle_design_info_req}",
               "_list": "{couch_httpd_show, handle_view_list_req}",
               "_rewrite": "{couch_httpd_rewrite, handle_rewrite_req}",
               "_show": "{couch_httpd_show, handle_doc_show_req}",
               "_update": "{couch_httpd_show, handle_doc_update_req}",
               "_view": "{couch_httpd_view, handle_view_req}"
           },
           "httpd_global_handlers": {
               "/": "{couch_httpd_misc_handlers, handle_welcome_req, <<\"Welcome\">>}",
               "_active_tasks": "{couch_httpd_misc_handlers, handle_task_status_req}",
               "_all_dbs": "{couch_httpd_misc_handlers, handle_all_dbs_req}",
               "_config": "{couch_httpd_misc_handlers, handle_config_req}",
               "_log": "{couch_httpd_misc_handlers, handle_log_req}",
               "_oauth": "{couch_httpd_oauth, handle_oauth_req}",
               "_replicate": "{couch_httpd_misc_handlers, handle_replicate_req}",
               "_restart": "{couch_httpd_misc_handlers, handle_restart_req}",
               "_session": "{couch_httpd_auth, handle_session_req}",
               "_stats": "{couch_httpd_stats_handlers, handle_stats_req}",
               "_utils": "{couch_httpd_misc_handlers, handle_utils_dir_req, \"/usr/share/couchdb/www\"}",
               "_uuids": "{couch_httpd_misc_handlers, handle_uuids_req}",
               "favicon.ico": "{couch_httpd_misc_handlers, handle_favicon_req, \"/usr/share/couchdb/www\"}"
           },
           "log": {
               "file": "/var/log/couchdb/couch.log",
               "include_sasl": "true",
               "level": "info"
           },
           "query_server_config": {
               "reduce_limit": "true"
           },
           "query_servers": {
               "javascript": "/usr/bin/couchjs /usr/share/couchdb/server/main.js"
           },
           "replicator": {
               "max_http_pipeline_size": "10",
               "max_http_sessions": "10"
           },
           "stats": {
               "rate": "1000",
               "samples": "[0, 60, 300, 900]"
           },
           "uuids": {
               "algorithm": "utc_random"
           }
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2


File: CouchDB.info,  Node: /_config/section,  Next: /_config/section/key,  Prev: /_config,  Up: Configuration

10.2.13.2 `/_config/section'
............................

 -- Get: GET /_config/{section}
     Gets the configuration structure for a single section.

          Parameters:

             * *section* - Configuration section name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(3) - Request completed successfully

             * 401 Unauthorized(4) - CouchDB Server Administrator
               privileges required

     *Request*:

         GET /_config/httpd HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 444
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 12:10:40 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "allow_jsonp": "false",
             "authentication_handlers": "{couch_httpd_oauth, oauth_authentication_handler}, {couch_httpd_auth, cookie_authentication_handler}, {couch_httpd_auth, default_authentication_handler}",
             "bind_address": "127.0.0.1",
             "default_handler": "{couch_httpd_db, handle_request}",
             "enable_cors": "false",
             "log_max_chunk_size": "1000000",
             "port": "5984",
             "secure_rewrites": "true",
             "vhost_global_handlers": "_utils, _uuids, _session, _oauth, _users"
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2


File: CouchDB.info,  Node: /_config/section/key,  Prev: /_config/section,  Up: Configuration

10.2.13.3 `/_config/section/key'
................................

 -- Get: GET /_config/{section}/{key}
     Gets a single configuration value from within a specific
     configuration section.

          Parameters:

             * *section* - Configuration section name

             * *key* - Configuration option name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(3) - Request completed successfully

             * 401 Unauthorized(4) - CouchDB Server Administrator
               privileges required

     *Request*:

         GET /_config/log/level HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 8
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 12:12:59 GMT
         Server: CouchDB (Erlang/OTP)

         "debug"


          Note: The returned value will be the JSON of the value, which
          may be a string or numeric value, or an array or object. Some
          client environments may not parse simple strings or numeric
          values as valid JSON.

 -- Put: PUT /_config/{section}/{key}
     Updates a configuration value. The new value should be supplied in
     the request body in the corresponding JSON format. If you are
     setting a string value, you must supply a valid JSON string. In
     response CouchDB sends old value for target section key.

          Parameters:

             * *section* - Configuration section name

             * *key* - Configuration option name

          Request Headers:

             * Accept(5) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(6) - `application/json'

          Response Headers:

             * Content-Type(7) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(8) - Request completed successfully

             * 400 Bad Request(9) - Invalid JSON request body

             * 401 Unauthorized(10) - CouchDB Server Administrator
               privileges required

             * 500 Internal Server Error(11) - Error setting
               configuration

     *Request*:

         PUT /_config/log/level HTTP/1.1
         Accept: application/json
         Content-Length: 7
         Content-Type: application/json
         Host: localhost:5984

         "info"

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 8
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 12:12:59 GMT
         Server: CouchDB (Erlang/OTP)

         "debug"



 -- Delete: DELETE /_config/{section}/{key}
     Deletes a configuration value. The returned JSON will be the value
     of the configuration parameter before it was deleted.

          Parameters:

             * *section* - Configuration section name

             * *key* - Configuration option name

          Request Headers:

             * Accept(12) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(13) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(14) - Request completed successfully

             * 401 Unauthorized(15) - CouchDB Server Administrator
               privileges required

             * 404 Not Found(16) - Specified configuration option not
               found

     *Request*:

         DELETE /_config/log/level HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 7
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 12:29:03 GMT
         Server: CouchDB (Erlang/OTP)

         "info"



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (11) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1

  (12) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (13) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (14) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (15) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (16) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5


File: CouchDB.info,  Node: Databases<2>,  Next: Documents<2>,  Prev: Server<2>,  Up: API Reference<2>

10.3 Databases
==============

The Database endpoint provides an interface to an entire database with
in CouchDB. These are database-level, rather than document-level
requests.

  For all these requests, the database name within the URL path should
be the database name that you wish to perform the operation on.  For
example, to obtain the meta information for the database `recipes', you
would use the HTTP request:

    GET /recipes

For clarity, the form below is used in the URL paths:

    GET /db

Where `db' is the name of any database.

* Menu:

* /db::
* /db/_all_docs::
* /db/_bulk_docs::
* /db/_changes::
* /db/_compact::
* /db/_compact/design-doc::
* /db/_ensure_full_commit::
* /db/_view_cleanup::
* /db/_security::
* /db/_temp_view::
* /db/_purge::
* /db/_missing_revs::
* /db/_revs_diff::
* /db/_revs_limit::

/db

* Specifying the Document ID::
* Batch Mode Writes::

/db/_bulk_docs

* Inserting Documents in Bulk::
* Updating Documents in Bulk::
* Bulk Documents Transaction Semantics::
* Bulk Document Validation and Conflict Errors::

/db/_changes

* Changes Feeds::
* Filtering::

Changes Feeds

* Polling::
* Long Polling::
* Continuous::
* Event Source::

Filtering

* _doc_ids::
* _design::
* _view::

/db/_purge

* Updating Indexes::


File: CouchDB.info,  Node: /db,  Next: /db/_all_docs,  Up: Databases<2>

10.3.1 `/db'
------------

 -- Head: HEAD /{db}
     Returns the HTTP Headers containing a minimal amount of information
     about the specified database. Since the response body is empty,
     using the HEAD method is a lightweight way to check if the
     database exists already or not.

          Parameters:

             * *db* - Database name

          Status Codes:

             * 200 OK(1) - Database exists

             * 404 Not Found(2) - Requested database not found

     *Request*:

         HEAD /test HTTP/1.1
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 01:27:41 GMT
         Server: CouchDB (Erlang/OTP)



 -- Get: GET /{db}
     Gets information about the specified database.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(3) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(4) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *committed_update_seq* (_number_) - The number of
               committed update.

             * *compact_running* (_boolean_) - Set to `true' if the
               database compaction routine is operating on this
               database.

             * *db_name* (_string_) - The name of the database.

             * *disk_format_version* (_number_) - The version of the
               physical format used for the data when it is stored on
               disk.

             * *data_size* (_number_) - Actual data size in bytes of
               the database data.

             * *disk_size* (_number_) - Size in bytes of the data as
               stored on the disk.  Views indexes are not included in
               the calculation.

             * *doc_count* (_number_) - A count of the documents in the
               specified database.

             * *doc_del_count* (_number_) - Number of deleted documents

             * *instance_start_time* (_string_) - Timestamp of when the
               database was opened, expressed in microseconds since the
               epoch.

             * *purge_seq* (_number_) - The number of purge operations
               on the database.

             * *update_seq* (_number_) - The current number of updates
               to the database.

          Status Codes:

             * 200 OK(5) - Request completed successfully

             * 404 Not Found(6) - Requested database not found

     *Request*:

         GET /receipts HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 258
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 01:38:57 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "committed_update_seq": 292786,
             "compact_running": false,
             "data_size": 65031503,
             "db_name": "receipts",
             "disk_format_version": 6,
             "disk_size": 137433211,
             "doc_count": 6146,
             "doc_del_count": 64637,
             "instance_start_time": "1376269325408900",
             "purge_seq": 0,
             "update_seq": 292786
         }



 -- Put: PUT /{db}
     Creates a new database. The database name `{db}' must be composed
     by following next rules:

        - Name must begin with a lowercase letter (`a-z')

        - Lowercase characters (`a-z')

        - Digits (`0-9')

        - Any of the characters `_', `$', `(', `)', `+', `-', and `/'.

     If you're familiar with Regular Expressions(7), the rules above
     could be written as `^[a-z][a-z0-9_$()+/-]*$'.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(8) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(9) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * Location(10) - Database URI location

          Response JSON Object:

             * *ok* (_boolean_) - Operation status. Available in case
               of success

             * *error* (_string_) - Error type. Available if response
               code is `4xx'

             * *reason* (_string_) - Error description. Available if
               response code is `4xx'

          Status Codes:

             * 201 Created(11) - Database created successfully

             * 400 Bad Request(12) - Invalid database name

             * 401 Unauthorized(13) - CouchDB Server Administrator
               privileges required

             * 412 Precondition Failed(14) - Database already exists

     *Request*:

         PUT /db HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 08:01:45 GMT
         Location: http://localhost:5984/db
         Server: CouchDB (Erlang/OTP)

         {
             "ok": true
         }

     If we repeat the same request to CouchDB, it will response with
     `412' since the database already exists:

     *Request*:

         PUT /db HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 412 Precondition Failed
         Cache-Control: must-revalidate
         Content-Length: 95
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 08:01:16 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "error": "file_exists",
             "reason": "The database could not be created, the file already exists."
         }

     If an invalid database name is supplied, CouchDB returns response
     with `400':

     *Request*:

         PUT /_db HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Request*:

         HTTP/1.1 400 Bad Request
         Cache-Control: must-revalidate
         Content-Length: 194
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 08:02:10 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "error": "illegal_database_name",
             "reason": "Name: '_db'. Only lowercase characters (a-z), digits (0-9), and any of the characters _, $, (, ), +, -, and / are allowed. Must begin with a letter."
         }



 -- Delete: DELETE /{db}
     Deletes the specified database, and all the documents and
     attachments contained within it.

          Note: To avoid deleting a database, CouchDB will respond with
          the HTTP status code 400 when the request URL includes a
          ?rev= parameter. This suggests that one wants to delete a
          document but forgot to add the document id to the URL.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(15) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(16) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *ok* (_boolean_) - Operation status

          Status Codes:

             * 200 OK(17) - Database removed successfully

             * 400 Bad Request(18) - Invalid database name or forgotten
               document id by accident

             * 401 Unauthorized(19) - CouchDB Server Administrator
               privileges required

             * 404 Not Found(20) - Database doesn't exist

     *Request*:

         DELETE /db HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 08:54:00 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "ok": true
         }



 -- Post: POST /{db}
     Creates a new document in the specified database, using the
     supplied JSON document structure.

     If the JSON structure includes the `_id' field, then the document
     will be created with the specified document ID.

     If the `_id' field is not specified, a new unique ID will be
     generated, following whatever UUID algorithm is configured for
     that server.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(21) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(22) - `application/json'

             * *X-Couch-Full-Commit* - Overrides server's *note commit
               policy: 71. Possible values are: `false' and `true'.
               _Optional_.

          Query Parameters:

             * *batch* (_string_) - Stores document in *note batch
               mode: 37e. Possible values: `ok'. _Optional_

          Response Headers:

             * Content-Type(23) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * ETag(24) - Quoted new document's revision

             * Location(25) - Document's URI

          Response JSON Object:

             * *id* (_string_) - Document ID

             * *ok* (_boolean_) - Operation status

             * *rev* (_string_) - Revision info

          Status Codes:

             * 201 Created(26) - Document created and stored on disk

             * 202 Accepted(27) - Document data accepted, but not yet
               stored on disk

             * 400 Bad Request(28) - Invalid database name

             * 401 Unauthorized(29) - Write privileges required

             * 404 Not Found(30) - Database doesn't exist

             * 409 Conflict(31) - A Conflicting Document with same ID
               already exists

     *Request*:

         POST /db HTTP/1.1
         Accept: application/json
         Content-Length: 81
         Content-Type: application/json

         {
             "servings": 4,
             "subtitle": "Delicious with fresh bread",
             "title": "Fish Stew"
         }

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 95
         Content-Type: application/json
         Date: Tue, 13 Aug 2013 15:19:25 GMT
         ETag: "1-9c65296036141e575d32ba9c034dd3ee"
         Location: http://localhost:5984/db/ab39fe0993049b84cfa81acd6ebad09d
         Server: CouchDB (Erlang/OTP)

         {
             "id": "ab39fe0993049b84cfa81acd6ebad09d",
             "ok": true,
             "rev": "1-9c65296036141e575d32ba9c034dd3ee"
         }



* Menu:

* Specifying the Document ID::
* Batch Mode Writes::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (7) http://en.wikipedia.org/wiki/Regular_expression

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3

  (11) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (12) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (13) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (14) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.13

  (15) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (16) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (17) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (18) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (19) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (20) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (21) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (22) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (23) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (24) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (25) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3

  (26) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (27) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (28) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (29) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (30) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (31) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10


File: CouchDB.info,  Node: Specifying the Document ID,  Next: Batch Mode Writes,  Up: /db

10.3.1.1 Specifying the Document ID
...................................

The document ID can be specified by including the `_id' field in the
JSON of the submitted record. The following request will create the same
document with the ID `FishStew'.

     *Request*:

         POST /db HTTP/1.1
         Accept: application/json
         Content-Length: 98
         Content-Type: application/json

         {
             "_id": "FishStew",
             "servings": 4,
             "subtitle": "Delicious with fresh bread",
             "title": "Fish Stew"
         }

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 71
         Content-Type: application/json
         Date: Tue, 13 Aug 2013 15:19:25 GMT
         ETag: "1-9c65296036141e575d32ba9c034dd3ee"
         Location: http://localhost:5984/db/FishStew
         Server: CouchDB (Erlang/OTP)

         {
             "id": "FishStew",
             "ok": true,
             "rev": "1-9c65296036141e575d32ba9c034dd3ee"
         }




File: CouchDB.info,  Node: Batch Mode Writes,  Prev: Specifying the Document ID,  Up: /db

10.3.1.2 Batch Mode Writes
..........................

You can write documents to the database at a higher rate by using the
batch option. This collects document writes together in memory (on a
user-by-user basis) before they are committed to disk. This increases
the risk of the documents not being stored in the event of a failure,
since the documents are not written to disk immediately.

  To use the batched mode, append the `batch=ok' query argument to the
URL of the `PUT' or *note POST /{db}: 16. request. The CouchDB server
will respond with a HTTP 202 Accepted(1) response code immediately.

     Note: Creating or updating documents with batch mode doesn't
     guarantee that all documents will be successfully stored on disk.
     For example, individual documents may not be saved due to
     conflicts, rejection by *note validation function: 112. or by
     other reasons, even if overall the batch was sucessfully submitted.

  *Request*:

    POST /db?batch=ok HTTP/1.1
    Accept: application/json
    Content-Length: 98
    Content-Type: application/json

    {
        "_id": "FishStew",
        "servings": 4,
        "subtitle": "Delicious with fresh bread",
        "title": "Fish Stew"
    }

*Response*:

    HTTP/1.1 202 Accepted
    Cache-Control: must-revalidate
    Content-Length: 28
    Content-Type: application/json
    Date: Tue, 13 Aug 2013 15:19:25 GMT
    Location: http://localhost:5984/db/FishStew
    Server: CouchDB (Erlang/OTP)

    {
        "id": "FishStew",
        "ok": true
    }


  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3


File: CouchDB.info,  Node: /db/_all_docs,  Next: /db/_bulk_docs,  Prev: /db,  Up: Databases<2>

10.3.2 `/db/_all_docs'
----------------------

 -- Get: GET /{db}/_all_docs
     Returns a JSON structure of all of the documents in a given
     database.  The information is returned as a JSON structure
     containing meta information about the return structure, including
     a list of all documents and basic contents, consisting the ID,
     revision and key. The key is the from the document's `_id'.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Query Parameters:

             * *conflicts* (_boolean_) - Includes `conflicts'
               information in response.  Ignored if `include_docs'
               isn't `true'. Default is `false'.

             * *descending* (_boolean_) - Return the documents in
               descending by key order.  Default is `false'.

             * *endkey* (_string_) - Stop returning records when the
               specified key is reached. _Optional_.

             * *end_key* (_string_) - Alias for `endkey' param.

             * *endkey_docid* (_string_) - Stop returning records when
               the specified document ID is reached. _Optional_.

             * *end_key_doc_id* (_string_) - Alias for `endkey_docid'
               param.

             * *include_docs* (_boolean_) - Include the full content of
               the documents in the return. Default is `false'.

             * *inclusive_end* (_boolean_) - Specifies whether the
               specified end key should be included in the result.
               Default is `true'.

             * *key* (_string_) - Return only documents that match the
               specified key.  _Optional_.

             * *limit* (_number_) - Limit the number of the returned
               documents to the specified number. _Optional_.

             * *skip* (_number_) - Skip this number of records before
               starting to return the results. Default is `0'.

             * *stale* (_string_) - Allow the results from a stale view
               to be used, without triggering a rebuild of all views
               within the encompassing design doc.  Supported values:
               `ok' and `update_after'. _Optional_.

             * *startkey* (_string_) - Return records starting with the
               specified key.  _Optional_.

             * *start_key* (_string_) - Alias for `startkey' param.

             * *startkey_docid* (_string_) - Return records starting
               with the specified document ID. _Optional_.

             * *start_key_doc_id* (_string_) - Alias for
               `startkey_docid' param.

             * *update_seq* (_boolean_) - Response includes an
               `update_seq' value indicating which sequence id of the
               underlying database the view reflects.  Default is
               `false'.

          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * ETag(3) - Response signature

          Response JSON Object:

             * *offset* (_number_) - Offset where the document list
               started

             * *rows* (_array_) - Array of view row objects. By default
               the information returned contains only the document ID
               and revision.

             * *total_rows* (_number_) - Number of documents in the
               database/view. Note that this is not the number of rows
               returned in the actual query.

             * *update_seq* (_number_) - Current update sequence for
               the database

          Status Codes:

             * 200 OK(4) - Request completed successfully

     *Request*:

         GET /db/_all_docs HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Type: application/json
         Date: Sat, 10 Aug 2013 16:22:56 GMT
         ETag: "1W2DJUZFZSZD9K78UFA3GZWB4"
         Server: CouchDB (Erlang/OTP)
         Transfer-Encoding: chunked

         {
             "offset": 0,
             "rows": [
                 {
                     "id": "16e458537602f5ef2a710089dffd9453",
                     "key": "16e458537602f5ef2a710089dffd9453",
                     "value": {
                         "rev": "1-967a00dff5e02add41819138abb3284d"
                     }
                 },
                 {
                     "id": "a4c51cdfa2069f3e905c431114001aff",
                     "key": "a4c51cdfa2069f3e905c431114001aff",
                     "value": {
                         "rev": "1-967a00dff5e02add41819138abb3284d"
                     }
                 },
                 {
                     "id": "a4c51cdfa2069f3e905c4311140034aa",
                     "key": "a4c51cdfa2069f3e905c4311140034aa",
                     "value": {
                         "rev": "5-6182c9c954200ab5e3c6bd5e76a1549f"
                     }
                 },
                 {
                     "id": "a4c51cdfa2069f3e905c431114003597",
                     "key": "a4c51cdfa2069f3e905c431114003597",
                     "value": {
                         "rev": "2-7051cbe5c8faecd085a3fa619e6e6337"
                     }
                 },
                 {
                     "id": "f4ca7773ddea715afebc4b4b15d4f0b3",
                     "key": "f4ca7773ddea715afebc4b4b15d4f0b3",
                     "value": {
                         "rev": "2-7051cbe5c8faecd085a3fa619e6e6337"
                     }
                 }
             ],
             "total_rows": 5
         }



 -- Post: POST /{db}/_all_docs
     The `POST' to `_all_docs' allows to specify multiple keys to be
     selected from the database. This enables you to request multiple
     documents in a single request, in place of multiple *note GET
     /{db}/{docid}: 46.  requests.

     The request body should contain a list of the keys to be returned
     as an array to a `keys' object. For example:

         POST /db/_all_docs HTTP/1.1
         Accept: application/json
         Content-Length: 70
         Content-Type: application/json
         Host: localhost:5984

         {
            "keys" : [
               "Zingylemontart",
               "Yogurtraita"
            ]
         }

     The returned JSON is the all documents structure, but with only the
     selected keys in the output:

         {
            "total_rows" : 2666,
            "rows" : [
               {
                  "value" : {
                     "rev" : "1-a3544d296de19e6f5b932ea77d886942"
                  },
                  "id" : "Zingylemontart",
                  "key" : "Zingylemontart"
               },
               {
                  "value" : {
                     "rev" : "1-91635098bfe7d40197a1b98d7ee085fc"
                  },
                  "id" : "Yogurtraita",
                  "key" : "Yogurtraita"
               }
            ],
            "offset" : 0
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1


File: CouchDB.info,  Node: /db/_bulk_docs,  Next: /db/_changes,  Prev: /db/_all_docs,  Up: Databases<2>

10.3.3 `/db/_bulk_docs'
-----------------------

 -- Post: POST /{db}/_bulk_docs
     The bulk document API allows you to create and update multiple
     documents at the same time within a single request. The basic
     operation is similar to creating or updating a single document,
     except that you batch the document structure and information.

     When creating new documents the document ID (`_id') is optional.

     For updating existing documents, you must provide the document ID,
     revision information (`_rev'), and new document values.

     In case of batch deleting documents all fields as document ID,
     revision information and deletion status (`_deleted') are required.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

             * *X-Couch-Full-Commit* - Overrides server's *note commit
               policy: 71. Possible values are: `false' and `true'.
               _Optional_

          Request JSON Object:

             * *all_or_nothing* (_boolean_) - Sets the database commit
               mode to use *note all-or-nothing: 385. semantics.
               Default is `false'. _Optional_

             * *docs* (_array_) - List of documents objects

             * *new_edits* (_boolean_) - If `false', prevents the
               database from assigning them new revision IDs. Default
               is `true'. _Optional_

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Array of Objects:

             * *id* (_string_) - Document ID

             * *rev* (_string_) - New document revision token. Available
               if document have saved without errors. _Optional_

             * *error* (_string_) - Error type. _Optional_

             * *reason* (_string_) - Error reason. _Optional_

          Status Codes:

             * 201 Created(4) - Document(s) have been created or updated

             * 400 Bad Request(5) - The request provided invalid JSON
               data

             * 417 Expectation Failed(6) - Occurs when `all_or_nothing'
               option set as `true' and at least one document was
               rejected by *note validation function: 112.

             * 500 Internal Server Error(7) - Malformed data provided,
               while it's still valid JSON

     *Request*:

         POST /db/_bulk_docs HTTP/1.1
         Accept: application/json
         Content-Length: 109
         Content-Type:application/json
         Host: localhost:5984

         {
           "docs": [
             {
               "_id": "FishStew"
             },
             {
               "_id": "LambStew",
               "_rev": "2-0786321986194c92dd3b57dfbfc741ce",
               "_deleted": true
             }
           ]
         }

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 144
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 00:15:05 GMT
         Server: CouchDB (Erlang/OTP)

         [
           {
             "ok": true,
             "id": "FishStew",
             "rev":" 1-967a00dff5e02add41819138abb3284d"
           },
           {
             "ok": true,
             "id": "LambStew",
             "rev": "3-f9c62b2169d0999103e9f41949090807"
           }
         ]



* Menu:

* Inserting Documents in Bulk::
* Updating Documents in Bulk::
* Bulk Documents Transaction Semantics::
* Bulk Document Validation and Conflict Errors::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.18

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1


File: CouchDB.info,  Node: Inserting Documents in Bulk,  Next: Updating Documents in Bulk,  Up: /db/_bulk_docs

10.3.3.1 Inserting Documents in Bulk
....................................

Each time a document is stored or updated in CouchDB, the internal
B-tree is updated. Bulk insertion provides efficiency gains in both
storage space, and time, by consolidating many of the updates to
intermediate B-tree nodes.

  It is not intended as a way to perform `ACID'-like transactions in
CouchDB, the only transaction boundary within CouchDB is a single
update to a single database. The constraints are detailed in *note Bulk
Documents Transaction Semantics: 385.

  To insert documents in bulk into a database you need to supply a JSON
structure with the array of documents that you want to add to the
database.  You can either include a document ID, or allow the document
ID to be automatically generated.

  For example, the following update inserts three new documents, two
with the supplied document IDs, and one which will have a document ID
generated:

    POST /source/_bulk_docs HTTP/1.1
    Accept: application/json
    Content-Length: 323
    Content-Type: application/json
    Host: localhost:5984

    {
        "docs": [
            {
                "_id": "FishStew",
                "servings": 4,
                "subtitle": "Delicious with freshly baked bread",
                "title": "FishStew"
            },
            {
                "_id": "LambStew",
                "servings": 6,
                "subtitle": "Serve with a whole meal scone topping",
                "title": "LambStew"
            },
            {
                "_id": "BeefStew",
                "servings": 8,
                "subtitle": "Hand-made dumplings make a great accompaniment",
                "title": "BeefStew"
            }
        ]
    }

The return type from a bulk insertion will be 201 Created(1), with the
content of the returned structure indicating specific success or
otherwise messages on a per-document basis.

  The return structure from the example above contains a list of the
documents created, here with the combination and their revision IDs:

    HTTP/1.1 201 Created
    Cache-Control: must-revalidate
    Content-Length: 215
    Content-Type: application/json
    Date: Sat, 26 Oct 2013 00:10:39 GMT
    Server: CouchDB (Erlang OTP)

    [
        {
            "id": "FishStew",
            "ok": true,
            "rev": "1-6a466d5dfda05e613ba97bd737829d67"
        },
        {
            "id": "LambStew",
            "ok": true,
            "rev": "1-648f1b989d52b8e43f05aa877092cc7c"
        },
        {
            "id": "BeefStew",
            "ok": true,
            "rev": "1-e4602845fc4c99674f50b1d5a804fdfa"
        }
    ]

The content and structure of the returned JSON will depend on the
transaction semantics being used for the bulk update; see *note Bulk
Documents Transaction Semantics: 385.  for more information. Conflicts
and validation errors when updating documents in bulk must be handled
separately; see *note Bulk Document Validation and Conflict Errors: 387.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2


File: CouchDB.info,  Node: Updating Documents in Bulk,  Next: Bulk Documents Transaction Semantics,  Prev: Inserting Documents in Bulk,  Up: /db/_bulk_docs

10.3.3.2 Updating Documents in Bulk
...................................

The bulk document update procedure is similar to the insertion
procedure, except that you must specify the document ID and current
revision for every document in the bulk update JSON string.

  For example, you could send the following request:

    POST /recipes/_bulk_docs HTTP/1.1
    Accept: application/json
    Content-Length: 464
    Content-Type: application/json
    Host: localhost:5984

    {
        "docs": [
            {
                "_id": "FishStew",
                "_rev": "1-6a466d5dfda05e613ba97bd737829d67",
                "servings": 4,
                "subtitle": "Delicious with freshly baked bread",
                "title": "FishStew"
            },
            {
                "_id": "LambStew",
                "_rev": "1-648f1b989d52b8e43f05aa877092cc7c",
                "servings": 6,
                "subtitle": "Serve with a whole meal scone topping",
                "title": "LambStew"
            },
            {
                "_id": "BeefStew",
                "_rev": "1-e4602845fc4c99674f50b1d5a804fdfa",
                "servings": 8,
                "subtitle": "Hand-made dumplings make a great accompaniment",
                "title": "BeefStew"
            }
        ]
    }

The return structure is the JSON of the updated documents, with the new
revision and ID information:

    HTTP/1.1 201 Created
    Cache-Control: must-revalidate
    Content-Length: 215
    Content-Type: application/json
    Date: Sat, 26 Oct 2013 00:10:39 GMT
    Server: CouchDB (Erlang OTP)

    [
        {
            "id": "FishStew",
            "ok": true,
            "rev": "2-2bff94179917f1dec7cd7f0209066fb8"
        },
        {
            "id": "LambStew",
            "ok": true,
            "rev": "2-6a7aae7ac481aa98a2042718d09843c4"
        },
        {
            "id": "BeefStew",
            "ok": true,
            "rev": "2-9801936a42f06a16f16c30027980d96f"
        }
    ]

You can optionally delete documents during a bulk update by adding the
`_deleted' field with a value of `true' to each document ID/revision
combination within the submitted JSON structure.

  The return type from a bulk insertion will be 201 Created(1), with the
content of the returned structure indicating specific success or
otherwise messages on a per-document basis.

  The content and structure of the returned JSON will depend on the
transaction semantics being used for the bulk update; see *note Bulk
Documents Transaction Semantics: 385.  for more information. Conflicts
and validation errors when updating documents in bulk must be handled
separately; see *note Bulk Document Validation and Conflict Errors: 387.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2


File: CouchDB.info,  Node: Bulk Documents Transaction Semantics,  Next: Bulk Document Validation and Conflict Errors,  Prev: Updating Documents in Bulk,  Up: /db/_bulk_docs

10.3.3.3 Bulk Documents Transaction Semantics
.............................................

CouchDB supports two different modes for updating (or inserting)
documents using the bulk documentation system. Each mode affects both
the state of the documents in the event of system failure, and the level
of conflict checking performed on each document. The two modes are:

   - *non-atomic*

     The default mode is `non-atomic', that is, CouchDB will only
     guarantee that some of the documents will be saved when you send
     the request.  The response will contain the list of documents
     successfully inserted or updated during the process. In the event
     of a crash, some of the documents may have been successfully
     saved, and some will have been lost.

     In this mode, the response structure will indicate whether the
     document was updated by supplying the new `_rev' parameter
     indicating a new document revision was created. If the update
     failed, then you will get an `error' of type `conflict'. For
     example:

         [
            {
               "id" : "FishStew",
               "error" : "conflict",
               "reason" : "Document update conflict."
            },
            {
               "id" : "LambStew",
               "error" : "conflict",
               "reason" : "Document update conflict."
            },
            {
               "id" : "BeefStew",
               "error" : "conflict",
               "reason" : "Document update conflict."
            }
         ]

     In this case no new revision has been created and you will need to
     submit the document update, with the correct revision tag, to
     update the document.

   - *all-or-nothing*

     In `all-or-nothing' mode, either all documents are written to the
     database, or no documents are written to the database, in the event
     of a system failure during commit.

     In addition, the per-document conflict checking is not performed.
     Instead a new revision of the document is created, even if the new
     revision is in conflict with the current revision in the database.
     The returned structure contains the list of documents with new
     revisions:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 215
         Content-Type: application/json
         Date: Sat, 26 Oct 2013 00:13:33 GMT
         Server: CouchDB (Erlang OTP)

         [
             {
                 "id": "FishStew",
                 "ok": true,
                 "rev": "1-6a466d5dfda05e613ba97bd737829d67"
             },
             {
                 "id": "LambStew",
                 "ok": true,
                 "rev": "1-648f1b989d52b8e43f05aa877092cc7c"
             },
             {
                 "id": "BeefStew",
                 "ok": true,
                 "rev": "1-e4602845fc4c99674f50b1d5a804fdfa"
             }
         ]

     When updating documents using this mode the revision of a document
     included in views will be arbitrary. You can check the conflict
     status for a document by using the `conflicts=true' query argument
     when accessing the view. Conflicts should be handled individually
     to ensure the consistency of your database.

     To use this mode, you must include the `all_or_nothing' field (set
     to true) within the main body of the JSON of the request.

  The effects of different database operations on the different modes
are summarized below:

   * *Transaction Mode*: `Non-atomic'

        * *Transaction*: `Insert'

             * *Cause*: Requested document ID already exists

             * *Resolution*: Resubmit with different document ID, or
               update the existing document

        * *Transaction*: `Update'

             * *Cause*: Revision missing or incorrect

             * *Resolution*: Resubmit with correct revision

   * *Transaction Mode*: `All-or-nothing'

        * *Transaction*: `Insert' / `Update'

             * *Cause*: Additional revision inserted

             * *Resolution*: Resolve conflicted revisions

  Replication of documents is independent of the type of insert or
update.  The documents and revisions created during a bulk insert or
update are replicated in the same way as any other document. This can
mean that if you make use of the `all-or-nothing' mode the exact list
of documents, revisions (and their conflict state) may or may not be
replicated to other databases correctly.


File: CouchDB.info,  Node: Bulk Document Validation and Conflict Errors,  Prev: Bulk Documents Transaction Semantics,  Up: /db/_bulk_docs

10.3.3.4 Bulk Document Validation and Conflict Errors
.....................................................

The JSON returned by the `_bulk_docs' operation consists of an array of
JSON structures, one for each document in the original submission.  The
returned JSON structure should be examined to ensure that all of the
documents submitted in the original request were successfully added to
the database.

  When a document (or document revision) is not correctly committed to
the database because of an error, you should check the `error' field to
determine error type and course of action. Errors will be one of the
following type:

   - *conflict*

     The document as submitted is in conflict. If you used the default
     bulk transaction mode then the new revision will not have been
     created and you will need to re-submit the document to the
     database.  If you used `all-or-nothing' mode then you will need to
     manually resolve the conflicted revisions of the document.

     Conflict resolution of documents added using the bulk docs
     interface is identical to the resolution procedures used when
     resolving conflict errors during replication.

   - *forbidden*

     Entries with this error type indicate that the validation routine
     applied to the document during submission has returned an error.

     For example, if your *note validation routine: 112. includes the
     following:

         throw({forbidden: 'invalid recipe ingredient'});

     The error response returned will be:

         HTTP/1.1 417 Expectation Failed
         Cache-Control: must-revalidate
         Content-Length: 120
         Content-Type: application/json
         Date: Sat, 26 Oct 2013 00:05:17 GMT
         Server: CouchDB (Erlang OTP)

         {
             "error": "forbidden",
             "id": "LambStew",
             "reason": "invalid recipe ingredient",
             "rev": "1-34c318924a8f327223eed702ddfdc66d"
         }




File: CouchDB.info,  Node: /db/_changes,  Next: /db/_compact,  Prev: /db/_bulk_docs,  Up: Databases<2>

10.3.4 `/db/_changes'
---------------------

 -- Get: GET /{db}/_changes
     Returns a sorted list of changes made to documents in the
     database, in time order of application, can be obtained from the
     database's `_changes' resource. Only the most recent change for a
     given document is guaranteed to be provided, for example if a
     document has had fields added, and then deleted, an API client
     checking for changes will not necessarily receive the intermediate
     state of added documents.

     This can be used to listen for update and modifications to the
     database for post processing or synchronization, and for practical
     purposes, a continuously connected `_changes' feed is a reasonable
     approach for generating a real-time log for most applications.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/event-stream'

                  - `text/plain'

             * Last-Event-ID(2) - ID of the last events received by the
               server on a previous connection. Overrides `since' query
               parameter.

          Query Parameters:

             * *doc_ids* (_array_) - List of document IDs to filter the
               changes feed as valid JSON array. Used with *note
               _doc_ids: 38e. filter.  Since length of URL is
               limited(3), it is better to use *note POST
               /{db}/_changes: 1d. instead.

             * *conflicts* (_boolean_) - Includes `conflicts'
               information in response.  Ignored if `include_docs'
               isn't `true'. Default is `false'.

             * *descending* (_boolean_) - Return the change results in
               descending sequence order (most recent change first).
               Default is `false'.

             * *feed* (_string_) - see *note Changes Feeds: fc. Default
               is `normal'.

             * *filter* (_string_) - Reference to a *note filter
               function: 235.  from a design document that will filter
               whole stream emitting only filtered events. See the
               section Change Notifications in the book CouchDB The
               Definitive Guide(4) for more information.

             * *heartbeat* (_number_) - Period in _milliseconds_ after
               which an empty line is sent in the results. Only
               applicable for *note longpoll: 244.  or *note
               continuous: 38f. feeds. Overrides any timeout to keep
               the feed alive indefinitely. Default is `60000'. May be
               `true' to use default value.

             * *include_docs* (_boolean_) - Include the associated
               document with each result.  If there are conflicts, only
               the winning revision is returned.  Default is `false'.

             * *attachments* (_boolean_) - Include the Base64-encoded
               content of *note attachments: 390. in the documents that
               are included if `include_docs' is `true'. Ignored if
               `include_docs' isn't `true'.  Default is `false'.

             * *att_encoding_info* (_boolean_) - Include encoding
               information in attachment stubs if `include_docs' is
               `true' and the particular attachment is compressed.
               Ignored if `include_docs' isn't `true'. Default is
               `false'.

             * *last-event-id* (_number_) - Alias of `Last-Event-ID'
               header.

             * *limit* (_number_) - Limit number of result rows to the
               specified value (note that using `0' here has the same
               effect as `1').

             * *since* - Start the results from the change immediately
               after the given sequence number. Can be integer number
               or `now' value. Default is `0'.

             * *style* (_string_) - Specifies how many revisions are
               returned in the changes array. The default, `main_only',
               will only return the current "winning" revision;
               `all_docs' will return all leaf revisions (including
               conflicts and deleted former conflicts).

             * *timeout* (_number_) - Maximum period in _milliseconds_
               to wait for a change before the response is sent, even
               if there are no results. Only applicable for *note
               longpoll: 244. or *note continuous: 38f. feeds. Default
               value is specified by *note httpd/changes_timeout: 91.
               configuration option.  Note that `60000' value is also
               the default maximum timeout to prevent undetected dead
               connections.

             * *view* (_string_) - Allows to use view functions as
               filters. Documents counted as "passed" for view filter
               in case if map function emits at least one record for
               them. See *note _view: 391. for more info.

          Response Headers:

             * Cache-Control(5) - `no-cache' if changes feed is *note
               eventsource: 392.

             * Content-Type(6) -

                  - `application/json'

                  - `text/event-stream'

                  - `text/plain; charset=utf-8'

             * ETag(7) - Response hash is changes feed is `normal'

             * Transfer-Encoding(8) - `chunked'

          Response JSON Object:

             * *last_seq* (_number_) - Last change sequence number

             * *results* (_array_) - Changes made to a database

          Status Codes:

             * 200 OK(9) - Request completed successfully

             * 400 Bad Request(10) - Bad request

     The `result' field of database changes

          JSON Object:

             * *changes* (_array_) - List of document`s leafs with
               single field `rev'

             * *id* (_string_) - Document ID

             * *seq* (_number_) - Update sequence number

     *Request*:

         GET /db/_changes?style=all_docs HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 00:54:58 GMT
         ETag: "6ASLEKEMSRABT0O5XY9UPO9Z"
         Server: CouchDB (Erlang/OTP)
         Transfer-Encoding: chunked

         {
             "last_seq": 11,
             "results": [
                 {
                     "changes": [
                         {
                             "rev": "2-7051cbe5c8faecd085a3fa619e6e6337"
                         }
                     ],
                     "id": "6478c2ae800dfc387396d14e1fc39626",
                     "seq": 6
                 },
                 {
                     "changes": [
                         {
                             "rev": "3-7379b9e515b161226c6559d90c4dc49f"
                         }
                     ],
                     "deleted": true,
                     "id": "5bbc9ca465f1b0fcd62362168a7c8831",
                     "seq": 9
                 },
                 {
                     "changes": [
                         {
                             "rev": "6-460637e73a6288cb24d532bf91f32969"
                         },
                         {
                             "rev": "5-eeaa298781f60b7bcae0c91bdedd1b87"
                         }
                     ],
                     "id": "729eb57437745e506b333068fff665ae",
                     "seq": 11
                 }
             ]
         }



  Changed in version 0.11.0: added `include_docs' parameter

  Changed in version 1.2.0: added `view' parameter and special value
`_view' for `filter' one

  Changed in version 1.3.0: `since' parameter could take `now' value to
start listen changes since current seq number.

  Changed in version 1.3.0: `eventsource' feed type added.

  Changed in version 1.4.0: Support `Last-Event-ID' header.

  Changed in version 1.6.0: added `attachments' and `att_encoding_info'
parameters

     Warning: Using the `attachments' parameter to include attachments
     in the changes feed is not recommended for large attachment sizes.
     Also note that the Base64-encoding that is used leads to a 33%
     overhead (i.e. one third) in transfer size for attachments.

 -- Post: POST /{db}/_changes
     Requests the database changes feed in the same way as *note GET
     /{db}/_changes: 1c. does, but is widely used with
     `?filter=_doc_ids' query parameter and allows one to pass a larger
     list of document IDs to filter.

     *Request*:

         POST /recipes/_changes?filter=_doc_ids HTTP/1.1
         Accept: application/json
         Content-Length: 40
         Content-Type: application/json
         Host: localhost:5984

         {
             "doc_ids": [
                 "SpaghettiWithMeatballs"
             ]
         }

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Type: application/json
         Date: Sat, 28 Sep 2013 07:23:09 GMT
         ETag: "ARIHFWL3I7PIS0SPVTFU6TLR2"
         Server: CouchDB (Erlang OTP)
         Transfer-Encoding: chunked

         {
             "last_seq": 38,
             "results": [
                 {
                     "changes": [
                         {
                             "rev": "13-bcb9d6388b60fd1e960d9ec4e8e3f29e"
                         }
                     ],
                     "id": "SpaghettiWithMeatballs",
                     "seq": 38
                 }
             ]
         }



* Menu:

* Changes Feeds::
* Filtering::

Changes Feeds

* Polling::
* Long Polling::
* Continuous::
* Event Source::

Filtering

* _doc_ids::
* _design::
* _view::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/TR/eventsource/#last-event-id

  (3) http://stackoverflow.com/a/417184/965635

  (4) http://guide.couchdb.org/draft/notifications.html

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1


File: CouchDB.info,  Node: Changes Feeds,  Next: Filtering,  Up: /db/_changes

10.3.4.1 Changes Feeds
......................

* Menu:

* Polling::
* Long Polling::
* Continuous::
* Event Source::


File: CouchDB.info,  Node: Polling,  Next: Long Polling,  Up: Changes Feeds

10.3.4.2 Polling
................

By default all changes are immediately returned within the JSON body:

    GET /somedatabase/_changes HTTP/1.1


    {"results":[
    {"seq":1,"id":"fresh","changes":[{"rev":"1-967a00dff5e02add41819138abb3284d"}]},
    {"seq":3,"id":"updated","changes":[{"rev":"2-7051cbe5c8faecd085a3fa619e6e6337"}]},
    {"seq":5,"id":"deleted","changes":[{"rev":"2-eec205a9d413992850a6e32678485900"}],"deleted":true}
    ],
    "last_seq":5}

`results' is the list of changes in sequential order. New and changed
documents only differ in the value of the rev; deleted documents
include the `"deleted": true' attribute. (In the `style=all_docs mode',
deleted applies only to the current/winning revision. The other
revisions listed might be deleted even if there is no deleted property;
you have to `GET' them individually to make sure.)

  `last_seq' is the sequence number of the last update returned.
(Currently it will always be the same as the seq of the last item in
results.)

  Sending a `since' param in the query string skips all changes up to
and including the given sequence number:

    GET /somedatabase/_changes?since=3 HTTP/1.1

The return structure for `normal' and `longpoll' modes is a JSON array
of changes objects, and the last update sequence number.

  In the return format for `continuous' mode, the server sends a `CRLF'
(carriage-return, linefeed) delimited line for each change. Each line
contains the `JSON object' described above.

  You can also request the full contents of each document change
(instead of just the change notification) by using the `include_docs'
parameter.

    {
        "last_seq": 5
        "results": [
            {
                "changes": [
                    {
                        "rev": "2-eec205a9d413992850a6e32678485900"
                    }
                ],
                "deleted": true,
                "id": "deleted",
                "seq": 5,
            }
        ]
    }



File: CouchDB.info,  Node: Long Polling,  Next: Continuous,  Prev: Polling,  Up: Changes Feeds

10.3.4.3 Long Polling
.....................

The `longpoll' feed, probably most applicable for a browser, is a more
efficient form of polling that waits for a change to occur before the
response is sent. `longpoll' avoids the need to frequently poll CouchDB
to discover nothing has changed!

  The request to the server will remain open until a change is made on
the database and is subsequently transferred, and then the connection
will close.  This is low load for both server and client.

  The response is basically the same JSON as is sent for the `normal'
feed.

  Because the wait for a change can be significant you can set a
timeout before the connection is automatically closed (the `timeout'
argument). You can also set a heartbeat interval (using the `heartbeat'
query argument), which sends a newline to keep the connection active.


File: CouchDB.info,  Node: Continuous,  Next: Event Source,  Prev: Long Polling,  Up: Changes Feeds

10.3.4.4 Continuous
...................

Continually polling the CouchDB server is not ideal - setting up new
HTTP connections just to tell the client that nothing happened puts
unnecessary strain on CouchDB.

  A continuous feed stays open and connected to the database until
explicitly closed and changes are sent to the client as they happen,
i.e. in near real-time.

  As with the `longpoll' feed type you can set both the timeout and
heartbeat intervals to ensure that the connection is kept open for new
changes and updates.

  The continuous feed's response is a little different than the other
feed types to simplify the job of the client - each line of the
response is either empty or a JSON object representing a single change,
as found in the normal feed's results.

    GET /somedatabase/_changes?feed=continuous HTTP/1.1


    {"seq":1,"id":"fresh","changes":[{"rev":"1-967a00dff5e02add41819138abb3284d"}]}
    {"seq":3,"id":"updated","changes":[{"rev":"2-7051cbe5c8faecd085a3fa619e6e6337"}]}
    {"seq":5,"id":"deleted","changes":[{"rev":"2-eec205a9d413992850a6e32678485900"}],"deleted":true}
    ... tum tee tum ...
    {"seq":6,"id":"updated","changes":[{"rev":"3-825cb35de44c433bfb2df415563a19de"}]}

Obviously, `... tum tee tum ...' does not appear in the actual
response, but represents a long pause before the change with seq 6
occurred.


File: CouchDB.info,  Node: Event Source,  Prev: Continuous,  Up: Changes Feeds

10.3.4.5 Event Source
.....................

The `eventsource' feed provides push notifications that can be consumed
in the form of DOM events in the browser. Refer to the W3C eventsource
specification(1) for further details. CouchDB also honours the
`Last-Event-ID' parameter.

    GET /somedatabase/_changes?feed=eventsource HTTP/1.1


    // define the event handling function
    if (window.EventSource) {

      var source = new EventSource("/somedatabase/_changes?feed=eventsource");
      source.onerror = function(e) {
        alert('EventSource failed.');
      };

      var results = [];
      var sourceListener = function(e) {
        var data = JSON.parse(e.data);
        results.push(data);
      };

      // start listening for events
      source.addEventListener('message', sourceListener, false);

      // stop listening for events
      source.removeEventListener('message', sourceListener, false);

    }


     Note: EventSource connections are subject to cross-origin resource
     sharing restrictions. You might need to configure *note CORS
     support: 56. to get the EventSource to work in your application.

  ---------- Footnotes ----------

  (1) http://www.w3.org/TR/eventsource/


File: CouchDB.info,  Node: Filtering,  Prev: Changes Feeds,  Up: /db/_changes

10.3.4.6 Filtering
..................

You can filter the contents of the changes feed in a number of ways. The
most basic way is to specify one or more document IDs to the query. This
causes the returned structure value to only contain changes for the
specified IDs. Note that the value of this query argument should be a
JSON formatted array.

  You can also filter the `_changes' feed by defining a filter function
within a design document. The specification for the filter is the same
as for replication filters. You specify the name of the filter function
to the `filter' parameter, specifying the design document name and
*note filter name: 235. For example:

    GET /db/_changes?filter=design_doc/filtername

Additionally, there are couple of builtin filters are available and
described below.

* Menu:

* _doc_ids::
* _design::
* _view::


File: CouchDB.info,  Node: _doc_ids,  Next: _design,  Up: Filtering

10.3.4.7 _doc_ids
.................

This filter accepts only changes for documents which ID in specified in
`doc_ids' query parameter or payload's object array. See *note POST
/{db}/_changes: 1d. for an example.


File: CouchDB.info,  Node: _design,  Next: _view,  Prev: _doc_ids,  Up: Filtering

10.3.4.8 _design
................

The `_design' filter accepts only changes for any design document
within the requested database.

  *Request*:

    GET /recipes/_changes?filter=_design HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Type: application/json
    Date: Sat, 28 Sep 2013 07:28:28 GMT
    ETag: "ARIHFWL3I7PIS0SPVTFU6TLR2"
    Server: CouchDB (Erlang OTP)
    Transfer-Encoding: chunked

    {
        "last_seq": 38,
        "results": [
            {
                "changes": [
                    {
                        "rev": "10-304cae84fd862832ea9814f02920d4b2"
                    }
                ],
                "id": "_design/ingredients",
                "seq": 29
            },
            {
                "changes": [
                    {
                        "rev": "123-6f7c1b7c97a9e4f0d22bdf130e8fd817"
                    }
                ],
                "deleted": true,
                "id": "_design/cookbook",
                "seq": 35
            },
            {
                "changes": [
                    {
                        "rev": "6-5b8a52c22580e922e792047cff3618f3"
                    }
                ],
                "deleted": true,
                "id": "_design/meta",
                "seq": 36
            }
        ]
    }



File: CouchDB.info,  Node: _view,  Prev: _design,  Up: Filtering

10.3.4.9 _view
..............

New in version 1.2.

  The special filter `_view' allows to use existing *note map function:
291.  as the *note filter: 235. If the map function emits anything for
the processed document it counts as accepted and the changes event
emits to the feed. For most use-practice cases `filter' functions are
very similar to `map' ones, so this feature helps to reduce amount of
duplicated code.

     Warning: While *note map functions: 291. doesn't process the
     design documents, using `_view' filter forces them to do this. You
     need to be sure, that they are ready to handle documents with
     _alien_ structure without panic crush.

     Note: Using `_view' filter doesn't queries the view index files,
     so you cannot use common *note view query parameters: 2c4. to
     additionally filter the changes feed by index key. Also, CouchDB
     doesn't returns the result instantly as it does for views - it
     really uses the specified map function as filter.

     Moreover, you cannot make such filters dynamic e.g. process the
     request query parameters or handle the *note User Context Object:
     1dd. - the map function is only operates with the document.

  *Request*:

    GET /recipes/_changes?filter=_view&view=ingredients/by_recipe HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Type: application/json
    Date: Sat, 28 Sep 2013 07:36:40 GMT
    ETag: "ARIHFWL3I7PIS0SPVTFU6TLR2"
    Server: CouchDB (Erlang OTP)
    Transfer-Encoding: chunked

    {
        "last_seq": 38,
        "results": [
            {
                "changes": [
                    {
                        "rev": "13-bcb9d6388b60fd1e960d9ec4e8e3f29e"
                    }
                ],
                "id": "SpaghettiWithMeatballs",
                "seq": 38
            }
        ]
    }



File: CouchDB.info,  Node: /db/_compact,  Next: /db/_compact/design-doc,  Prev: /db/_changes,  Up: Databases<2>

10.3.5 `/db/_compact'
---------------------

 -- Post: POST /{db}/_compact
     Request compaction of the specified database. Compaction
     compresses the disk database file by performing the following
     operations:

        - Writes a new, optimised, version of the database file,
          removing any unused sections from the new version during
          write. Because a new file is temporarily created for this
          purpose, you may require up to twice the current storage
          space of the specified database in order for the compaction
          routine to complete.

        - Removes old revisions of documents from the database, up to
          the per-database limit specified by the `_revs_limit' database
          parameter.

     Compaction can only be requested on an individual database; you
     cannot compact all the databases for a CouchDB instance. The
     compaction process runs as a background process.

     You can determine if the compaction process is operating on a
     database by obtaining the database meta information, the
     `compact_running' value of the returned database structure will be
     set to true. See *note GET /{db}: 15.

     You can also obtain a list of running processes to determine
     whether compaction is currently running. See *note /_active_tasks:
     183.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *ok* (_boolean_) - Operation status

          Status Codes:

             * 202 Accepted(4) - Compaction request has been accepted

             * 400 Bad Request(5) - Invalid database name

             * 401 Unauthorized(6) - CouchDB Server Administrator
               privileges required

             * 415 Unsupported Media Type(7) - Bad Content-Type(8) value

     *Request*:

         POST /db/_compact HTTP/1.1
         Accept: application/json
         Content-Type: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 202 Accepted
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 09:27:43 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "ok": true
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17


File: CouchDB.info,  Node: /db/_compact/design-doc,  Next: /db/_ensure_full_commit,  Prev: /db/_compact,  Up: Databases<2>

10.3.6 `/db/_compact/design-doc'
--------------------------------

 -- Post: POST /{db}/_compact/{ddoc}
     Compacts the view indexes associated with the specified design
     document.  If may be that compacting a large view can return more
     storage than compacting the actual db. Thus, you can use this in
     place of the full database compaction if you know a specific set
     of view indexes have been affected by a recent database change.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *ok* (_boolean_) - Operation status

          Status Codes:

             * 202 Accepted(4) - Compaction request has been accepted

             * 400 Bad Request(5) - Invalid database name

             * 401 Unauthorized(6) - CouchDB Server Administrator
               privileges required

             * 404 Not Found(7) - Design document not found

             * 415 Unsupported Media Type(8) - Bad Content-Type(9) value

     *Request*:

         POST /db/_compact/posts HTTP/1.1
         Accept: application/json
         Content-Type: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 202 Accepted
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 09:36:44 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "ok": true
         }

         .. note::

           View indexes are stored in a separate ``.couch`` file based on
           a hash of the design document's relevant functions, in a sub directory
           of where the main ``.couch`` database files are located.



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17


File: CouchDB.info,  Node: /db/_ensure_full_commit,  Next: /db/_view_cleanup,  Prev: /db/_compact/design-doc,  Up: Databases<2>

10.3.7 `/db/_ensure_full_commit'
--------------------------------

 -- Post: POST /{db}/_ensure_full_commit
     Commits any recent changes to the specified database to disk. You
     should call this if you want to ensure that recent changes have
     been flushed.  This function is likely not required, assuming you
     have the recommended configuration setting of
     `delayed_commits=false', which requires CouchDB to ensure changes
     are written to disk before a 200 or similar result is returned.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *instance_start_time* (_string_) - Timestamp of when the
               database was opened, expressed in microseconds since the
               epoch.

             * *ok* (_boolean_) - Operation status

          Status Codes:

             * 201 Created(4) - Commit completed successfully

             * 400 Bad Request(5) - Invalid database name

             * 415 Unsupported Media Type(6) - Bad Content-Type(7) value

     *Request*:

         POST /db/_ensure_full_commit HTTP/1.1
         Accept: application/json
         Content-Type: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 53
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 10:22:19 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "instance_start_time": "1376269047459338",
             "ok": true
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17


File: CouchDB.info,  Node: /db/_view_cleanup,  Next: /db/_security,  Prev: /db/_ensure_full_commit,  Up: Databases<2>

10.3.8 `/db/_view_cleanup'
--------------------------

 -- Post: POST /{db}/_view_cleanup
     Removes view index files that are no longer required by CouchDB as
     a result of changed views within design documents. As the view
     filename is based on a hash of the view functions, over time old
     views will remain, consuming storage. This call cleans up the
     cached view output on disk for a given view.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *ok* (_boolean_) - Operation status

          Status Codes:

             * 202 Accepted(4) - Compaction request has been accepted

             * 400 Bad Request(5) - Invalid database name

             * 401 Unauthorized(6) - CouchDB Server Administrator
               privileges required

             * 415 Unsupported Media Type(7) - Bad Content-Type(8) value

     *Request*:

         POST /db/_view_cleanup HTTP/1.1
         Accept: application/json
         Content-Type: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 202 Accepted
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 09:27:43 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "ok": true
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17


File: CouchDB.info,  Node: /db/_security,  Next: /db/_temp_view,  Prev: /db/_view_cleanup,  Up: Databases<2>

10.3.9 `/db/_security'
----------------------

 -- Get: GET /{db}/_security
     Returns the current security object from the specified database.

     The security object consists of two compulsory elements, `admins'
     and `members', which are used to specify the list of users and/or
     roles that have admin and members rights to the database
     respectively:

        - `members': they can read all types of documents from the DB,
          and they can write (and edit) documents to the DB except for
          design documents.

        - `admins': they have all the privileges of `members' plus the
          privileges: write (and edit) design documents, add/remove
          database admins and members, set the *note database revisions
          limit: 3a8. and execute *note temporary views: 2ed. against
          the database.  They can not create a database nor delete a
          database.

     Both `members' and `admins' objects are contains two array-typed
     fields:

        - `users': List of CouchDB user names

        - `roles': List of users roles

     Any other additional fields in the security object are optional.
     The entire security object is made available to validation and
     other internal functions so that the database can control and
     limit functionality.

     If both the names and roles fields of either the admins or members
     properties are empty arrays, it means the database has no admins
     or members.

     Having no admins, only server admins (with the reserved `_admin'
     role) are able to update design document and make other admin
     level changes.

     Having no members, any user can write regular documents (any
     non-design document) and read documents from the database.

     If there are any member names or roles defined for a database,
     then only authenticated users having a matching name or role are
     allowed to read documents from the database (or do a *note GET
     /{db}: 15. call).

          Note: If the security object for a database has never been
          set, then the value returned will be empty.

          Also note, that security objects are not regular versioned
          documents (that is, they are not under MVCC rules). This is a
          design choice to speedup authorization checks (avoids
          traversing a database`s documents B-Tree).

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *admins* (_object_) - Object with two fields as `names'
               and `roles'.  See description above for more info.

             * *members* (_object_) - Object with two fields as `names'
               and `roles'.  See description above for more info.

          Status Codes:

             * 200 OK(3) - Request completed successfully

     *Request*:

         GET /db/_security HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 109
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 19:05:29 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "admins": {
                 "names": [
                     "superuser"
                 ],
                 "roles": [
                     "admins"
                 ]
             },
             "members": {
                 "names": [
                     "user1",
                     "user2"
                 ],
                 "roles": [
                     "developers"
                 ]
             }
         }



 -- Put: PUT /{db}/_security
     Sets the security object for the given database.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(4) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(5) - `application/json'

          Request JSON Object:

             * *admins* (_object_) - Object with two fields as `names'
               and `roles'.  *note See description above for more info:
               10f.

             * *members* (_object_) - Object with two fields as `names'
               and `roles'.  *note See description above for more info:
               10f.

          Response Headers:

             * Content-Type(6) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *ok* (_boolean_) - Operation status

          Status Codes:

             * 200 OK(7) - Request completed successfully

             * 401 Unauthorized(8) - CouchDB Server Administrator
               privileges required

     *Request*:

         PUT /db/_security HTTP/1.1
         Accept: application/json
         Content-Length: 121
         Content-Type: application/json
         Host: localhost:5984

         {
             "admins": {
                 "names": [
                     "superuser"
                 ],
                 "roles": [
                     "admins"
                 ]
             },
             "members": {
                 "names": [
                     "user1",
                     "user2"
                 ],
                 "roles": [
                     "developers"
                 ]
             }
         }

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Tue, 13 Aug 2013 11:26:28 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "ok": true
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2


File: CouchDB.info,  Node: /db/_temp_view,  Next: /db/_purge,  Prev: /db/_security,  Up: Databases<2>

10.3.10 `/db/_temp_view'
------------------------

 -- Post: POST /{db}/_temp_view
     Creates (and executes) a temporary view based on the view function
     supplied in the JSON request.

     The arguments also available to standard view requests also apply
     to temporary views, but the execution of the view may take some
     time as it relies on being executed at the time of the request.
     This means that for every temporary view you create, the entire
     database will be read one doc at a time and passed through the
     view function.

     This should not be used on production CouchDB instances, and is
     purely a convenience function for quick development testing. You
     should use a defined view if you want to achieve the best
     performance.

     See *note /db/_design/design-doc/_view/view-name: 2c4. for more
     info.

     *Request*:

         POST /db/_temp_view?group=true HTTP/1.1
         Accept: application/json
         Content-Length: 92
         Content-Type: application/json
         Host: localhost:5984

         {
             "map": "function(doc) { if (doc.value) { emit(doc.value, null); } }",
             "reduce": "_count"
         }

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Type: application/json
         Date: Tue, 13 Aug 2013 12:28:12 GMT
         ETag: "AU33B3N7S9K4SAZSFA048HVB4"
         Server: CouchDB (Erlang/OTP)
         Transfer-Encoding: chunked

         {
             "rows": [
                 {
                     "key": -10,
                     "value": 1
                 },
                 {
                     "key": 10,
                     "value": 2
                 },
                 {
                     "key": 15,
                     "value": 1
                 }
             ]
         }




File: CouchDB.info,  Node: /db/_purge,  Next: /db/_missing_revs,  Prev: /db/_temp_view,  Up: Databases<2>

10.3.11 `/db/_purge'
--------------------

 -- Post: POST /{db}/_purge
     A database purge permanently removes the references to deleted
     documents from the database. Normal deletion of a document within
     CouchDB does not remove the document from the database, instead,
     the document is marked as `_deleted=true' (and a new revision is
     created). This is to ensure that deleted documents can be
     replicated to other databases as having been deleted. This also
     means that you can check the status of a document and identify
     that the document has been deleted by its absence.

          Warning: Purging a document from a database should only be
          done as a last resort when sensitive information has been
          introduced inadvertently into a database. In clustered or
          replicated environments it is very difficult to guarantee
          that a particular purged document has been removed from all
          replicas. Do not rely on this API as a way of doing secure
          deletion.

     The purge operation removes the references to the deleted
     documents from the database. The purging of old documents is not
     replicated to other databases. If you are replicating between
     databases and have deleted a large number of documents you should
     run purge on each database.

          Note: Purging documents does not remove the space used by
          them on disk. To reclaim disk space, you should run a
          database compact (see *note /db/_compact: 3a0.), and compact
          views (see *note /db/_compact/design-doc: 3a1.).

     The format of the request must include the document ID and one or
     more revisions that must be purged.

     The response will contain the purge sequence number, and a list of
     the document IDs and revisions successfully purged.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Request JSON Object:

             * *object* - Mapping of document ID to list of revisions
               to purge

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *purge_seq* (_number_) - Purge sequence number

             * *purged* (_object_) - Mapping of document ID to list of
               purged revisions

          Status Codes:

             * 200 OK(4) - Request completed successfully

             * 400 Bad Request(5) - Invalid database name or JSON
               payload

             * 415 Unsupported Media Type(6) - Bad Content-Type(7) value

     *Request*:

         POST /db/_purge HTTP/1.1
         Accept: application/json
         Content-Length: 76
         Content-Type: application/json
         Host: localhost:5984

         {
           "c6114c65e295552ab1019e2b046b10e": [
             "3-b06fcd1c1c9e0ec7c480ee8aa467bf3b",
             "3-0e871ef78849b0c206091f1a7af6ec41"
           ]
         }

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 103
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 10:53:24 GMT
         Server: CouchDB (Erlang/OTP)

         {
           "purge_seq":3,
           "purged":{
             "c6114c65e295552ab1019e2b046b10e": [
               "3-b06fcd1c1c9e0ec7c480ee8aa467bf3b"
             ]
           }
         }



* Menu:

* Updating Indexes::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17


File: CouchDB.info,  Node: Updating Indexes,  Up: /db/_purge

10.3.11.1 Updating Indexes
..........................

The number of purges on a database is tracked using a purge sequence.
This is used by the view indexer to optimize the updating of views that
contain the purged documents.

  When the indexer identifies that the purge sequence on a database has
changed, it compares the purge sequence of the database with that stored
in the view index. If the difference between the stored sequence and
database is sequence is only 1, then the indexer uses a cached list of
the most recently purged documents, and then removes these documents
from the index individually. This prevents completely rebuilding the
index from scratch.

  If the difference between the stored sequence number and current
database sequence is greater than 1, then the view index is entirely
rebuilt. This is an expensive operation as every document in the
database must be examined.


File: CouchDB.info,  Node: /db/_missing_revs,  Next: /db/_revs_diff,  Prev: /db/_purge,  Up: Databases<2>

10.3.12 `/db/_missing_revs'
---------------------------

 -- Post: POST /{db}/_missing_revs
     With given a list of document revisions, returns the document
     revisions that do not exist in the database.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Request JSON Object:

             * *object* - Mapping of document ID to list of revisions
               to lookup

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *missing_revs* (_object_) - Mapping of document ID to
               list of missed revisions

          Status Codes:

             * 200 OK(4) - Request completed successfully

             * 400 Bad Request(5) - Invalid database name or JSON
               payload

     *Request*:

         POST /db/_missing_revs HTTP/1.1
         Accept: application/json
         Content-Length: 76
         Content-Type: application/json
         Host: localhost:5984

         {
           "c6114c65e295552ab1019e2b046b10e": [
             "3-b06fcd1c1c9e0ec7c480ee8aa467bf3b",
             "3-0e871ef78849b0c206091f1a7af6ec41"
           ]
         }

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 64
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 10:53:24 GMT
         Server: CouchDB (Erlang/OTP)

         {
           "missed_revs":{
             "c6114c65e295552ab1019e2b046b10e": [
               "3-b06fcd1c1c9e0ec7c480ee8aa467bf3b"
             ]
           }
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1


File: CouchDB.info,  Node: /db/_revs_diff,  Next: /db/_revs_limit,  Prev: /db/_missing_revs,  Up: Databases<2>

10.3.13 `/db/_revs_diff'
------------------------

 -- Post: POST /{db}/_revs_diff
     Given a set of document/revision IDs, returns the subset of those
     that do not correspond to revisions stored in the database.

     Its primary use is by the replicator, as an important
     optimization: after receiving a set of new revision IDs from the
     source database, the replicator sends this set to the destination
     database's `_revs_diff' to find out which of them already exist
     there. It can then avoid fetching and sending already-known
     document bodies.

     Both the request and response bodies are JSON objects whose keys
     are document IDs; but the values are structured differently:

        - In the request, a value is an array of revision IDs for that
          document.

        - In the response, a value is an object with a `missing': key,
          whose value is a list of revision IDs for that document (the
          ones that are not stored in the database) and optionally a
          `possible_ancestors' key, whose value is an array of revision
          IDs that are known that might be ancestors of the missing
          revisions.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(2) - `application/json'

          Request JSON Object:

             * *object* - Mapping of document ID to list of revisions
               to lookup

          Response Headers:

             * Content-Type(3) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *missing* (_array_) - List of missed revisions for
               specified document

             * *possible_ancestors* (_array_) - List of revisions that
               _may be_ ancestors for specified document and its
               current revision in requested database

          Status Codes:

             * 200 OK(4) - Request completed successfully

             * 400 Bad Request(5) - Invalid database name or JSON
               payload

     *Request*:

         POST /db/_revs_diff HTTP/1.1
         Accept: application/json
         Content-Length: 113
         Content-Type: application/json
         Host: localhost:5984

         {
           "190f721ca3411be7aa9477db5f948bbb": [
             "3-bb72a7682290f94a985f7afac8b27137",
             "4-10265e5a26d807a3cfa459cf1a82ef2e",
             "5-067a00dff5e02add41819138abb3284d"
           ]
         }

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 88
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 16:56:02 GMT
         Server: CouchDB (Erlang/OTP)

         {
           "190f721ca3411be7aa9477db5f948bbb": {
             "missing": [
               "3-bb72a7682290f94a985f7afac8b27137",
               "5-067a00dff5e02add41819138abb3284d"
             ],
             "possible_ancestors": [
               "4-10265e5a26d807a3cfa459cf1a82ef2e"
             ]
           }
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1


File: CouchDB.info,  Node: /db/_revs_limit,  Prev: /db/_revs_diff,  Up: Databases<2>

10.3.14 `/db/_revs_limit'
-------------------------

 -- Get: GET /{db}/_revs_limit
     Gets the current `revs_limit' (revision limit) setting.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Status Codes:

             * 200 OK(3) - Request completed successfully

     *Request*:

         GET /db/_revs_limit HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 5
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 17:27:30 GMT
         Server: CouchDB (Erlang/OTP)

         1000



 -- Put: PUT /{db}/_revs_limit
     Sets the maximum number of document revisions that will be tracked
     by CouchDB, even after compaction has occurred. You can set the
     revision limit on a database with a scalar integer of the limit
     that you want to set as the request body.

          Parameters:

             * *db* - Database name

          Request Headers:

             * Accept(4) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(5) - `application/json'

          Response Headers:

             * Content-Type(6) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *ok* (_boolean_) - Operation status

          Status Codes:

             * 200 OK(7) - Request completed successfully

             * 400 Bad Request(8) - Invalid JSON data

     *Request*:

         PUT /db/_revs_limit HTTP/1.1
         Accept: application/json
         Content-Length: 5
         Content-Type: application/json
         Host: localhost:5984

         1000

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 12
         Content-Type: application/json
         Date: Mon, 12 Aug 2013 17:47:52 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "ok": true
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1


File: CouchDB.info,  Node: Documents<2>,  Next: Design Documents,  Prev: Databases<2>,  Up: API Reference<2>

10.4 Documents
==============

Details on how to create, read, update and delete documents within a
database.

* Menu:

* /db/doc::
* /db/doc/attachment::

/db/doc

* Attachments: Attachments<2>.
* Getting a List of Revisions::
* Obtaining an Extended Revision History::
* Obtaining a Specific Revision::
* Updating an Existing Document::
* Copying from a Specific Revision::
* Copying to an Existing Document::

Attachments

* Basic Attachments Info::
* Retrieving Attachments Content::
* Retrieving Attachments Encoding Info::
* Creating Multiple Attachments::

Retrieving Attachments Content

* Efficient Multiple Attachments Retrieving::

Obtaining a Specific Revision

* Retrieving Deleted Documents::

/db/doc/attachment

* HTTP Range Requests::


File: CouchDB.info,  Node: /db/doc,  Next: /db/doc/attachment,  Up: Documents<2>

10.4.1 `/db/doc'
----------------

 -- Head: HEAD /{db}/{docid}
     Returns the HTTP Headers containing a minimal amount of information
     about the specified document. The method supports the same query
     arguments as the *note GET /{db}/{docid}: 46. method, but only the
     header information (including document size, and the revision as
     an ETag), is returned.

     The ETag(1) header shows the current revision for the requested
     document, and the Content-Length(2) specifies the length of the
     data, if the document were requested in full.

     Adding any of the query arguments (see *note GET /{db}/{docid}:
     46.), then the resulting HTTP Headers will correspond to what
     would be returned.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

          Request Headers:

             * If-None-Match(3) - Double quoted document's revision
               token

          Response Headers:

             * Content-Length(4) - Document size

             * ETag(5) - Double quoted document's revision token

          Status Codes:

             * 200 OK(6) - Document exists

             * 304 Not Modified(7) - Document wasn't modified since
               specified revision

             * 401 Unauthorized(8) - Read privilege required

             * 404 Not Found(9) - Document not found

     *Request*:

         GET /db/SpaghettiWithMeatballs HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 660
         Content-Type: application/json
         Date: Tue, 13 Aug 2013 21:35:37 GMT
         ETag: "12-151bb8678d45aaa949ec3698ef1c7e78"
         Server: CouchDB (Erlang/OTP)



 -- Get: GET /{db}/{docid}
     Returns document by the specified `docid' from the specified `db'.
     Unless you request a specific revision, the latest revision of the
     document will always be returned.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

          Request Headers:

             * Accept(10) -

                  - `application/json'

                  - `multipart/mixed'

                  - `text/plain'

             * If-None-Match(11) - Double quoted document's revision
               token

          Query Parameters:

             * *attachments* (_boolean_) - Includes attachments bodies
               in response.  Default is `false'

             * *att_encoding_info* (_boolean_) - Includes encoding
               information in attachment stubs if the particular
               attachment is compressed. Default is `false'.

             * *atts_since* (_array_) - Includes attachments only since
               specified revisions.  Doesn't includes attachments for
               specified revisions. _Optional_

             * *conflicts* (_boolean_) - Includes information about
               conflicts in document.  Default is `false'

             * *deleted_conflicts* (_boolean_) - Includes information
               about deleted conflicted revisions. Default is `false'

             * *latest* (_boolean_) - Forces retrieving latest "leaf"
               revision, no matter what `rev' was requested. Default is
               `false'

             * *local_seq* (_boolean_) - Includes last update sequence
               number for the document. Default is `false'

             * *meta* (_boolean_) - Acts same as specifying all
               `conflicts', `deleted_conflicts' and `open_revs' query
               parameters. Default is `false'

             * *open_revs* (_array_) - Retrieves documents of specified
               leaf revisions.  Additionally, it accepts value as `all'
               to return all leaf revisions.  _Optional_

             * *rev* (_string_) - Retrieves document of specified
               revision. _Optional_

             * *revs* (_boolean_) - Includes list of all known document
               revisions.  Default is `false'

             * *revs_info* (_boolean_) - Includes detailed information
               for all known document revisions. Default is `false'

          Response Headers:

             * Content-Type(12) -

                  - `application/json'

                  - `multipart/mixed'

                  - `text/plain; charset=utf-8'

             * ETag(13) - Double quoted document's revision token. Not
               available when retrieving conflicts-related information

             * Transfer-Encoding(14) - `chunked'. Available if
               requested with query parameter `open_revs'

          Response JSON Object:

             * *_id* (_string_) - Document ID

             * *_rev* (_string_) - Revision MVCC token

             * *_deleted* (_boolean_) - Deletion flag. Available if
               document was removed

             * *_attachments* (_object_) - Attachment's stubs.
               Available if document has any attachments

             * *_conflicts* (_array_) - List of conflicted revisions.
               Available if requested with `conflicts=true' query
               parameter

             * *_deleted_conflicts* (_array_) - List of deleted
               conflicted revisions.  Available if requested with
               `deleted_conflicts=true' query parameter

             * *_local_seq* (_number_) - Document's sequence number in
               current database.  Available if requested with
               `local_seq=true' query parameter

             * *_revs_info* (_array_) - List of objects with
               information about local revisions and their status.
               Available if requested with `open_revs' query parameter

             * *_revisions* (_object_) - List of local revision tokens
               without.  Available if requested with `revs=true' query
               parameter

          Status Codes:

             * 200 OK(15) - Request completed successfully

             * 304 Not Modified(16) - Document wasn't modified since
               specified revision

             * 400 Bad Request(17) - The format of the request or
               revision was invalid

             * 401 Unauthorized(18) - Read privilege required

             * 404 Not Found(19) - Document not found

     *Request*:

         GET /recipes/SpaghettiWithMeatballs HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 660
         Content-Type: application/json
         Date: Tue, 13 Aug 2013 21:35:37 GMT
         ETag: "1-917fa2381192822767f010b95b45325b"
         Server: CouchDB (Erlang/OTP)

         {
             "_id": "SpaghettiWithMeatballs",
             "_rev": "1-917fa2381192822767f010b95b45325b",
             "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
             "ingredients": [
                 "spaghetti",
                 "tomato sauce",
                 "meatballs"
             ],
             "name": "Spaghetti with meatballs"
         }



 -- Put: PUT /{db}/{docid}
     The PUT(20) method creates a new named document, or creates a new
     revision of the existing document. Unlike the *note POST /{db}:
     16, you must specify the document ID in the request URL.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

          Request Headers:

             * Accept(21) -

                  - `application/json'

                  - `text/plain'

             * Content-Type(22) - `application/json'

             * If-Match(23) - Document's revision. Alternative to `rev'
               query parameter

             * *X-Couch-Full-Commit* - Overrides server's *note commit
               policy: 71. Possible values are: `false' and `true'.
               _Optional_

          Query Parameters:

             * *batch* (_string_) - Stores document in *note batch
               mode: 37e. Possible values: `ok'. _Optional_

          Response Headers:

             * Content-Type(24) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * ETag(25) - Quoted document's new revision

             * Location(26) - Document URI

          Response JSON Object:

             * *id* (_string_) - Document ID

             * *ok* (_boolean_) - Operation status

             * *rev* (_string_) - Revision MVCC token

          Status Codes:

             * 201 Created(27) - Document created and stored on disk

             * 202 Accepted(28) - Document data accepted, but not yet
               stored on disk

             * 400 Bad Request(29) - Invalid request body or parameters

             * 401 Unauthorized(30) - Write privileges required

             * 404 Not Found(31) - Specified database or document ID
               doesn't exists

             * 409 Conflict(32) - Document with the specified ID
               already exists or specified revision is not latest for
               target document

     *Request*:

         PUT /recipes/SpaghettiWithMeatballs HTTP/1.1
         Accept: application/json
         Content-Length: 196
         Content-Type: application/json
         Host: localhost:5984

         {
             "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
             "ingredients": [
                 "spaghetti",
                 "tomato sauce",
                 "meatballs"
             ],
             "name": "Spaghetti with meatballs"
         }

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 85
         Content-Type: application/json
         Date: Wed, 14 Aug 2013 20:31:39 GMT
         ETag: "1-917fa2381192822767f010b95b45325b"
         Location: http://localhost:5984/recipes/SpaghettiWithMeatballs
         Server: CouchDB (Erlang/OTP)

         {
             "id": "SpaghettiWithMeatballs",
             "ok": true,
             "rev": "1-917fa2381192822767f010b95b45325b"
         }



 -- Delete: DELETE /{db}/{docid}
     Marks the specified document as deleted by adding a field
     `_deleted' with the value `true'. Documents with this field will
     not be returned within requests anymore, but stay in the database.
     You must supply the current (latest) revision, either by using the
     `rev' parameter or by using the If-Match(33) header to specify the
     revision.

See also
........

     *note Retrieving Deleted Documents: 3b8.

          Note: CouchDB doesn't actually delete documents. The reason
          is the need to track them correctly during the replication
          process between databases to prevent accidental document
          recovery for any previous state.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

          Request Headers:

             * Accept(34) -

                  - `application/json'

                  - `text/plain'

             * If-Match(35) - Document's revision. Alternative to `rev'
               query parameter

             * *X-Couch-Full-Commit* - Overrides server's *note commit
               policy: 71. Possible values are: `false' and `true'.
               _Optional_

          Query Parameters:

             * *rev* (_string_) - Actual document's revision

             * *batch* (_string_) - Stores document in *note batch
               mode: 37e. Possible values: `ok'. _Optional_

          Response Headers:

             * Content-Type(36) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * ETag(37) - Double quoted document's new revision

          Response JSON Object:

             * *id* (_string_) - Document ID

             * *ok* (_boolean_) - Operation status

             * *rev* (_string_) - Revision MVCC token

          Status Codes:

             * 200 OK(38) - Document successfully removed

             * 202 Accepted(39) - Request was accepted, but changes are
               not yet stored on disk

             * 400 Bad Request(40) - Invalid request body or parameters

             * 401 Unauthorized(41) - Write privileges required

             * 404 Not Found(42) - Specified database or document ID
               doesn't exists

             * 409 Conflict(43) - Specified revision is not the latest
               for target document

     *Request*:

         DELETE /recipes/FishStew?rev=1-9c65296036141e575d32ba9c034dd3ee HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     Alternatively, instead of `rev' query parameter you may use
If-Match(44) header:

         DELETE /recipes/FishStew HTTP/1.1
         Accept: application/json
         If-Match: 1-9c65296036141e575d32ba9c034dd3ee
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 71
         Content-Type: application/json
         Date: Wed, 14 Aug 2013 12:23:13 GMT
         ETag: "2-056f5f44046ecafc08a2bc2b9c229e20"
         Server: CouchDB (Erlang/OTP)

         {
             "id": "FishStew",
             "ok": true,
             "rev": "2-056f5f44046ecafc08a2bc2b9c229e20"
         }



 -- Copy: COPY /{db}/{docid}
     The COPY(45) (which is non-standard HTTP) copies an existing
     document to a new or existing document.

     The source document is specified on the request line, with the
     Destination(46) header of the request specifying the target
     document.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

          Request Headers:

             * Accept(47) -

                  - `application/json'

                  - `text/plain'

             * Destination(48) - Destination document

             * If-Match(49) - Source document's revision. Alternative
               to `rev' query parameter

             * *X-Couch-Full-Commit* - Overrides server's *note commit
               policy: 71. Possible values are: `false' and `true'.
               _Optional_

          Query Parameters:

             * *rev* (_string_) - Revision to copy from. _Optional_

             * *batch* (_string_) - Stores document in *note batch
               mode: 37e. Possible values: `ok'. _Optional_

          Response Headers:

             * Content-Type(50) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * ETag(51) - Double quoted document's new revision

             * Location(52) - Document URI

          Response JSON Object:

             * *id* (_string_) - Document document ID

             * *ok* (_boolean_) - Operation status

             * *rev* (_string_) - Revision MVCC token

          Status Codes:

             * 201 Created(53) - Document successfully created

             * 202 Accepted(54) - Request was accepted, but changes are
               not yet stored on disk

             * 400 Bad Request(55) - Invalid request body or parameters

             * 401 Unauthorized(56) - Read or write privileges required

             * 404 Not Found(57) - Specified database, document ID  or
               revision doesn't exists

             * 409 Conflict(58) - Document with the specified ID
               already exists or specified revision is not latest for
               target document

     *Request*:

         COPY /recipes/SpaghettiWithMeatballs HTTP/1.1
         Accept: application/json
         Destination: SpaghettiWithMeatballs_Italian
         Host: localhost:5984

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 93
         Content-Type: application/json
         Date: Wed, 14 Aug 2013 14:21:00 GMT
         ETag: "1-e86fdf912560c2321a5fcefc6264e6d9"
         Location: http://localhost:5984/recipes/SpaghettiWithMeatballs_Italian
         Server: CouchDB (Erlang/OTP)

         {
             "id": "SpaghettiWithMeatballs_Italian",
             "ok": true,
             "rev": "1-e86fdf912560c2321a5fcefc6264e6d9"
         }



* Menu:

* Attachments: Attachments<2>.
* Getting a List of Revisions::
* Obtaining an Extended Revision History::
* Obtaining a Specific Revision::
* Updating an Existing Document::
* Copying from a Specific Revision::
* Copying to an Existing Document::

Attachments

* Basic Attachments Info::
* Retrieving Attachments Content::
* Retrieving Attachments Encoding Info::
* Creating Multiple Attachments::

Retrieving Attachments Content

* Efficient Multiple Attachments Retrieving::

Obtaining a Specific Revision

* Retrieving Deleted Documents::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (11) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26

  (12) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (13) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (14) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41

  (15) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (16) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5

  (17) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (18) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (19) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (20) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6

  (21) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (22) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (23) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (24) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (25) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (26) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3

  (27) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (28) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (29) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (30) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (31) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (32) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

  (33) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (34) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (35) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (36) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (37) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (38) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (39) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (40) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (41) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (42) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (43) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

  (44) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (45) http://tools.ietf.org/html/rfc2518#section-8.8

  (46) http://tools.ietf.org/html/rfc2518#section-9.3

  (47) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (48) http://tools.ietf.org/html/rfc2518#section-9.3

  (49) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (50) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (51) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (52) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3

  (53) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (54) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (55) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (56) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (57) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (58) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10


File: CouchDB.info,  Node: Attachments<2>,  Next: Getting a List of Revisions,  Up: /db/doc

10.4.1.1 Attachments
....................

If the document includes attachments, then the returned structure will
contain a summary of the attachments associated with the document, but
not the attachment data itself.

  The JSON for the returned document will include the `_attachments'
field, with one or more attachment definitions.

  The `_attachments' object keys are attachments names while values are
information objects with next structure:

   - *content_type* (_string_): Attachment MIME type

   - *data* (_string_): Base64-encoded content. Available if attachment
     content is requested by using the following query parameters:

             - `attachments=true' when querying a document

             - `attachments=true&include_docs=true' when querying a
               *note changes feed: 38c. or a *note view: 2c4.

             - `atts_since'.

   - *digest* (_string_): Content hash digest.  It starts with prefix
     which announce hash type (`md5-') and continues with
     Base64-encoded hash digest

   - *encoded_length* (_number_): Compressed attachment size in bytes.
     Available if `content_type' is in *note list of compressible
     types: 50. when the attachment was added and the following query
     parameters are specified:

             - `att_encoding_info=true' when querying a document

             - `att_encoding_info=true&include_docs=true' when querying
               a *note changes feed: 38c. or a *note view: 2c4.

   - *encoding* (_string_): Compression codec. Available if
     `content_type' is in *note list of compressible types: 50. when
     the attachment was added and the following query parameters are
     specified:

             - `att_encoding_info=true' when querying a document

             - `att_encoding_info=true&include_docs=true' when querying
               a *note changes feed: 38c. or a *note view: 2c4.

   - *length* (_number_): Real attachment size in bytes. Not available
     if attachment content requested

   - *revpos* (_number_): Revision _number_ when attachment was added

   - *stub* (_boolean_): Has `true' value if object contains stub info
     and no content. Otherwise omitted in response

* Menu:

* Basic Attachments Info::
* Retrieving Attachments Content::
* Retrieving Attachments Encoding Info::
* Creating Multiple Attachments::


File: CouchDB.info,  Node: Basic Attachments Info,  Next: Retrieving Attachments Content,  Up: Attachments<2>

10.4.1.2 Basic Attachments Info
...............................

*Request*:

    GET /recipes/SpaghettiWithMeatballs HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 660
    Content-Type: application/json
    Date: Tue, 13 Aug 2013 21:35:37 GMT
    ETag: "5-fd96acb3256302bf0dd2f32713161f2a"
    Server: CouchDB (Erlang/OTP)

    {
        "_attachments": {
            "grandma_recipe.txt": {
                "content_type": "text/plain",
                "digest": "md5-Ids41vtv725jyrN7iUvMcQ==",
                "length": 1872,
                "revpos": 4,
                "stub": true
            },
            "my_recipe.txt": {
                "content_type": "text/plain",
                "digest": "md5-198BPPNiT5fqlLxoYYbjBA==",
                "length": 85,
                "revpos": 5,
                "stub": true
            },
            "photo.jpg": {
                "content_type": "image/jpeg",
                "digest": "md5-7Pv4HW2822WY1r/3WDbPug==",
                "length": 165504,
                "revpos": 2,
                "stub": true
            }
        },
        "_id": "SpaghettiWithMeatballs",
        "_rev": "5-fd96acb3256302bf0dd2f32713161f2a",
        "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
        "ingredients": [
            "spaghetti",
            "tomato sauce",
            "meatballs"
        ],
        "name": "Spaghetti with meatballs"
    }



File: CouchDB.info,  Node: Retrieving Attachments Content,  Next: Retrieving Attachments Encoding Info,  Prev: Basic Attachments Info,  Up: Attachments<2>

10.4.1.3 Retrieving Attachments Content
.......................................

It's possible to retrieve document with all attached files content by
using `attachements=true' query parameter:

  *Request*:

    GET /db/pixel?attachments=true HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 553
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 11:32:40 GMT
    ETag: "4-f1bcae4bf7bbb92310079e632abfe3f4"
    Server: CouchDB (Erlang/OTP)

    {
        "_attachments": {
            "pixel.gif": {
                "content_type": "image/gif",
                "data": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
                "digest": "md5-2JdGiI2i2VELZKnwMers1Q==",
                "revpos": 2
            },
            "pixel.png": {
                "content_type": "image/png",
                "data": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAAXNSR0IArs4c6QAAAANQTFRFAAAAp3o92gAAAAF0Uk5TAEDm2GYAAAABYktHRACIBR1IAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3QgOCx8VHgmcNwAAAApJREFUCNdjYAAAAAIAAeIhvDMAAAAASUVORK5CYII=",
                "digest": "md5-Dgf5zxgGuchWrve73evvGQ==",
                "revpos": 3
            }
        },
        "_id": "pixel",
        "_rev": "4-f1bcae4bf7bbb92310079e632abfe3f4"
    }

Or retrieve attached files content since specific revision using
`atts_since' query parameter:

  *Request*:

    GET /recipes/SpaghettiWithMeatballs?atts_since=[%224-874985bc28906155ba0e2e0538f67b05%22]  HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 760
    Content-Type: application/json
    Date: Tue, 13 Aug 2013 21:35:37 GMT
    ETag: "5-fd96acb3256302bf0dd2f32713161f2a"
    Server: CouchDB (Erlang/OTP)

    {
        "_attachments": {
            "grandma_recipe.txt": {
                "content_type": "text/plain",
                "digest": "md5-Ids41vtv725jyrN7iUvMcQ==",
                "length": 1872,
                "revpos": 4,
                "stub": true
            },
            "my_recipe.txt": {
                "content_type": "text/plain",
                "data": "MS4gQ29vayBzcGFnaGV0dGkKMi4gQ29vayBtZWV0YmFsbHMKMy4gTWl4IHRoZW0KNC4gQWRkIHRvbWF0byBzYXVjZQo1LiAuLi4KNi4gUFJPRklUIQ==",
                "digest": "md5-198BPPNiT5fqlLxoYYbjBA==",
                "revpos": 5
            },
            "photo.jpg": {
                "content_type": "image/jpeg",
                "digest": "md5-7Pv4HW2822WY1r/3WDbPug==",
                "length": 165504,
                "revpos": 2,
                "stub": true
            }
        },
        "_id": "SpaghettiWithMeatballs",
        "_rev": "5-fd96acb3256302bf0dd2f32713161f2a",
        "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
        "ingredients": [
            "spaghetti",
            "tomato sauce",
            "meatballs"
        ],
        "name": "Spaghetti with meatballs"
    }


* Menu:

* Efficient Multiple Attachments Retrieving::


File: CouchDB.info,  Node: Efficient Multiple Attachments Retrieving,  Up: Retrieving Attachments Content

10.4.1.4 Efficient Multiple Attachments Retrieving
..................................................

As you had noted above, retrieving document with `attachements=true'
returns large JSON object where all attachments are included.  While
you document and files are smaller it's ok, but if you have attached
something bigger like media files (audio/video), parsing such response
might be very expensive.

  To solve this problem, CouchDB allows to get documents in
`multipart/related' format:

  *Request*:

    GET /recipes/secret?attachments=true HTTP/1.1
    Accept: multipart/related
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Content-Length: 538
    Content-Type: multipart/related; boundary="e89b3e29388aef23453450d10e5aaed0"
    Date: Sat, 28 Sep 2013 08:08:22 GMT
    ETag: "2-c1c6c44c4bc3c9344b037c8690468605"
    Server: CouchDB (Erlang OTP)

    --e89b3e29388aef23453450d10e5aaed0
    Content-Type: application/json

    {"_id":"secret","_rev":"2-c1c6c44c4bc3c9344b037c8690468605","_attachments":{"recipe.txt":{"content_type":"text/plain","revpos":2,"digest":"md5-HV9aXJdEnu0xnMQYTKgOFA==","length":86,"follows":true}}}
    --e89b3e29388aef23453450d10e5aaed0
    Content-Disposition: attachment; filename="recipe.txt"
    Content-Type: text/plain
    Content-Length: 86

    1. Take R
    2. Take E
    3. Mix with L
    4. Add some A
    5. Serve with X

    --e89b3e29388aef23453450d10e5aaed0--

In this response the document contains only attachments stub
information and quite short while all attachments goes as separate
entities which reduces memory footprint and processing overhead (you'd
noticed, that attachment content goes as raw data, not in base64
encoding, right?).


File: CouchDB.info,  Node: Retrieving Attachments Encoding Info,  Next: Creating Multiple Attachments,  Prev: Retrieving Attachments Content,  Up: Attachments<2>

10.4.1.5 Retrieving Attachments Encoding Info
.............................................

By using `att_encoding_info=true' query parameter you may retrieve
information about compressed attachments size and used codec.

  *Request*:

    GET /recipes/SpaghettiWithMeatballs?att_encoding_info=true HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 736
    Content-Type: application/json
    Date: Tue, 13 Aug 2013 21:35:37 GMT
    ETag: "5-fd96acb3256302bf0dd2f32713161f2a"
    Server: CouchDB (Erlang/OTP)

    {
        "_attachments": {
            "grandma_recipe.txt": {
                "content_type": "text/plain",
                "digest": "md5-Ids41vtv725jyrN7iUvMcQ==",
                "encoded_length": 693,
                "encoding": "gzip",
                "length": 1872,
                "revpos": 4,
                "stub": true
            },
            "my_recipe.txt": {
                "content_type": "text/plain",
                "digest": "md5-198BPPNiT5fqlLxoYYbjBA==",
                "encoded_length": 100,
                "encoding": "gzip",
                "length": 85,
                "revpos": 5,
                "stub": true
            },
            "photo.jpg": {
                "content_type": "image/jpeg",
                "digest": "md5-7Pv4HW2822WY1r/3WDbPug==",
                "length": 165504,
                "revpos": 2,
                "stub": true
            }
        },
        "_id": "SpaghettiWithMeatballs",
        "_rev": "5-fd96acb3256302bf0dd2f32713161f2a",
        "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
        "ingredients": [
            "spaghetti",
            "tomato sauce",
            "meatballs"
        ],
        "name": "Spaghetti with meatballs"
    }



File: CouchDB.info,  Node: Creating Multiple Attachments,  Prev: Retrieving Attachments Encoding Info,  Up: Attachments<2>

10.4.1.6 Creating Multiple Attachments
......................................

To create a document with multiple attachments with single request you
need just inline base64 encoded attachments data into the document body:

    {
      "_id":"multiple_attachments",
      "_attachments":
      {
        "foo.txt":
        {
          "content_type":"text\/plain",
          "data": "VGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIHRleHQ="
        },

       "bar.txt":
        {
          "content_type":"text\/plain",
          "data": "VGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIHRleHQ="
        }
      }
    }

Alternatively, you can upload a document with attachments more
efficiently in `multipart/related' format. This avoids having to
Base64-encode the attachments, saving CPU and bandwidth. To do this,
set the Content-Type(1) header of the *note PUT /{db}/{docid}: 47.
request to `multipart/related'.

  The first MIME body is the document itself, which should have its own
Content-Type(2) of `application/json"'. It also should include  an
`_attachments' metadata object in which each attachment object has a
key `follows' with value `true'.

  The subsequent MIME bodies are the attachments.

  *Request*:

    PUT /temp/somedoc HTTP/1.1
    Accept: application/json
    Content-Length: 372
    Content-Type: multipart/related;boundary="abc123"
    Host: localhost:5984
    User-Agent: HTTPie/0.6.0

    --abc123
    Content-Type: application/json

    {
        "body": "This is a body.",
        "_attachments": {
            "foo.txt": {
                "follows": true,
                "content_type": "text/plain",
                "length": 21
            },
            "bar.txt": {
                "follows": true,
                "content_type": "text/plain",
                "length": 20
            }
        }
    }

    --abc123

    this is 21 chars long
    --abc123

    this is 20 chars lon
    --abc123--

*Response*:

    HTTP/1.1 201 Created
    Cache-Control: must-revalidate
    Content-Length: 72
    Content-Type: application/json
    Date: Sat, 28 Sep 2013 09:13:24 GMT
    ETag: "1-5575e26acdeb1df561bb5b70b26ba151"
    Location: http://localhost:5984/temp/somedoc
    Server: CouchDB (Erlang OTP)

    {
        "id": "somedoc",
        "ok": true,
        "rev": "1-5575e26acdeb1df561bb5b70b26ba151"
    }


  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17


File: CouchDB.info,  Node: Getting a List of Revisions,  Next: Obtaining an Extended Revision History,  Prev: Attachments<2>,  Up: /db/doc

10.4.1.7 Getting a List of Revisions
....................................

You can obtain a list of the revisions for a given document by adding
the `revs=true' parameter to the request URL:

  *Request*:

    GET /recipes/SpaghettiWithMeatballs?revs=true  HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 584
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 11:38:26 GMT
    ETag: "5-fd96acb3256302bf0dd2f32713161f2a"
    Server: CouchDB (Erlang/OTP)

    {
        "_id": "SpaghettiWithMeatballs",
        "_rev": "8-6f5ad8db0f34af24a6e0984cd1a6cfb9",
        "_revisions": {
            "ids": [
                "6f5ad8db0f34af24a6e0984cd1a6cfb9",
                "77fba3a059497f51ec99b9b478b569d2",
                "136813b440a00a24834f5cb1ddf5b1f1",
                "fd96acb3256302bf0dd2f32713161f2a",
                "874985bc28906155ba0e2e0538f67b05",
                "0de77a37463bf391d14283e626831f2e",
                "d795d1b924777732fdea76538c558b62",
                "917fa2381192822767f010b95b45325b"
            ],
            "start": 8
        },
        "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
        "ingredients": [
            "spaghetti",
            "tomato sauce",
            "meatballs"
        ],
        "name": "Spaghetti with meatballs"
    }

The returned JSON structure includes the original document, including a
`_revisions' structure that includes the revision information in next
form:

   - *ids* (_array_): Array of valid revision IDs, in reverse order
     (latest first)

   - *start* (_number_): Prefix number for the latest revision


File: CouchDB.info,  Node: Obtaining an Extended Revision History,  Next: Obtaining a Specific Revision,  Prev: Getting a List of Revisions,  Up: /db/doc

10.4.1.8 Obtaining an Extended Revision History
...............................................

You can get additional information about the revisions for a given
document by supplying the `revs_info' argument to the query:

  *Request*:

    GET /recipes/SpaghettiWithMeatballs?revs_info=true  HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 802
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 11:40:55 GMT
    Server: CouchDB (Erlang/OTP)

    {
        "_id": "SpaghettiWithMeatballs",
        "_rev": "8-6f5ad8db0f34af24a6e0984cd1a6cfb9",
        "_revs_info": [
            {
                "rev": "8-6f5ad8db0f34af24a6e0984cd1a6cfb9",
                "status": "available"
            },
            {
                "rev": "7-77fba3a059497f51ec99b9b478b569d2",
                "status": "deleted"
            },
            {
                "rev": "6-136813b440a00a24834f5cb1ddf5b1f1",
                "status": "available"
            },
            {
                "rev": "5-fd96acb3256302bf0dd2f32713161f2a",
                "status": "missing"
            },
            {
                "rev": "4-874985bc28906155ba0e2e0538f67b05",
                "status": "missing"
            },
            {
                "rev": "3-0de77a37463bf391d14283e626831f2e",
                "status": "missing"
            },
            {
                "rev": "2-d795d1b924777732fdea76538c558b62",
                "status": "missing"
            },
            {
                "rev": "1-917fa2381192822767f010b95b45325b",
                "status": "missing"
            }
        ],
        "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
        "ingredients": [
            "spaghetti",
            "tomato sauce",
            "meatballs"
        ],
        "name": "Spaghetti with meatballs"
    }

The returned document contains `_revs_info' field with extended revision
information, including the availability and status of each revision.
This array field contains objects with following structure:

   - *rev* (_string_): Full revision string

   - *status* (_string_): Status of the revision.  Maybe one of:

        - `available': Revision is available for retrieving with `rev'
          query parameter

        - `missing': Revision is not available

        - `deleted': Revision belongs to deleted document


File: CouchDB.info,  Node: Obtaining a Specific Revision,  Next: Updating an Existing Document,  Prev: Obtaining an Extended Revision History,  Up: /db/doc

10.4.1.9 Obtaining a Specific Revision
......................................

To get a specific revision, use the `rev' argument to the request, and
specify the full revision number. The specified revision of the
document will be returned, including a `_rev' field specifying the
revision that was requested.

  *Request*:

    GET /recipes/SpaghettiWithMeatballs?rev=6-136813b440a00a24834f5cb1ddf5b1f1  HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 271
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 11:40:55 GMT
    Server: CouchDB (Erlang/OTP)

    {
        "_id": "SpaghettiWithMeatballs",
        "_rev": "6-136813b440a00a24834f5cb1ddf5b1f1",
        "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
        "ingredients": [
            "spaghetti",
            "tomato sauce",
            "meatballs"
        ],
        "name": "Spaghetti with meatballs"
    }


* Menu:

* Retrieving Deleted Documents::


File: CouchDB.info,  Node: Retrieving Deleted Documents,  Up: Obtaining a Specific Revision

10.4.1.10 Retrieving Deleted Documents
......................................

CouchDB doesn't actually deletes documents via *note DELETE
/{db}/{docid}: 48.  Instead of this, it leaves tombstone with very
basic information about document.  If you just *note GET /{db}/{docid}:
46. CouchDB returns 404 Not Found(1) response:

  *Request*:

    GET /recipes/FishStew  HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 404 Object Not Found
    Cache-Control: must-revalidate
    Content-Length: 41
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 12:23:27 GMT
    Server: CouchDB (Erlang/OTP)

    {
        "error": "not_found",
        "reason": "deleted"
    }

However, you may retrieve document's tombstone by using `rev' query
parameter with *note GET /{db}/{docid}: 46. request:

  *Request*:

    GET /recipes/FishStew?rev=2-056f5f44046ecafc08a2bc2b9c229e20  HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Length: 79
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 12:30:22 GMT
    ETag: "2-056f5f44046ecafc08a2bc2b9c229e20"
    Server: CouchDB (Erlang/OTP)

    {
        "_deleted": true,
        "_id": "FishStew",
        "_rev": "2-056f5f44046ecafc08a2bc2b9c229e20"
    }


  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5


File: CouchDB.info,  Node: Updating an Existing Document,  Next: Copying from a Specific Revision,  Prev: Obtaining a Specific Revision,  Up: /db/doc

10.4.1.11 Updating an Existing Document
.......................................

To update an existing document you must specify the current revision
number within the `_rev' parameter.

  *Request*:

    PUT /recipes/SpaghettiWithMeatballs HTTP/1.1
    Accept: application/json
    Content-Length: 258
    Content-Type: application/json
    Host: localhost:5984

    {
        "_rev": "1-917fa2381192822767f010b95b45325b",
        "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
        "ingredients": [
            "spaghetti",
            "tomato sauce",
            "meatballs"
        ],
        "name": "Spaghetti with meatballs",
        "serving": "hot"
    }

Alternatively, you can supply the current revision number in the
`If-Match' HTTP header of the request:

    PUT /recipes/SpaghettiWithMeatballs HTTP/1.1
    Accept: application/json
    Content-Length: 258
    Content-Type: application/json
    If-Match: 1-917fa2381192822767f010b95b45325b
    Host: localhost:5984

    {
        "description": "An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.",
        "ingredients": [
            "spaghetti",
            "tomato sauce",
            "meatballs"
        ],
        "name": "Spaghetti with meatballs",
        "serving": "hot"
    }

*Response*:

    HTTP/1.1 201 Created
    Cache-Control: must-revalidate
    Content-Length: 85
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 20:33:56 GMT
    ETag: "2-790895a73b63fb91dd863388398483dd"
    Location: http://localhost:5984/recipes/SpaghettiWithMeatballs
    Server: CouchDB (Erlang/OTP)

    {
        "id": "SpaghettiWithMeatballs",
        "ok": true,
        "rev": "2-790895a73b63fb91dd863388398483dd"
    }



File: CouchDB.info,  Node: Copying from a Specific Revision,  Next: Copying to an Existing Document,  Prev: Updating an Existing Document,  Up: /db/doc

10.4.1.12 Copying from a Specific Revision
..........................................

To copy _from_ a specific version, use the `rev' argument to the query
string or If-Match(1):

  *Request*:

    COPY /recipes/SpaghettiWithMeatballs HTTP/1.1
    Accept: application/json
    Destination: http://localhost:5984/recipes_old/SpaghettiWithMeatballs_Original
    If-Match: 1-917fa2381192822767f010b95b45325b
    Host: localhost:5984

*Response*:

    HTTP/1.1 201 Created
    Cache-Control: must-revalidate
    Content-Length: 93
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 14:21:00 GMT
    ETag: "1-917fa2381192822767f010b95b45325b"
    Location: http://localhost:5984/recipes_old/SpaghettiWithMeatballs_Original
    Server: CouchDB (Erlang/OTP)

    {
        "id": "SpaghettiWithMeatballs_Original",
        "ok": true,
        "rev": "1-917fa2381192822767f010b95b45325b"
    }


  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24


File: CouchDB.info,  Node: Copying to an Existing Document,  Prev: Copying from a Specific Revision,  Up: /db/doc

10.4.1.13 Copying to an Existing Document
.........................................

To copy to an existing document, you must specify the current revision
string for the target document by appending the `rev' parameter to the
Destination(1) header string.

  *Request*:

    COPY /recipes/SpaghettiWithMeatballs?rev=8-6f5ad8db0f34af24a6e0984cd1a6cfb9 HTTP/1.1
    Accept: application/json
    Destination: http://localhost:5984/recipes_old/SpaghettiWithMeatballs_Original?rev=1-917fa2381192822767f010b95b45325b
    Host: localhost:5984

*Response*:

    HTTP/1.1 201 Created
    Cache-Control: must-revalidate
    Content-Length: 93
    Content-Type: application/json
    Date: Wed, 14 Aug 2013 14:21:00 GMT
    ETag: "2-62e778c9ec09214dd685a981dcc24074""
    Location: http://localhost:5984/recipes_old/SpaghettiWithMeatballs_Original
    Server: CouchDB (Erlang/OTP)

    {
        "id": "SpaghettiWithMeatballs_Original",
        "ok": true,
        "rev": "2-62e778c9ec09214dd685a981dcc24074"
    }


  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2518#section-9.3


File: CouchDB.info,  Node: /db/doc/attachment,  Prev: /db/doc,  Up: Documents<2>

10.4.2 `/db/doc/attachment'
---------------------------

 -- Head: HEAD /{db}/{docid}/{attname}
     Returns the HTTP headers containing a minimal amount of information
     about the specified attachment. The method supports the same query
     arguments as the *note GET /{db}/{docid}/{attname}: 4b. method,
     but only the header information (including attachment size,
     encoding and the MD5 hash as an ETag(1)), is returned.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

             * *attname* - Attachment name

          Request Headers:

             * If-Match(2) - Document's revision. Alternative to `rev'
               query parameter

             * If-None-Match(3) - Attachment's base64 encoded MD5
               binary digest.  _Optional_

          Query Parameters:

             * *rev* (_string_) - Document's revision. _Optional_

          Response Headers:

             * Accept-Ranges(4) - *note Range request aware: 3c9.  Used
               for attachments with `application/octet-stream' content
               type

             * Content-Encoding(5) - Used compression codec. Available
               if attachment's `content_type' is in *note list of
               compressiable types: 50.

             * Content-Length(6) - Attachment size. If compression
               codec was used, this value is about compressed size, not
               actual

             * Content-MD5(7) - Base64 encoded MD5 binary digest

             * ETag(8) - Double quoted base64 encoded MD5 binary digest

          Status Codes:

             * 200 OK(9) - Attachment exists

             * 304 Not Modified(10) - Attachment wasn't modified if
               ETag(11) equals specified If-None-Match(12) header

             * 401 Unauthorized(13) - Read privilege required

             * 404 Not Found(14) - Specified database, document or
               attachment was not found

     *Request*:

         HEAD /recipes/SpaghettiWithMeatballs/recipe.txt HTTP/1.1
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Accept-Ranges: none
         Cache-Control: must-revalidate
         Content-Encoding: gzip
         Content-Length: 100
         Content-MD5: vVa/YgiE1+Gh0WfoFJAcSg==
         Content-Type: text/plain
         Date: Thu, 15 Aug 2013 12:42:42 GMT
         ETag: "vVa/YgiE1+Gh0WfoFJAcSg=="
         Server: CouchDB (Erlang/OTP)



 -- Get: GET /{db}/{docid}/{attname}
     Returns the file attachment associated with the document.  The raw
     data of the associated attachment is returned (just as if you were
     accessing a static file. The returned Content-Type(15) will be the
     same as the content type set when the document attachment was
     submitted into the database.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

             * *attname* - Attachment name

          Request Headers:

             * If-Match(16) - Document's revision. Alternative to `rev'
               query parameter

             * If-None-Match(17) - Attachment's base64 encoded MD5
               binary digest.  _Optional_

          Query Parameters:

             * *rev* (_string_) - Document's revision. _Optional_

          Response Headers:

             * Accept-Ranges(18) - *note Range request aware: 3c9.
               Used for attachments with `application/octet-stream'

             * Content-Encoding(19) - Used compression codec. Available
               if attachment's `content_type' is in *note list of
               compressiable types: 50.

             * Content-Length(20) - Attachment size. If compression
               codec is used, this value is about compressed size, not
               actual

             * Content-MD5(21) - Base64 encoded MD5 binary digest

             * ETag(22) - Double quoted base64 encoded MD5 binary digest

          Response : Stored content

          Status Codes:

             * 200 OK(23) - Attachment exists

             * 304 Not Modified(24) - Attachment wasn't modified if
               ETag(25) equals specified If-None-Match(26) header

             * 401 Unauthorized(27) - Read privilege required

             * 404 Not Found(28) - Specified database, document or
               attachment was not found

 -- Put: PUT /{db}/{docid}/{attname}
     Uploads the supplied content as an attachment to the specified
     document.  The attachment name provided must be a URL encoded
     string. You must also supply either the `rev' query argument or
     the If-Match(29) HTTP header for validation, and the HTTP headers
     (to set the attachment content type).

     If case when uploading an attachment using an existing attachment
     name, CouchDB will update the corresponding stored content of the
     database.  Since you must supply the revision information to add
     an attachment to the document, this serves as validation to update
     the existing attachment.

          Note: Uploading an attachment updates the corresponding
          document revision.  Revisions are tracked for the parent
          document, not individual attachments.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

             * *attname* - Attachment name

          Request Headers:

             * Content-Type(30) - Attachment MIME type. _Required_

             * If-Match(31) - Document revision. Alternative to `rev'
               query parameter

          Query Parameters:

             * *rev* (_string_) - Document revision. _Required_

          Response Headers:

             * Accept-Ranges(32) - *note Range request aware: 3c9.
               Used for attachments with `application/octet-stream'

             * Content-Encoding(33) - Used compression codec. Available
               if attachment's `content_type' is in *note list of
               compressiable types: 50.

             * Content-Length(34) - Attachment size. If compression
               codec is used, this value is about compressed size, not
               actual

             * Content-MD5(35) - Base64 encoded MD5 binary digest

             * ETag(36) - Double quoted base64 encoded MD5 binary digest

          Response JSON Object:

             * *id* (_string_) - Document ID

             * *ok* (_boolean_) - Operation status

             * *rev* (_string_) - Revision MVCC token

          Status Codes:

             * 200 OK(37) - Attachment successfully removed

             * 202 Accepted(38) - Request was accepted, but changes are
               not yet stored on disk

             * 400 Bad Request(39) - Invalid request body or parameters

             * 401 Unauthorized(40) - Write privileges required

             * 404 Not Found(41) - Specified database, document or
               attachment was not found

             * 409 Conflict(42) - Document's revision wasn't specified
               or it's not the latest

     *Request*:

         PUT /recipes/SpaghettiWithMeatballs/recipe.txt HTTP/1.1
         Accept: application/json
         Content-Length: 86
         Content-Type: text/plain
         Host: localhost:5984
         If-Match: 1-917fa2381192822767f010b95b45325b

         1. Cook spaghetti
         2. Cook meatballs
         3. Mix them
         4. Add tomato sauce
         5. ...
         6. PROFIT!

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 85
         Content-Type: application/json
         Date: Thu, 15 Aug 2013 12:38:04 GMT
         ETag: "2-ce91aed0129be8f9b0f650a2edcfd0a4"
         Location: http://localhost:5984/recipes/SpaghettiWithMeatballs/recipe.txt
         Server: CouchDB (Erlang/OTP)

         {
             "id": "SpaghettiWithMeatballs",
             "ok": true,
             "rev": "2-ce91aed0129be8f9b0f650a2edcfd0a4"
         }



 -- Delete: DELETE /{db}/{docid}/{attname}
     Deletes the attachment `attachment' of the specified `doc'. You
     must supply the `rev' query parameter or If-Match(43) with the
     current revision to delete the attachment.

          Note: Deleting an attachment updates the corresponding
          document revision.  Revisions are tracked for the parent
          document, not individual attachments.

          Parameters:

             * *db* - Database name

             * *docid* - Document ID

          Request Headers:

             * Accept(44) -

                  - `application/json'

                  - `text/plain'

             * If-Match(45) - Document revision. Alternative to `rev'
               query parameter

             * *X-Couch-Full-Commit* - Overrides server's *note commit
               policy: 71. Possible values are: `false' and `true'.
               _Optional_

          Query Parameters:

             * *rev* (_string_) - Document revision. _Required_

             * *batch* (_string_) - Store changes in *note batch mode:
               37e. Possible values: `ok'. _Optional_

          Response Headers:

             * Content-Type(46) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * ETag(47) - Double quoted document's new revision

          Response JSON Object:

             * *id* (_string_) - Document ID

             * *ok* (_boolean_) - Operation status

             * *rev* (_string_) - Revision MVCC token

          Status Codes:

             * 200 OK(48) - Attachment successfully removed

             * 202 Accepted(49) - Request was accepted, but changes are
               not yet stored on disk

             * 400 Bad Request(50) - Invalid request body or parameters

             * 401 Unauthorized(51) - Write privileges required

             * 404 Not Found(52) - Specified database, document or
               attachment was not found

             * 409 Conflict(53) - Document's revision wasn't specified
               or it's not the latest

     *Request*:

         DELETE /recipes/SpaghettiWithMeatballs?rev=6-440b2dd39c20413045748b42c6aba6e2 HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     Alternatively, instead of `rev' query parameter you may use
     If-Match(54) header:

         DELETE /recipes/SpaghettiWithMeatballs HTTP/1.1
         Accept: application/json
         If-Match: 6-440b2dd39c20413045748b42c6aba6e2
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 85
         Content-Type: application/json
         Date: Wed, 14 Aug 2013 12:23:13 GMT
         ETag: "7-05185cf5fcdf4b6da360af939431d466"
         Server: CouchDB (Erlang/OTP)

         {
             "id": "SpaghettiWithMeatballs",
             "ok": true,
             "rev": "7-05185cf5fcdf4b6da360af939431d466"
         }



* Menu:

* HTTP Range Requests::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.5

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.15

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5

  (11) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (12) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26

  (13) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (14) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (15) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (16) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (17) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26

  (18) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.5

  (19) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11

  (20) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13

  (21) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.15

  (22) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (23) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (24) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5

  (25) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (26) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26

  (27) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (28) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (29) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (30) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (31) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (32) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.5

  (33) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11

  (34) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13

  (35) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.15

  (36) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (37) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (38) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (39) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (40) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (41) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (42) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

  (43) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (44) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (45) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24

  (46) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (47) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (48) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (49) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

  (50) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (51) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (52) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (53) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

  (54) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24


File: CouchDB.info,  Node: HTTP Range Requests,  Up: /db/doc/attachment

10.4.2.1 HTTP Range Requests
............................

HTTP allows you to specify byte ranges for requests. This allows the
implementation of resumable downloads and skippable audio and video
streams alike. This is available for all attachments inside CouchDB.

  This is just a real quick run through how this looks under the hood.
Usually, you will have larger binary files to serve from CouchDB, like
MP3s and videos, but to make things a little more obvious, I use a text
file here (Note that I use the `application/octet-stream'
:header`Content-Type` instead of `text/plain').

    shell> cat file.txt
    My hovercraft is full of eels!

Now let's store this text file as an attachment in CouchDB. First, we
create a database:

    shell> curl -X PUT http://127.0.0.1:5984/test
    {"ok":true}

Then we create a new document and the file attachment in one go:

    shell> curl -X PUT http://127.0.0.1:5984/test/doc/file.txt \
                -H "Content-Type: application/octet-stream" -d@file.txt
    {"ok":true,"id":"doc","rev":"1-287a28fa680ae0c7fb4729bf0c6e0cf2"}

Now we can request the whole file easily:

    shell> curl -X GET http://127.0.0.1:5984/test/doc/file.txt
    My hovercraft is full of eels!

But say we only want the first 13 bytes:

    shell> curl -X GET http://127.0.0.1:5984/test/doc/file.txt \
                -H "Range: bytes=0-12"
    My hovercraft

HTTP supports many ways to specify single and even multiple byte
ranges. Read all about it in RFC 2616(1).

     Note: Databases that have been created with CouchDB 1.0.2 or
     earlier will support range requests in 1.6, but they are using a
     less-optimal algorithm. If you plan to make heavy use of this
     feature, make sure to compact your database with CouchDB 1.6 to
     take advantage of a better algorithm to find byte ranges.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2616.html#section-14.27


File: CouchDB.info,  Node: Design Documents,  Next: Local non-replicating Documents,  Prev: Documents<2>,  Up: API Reference<2>

10.5 Design Documents
=====================

In CouchDB, design documents provide the main interface for building a
CouchDB application. The design document defines the views used to
extract information from CouchDB through one or more views. Design
documents are created within your CouchDB instance in the same way as
you create database documents, but the content and definition of the
documents is different. Design Documents are named using an ID defined
with the design document URL path, and this URL can then be used to
access the database contents.

  Views and lists operate together to provide automated (and formatted)
output from your database.

* Menu:

* /db/_design/design-doc::
* /db/_design/design-doc/attachment::
* /db/_design/design-doc/_info::
* /db/_design/design-doc/_view/view-name::
* /db/_design/design-doc/_show/show-name::
* /db/_design/design-doc/_show/show-name/doc-id::
* /db/_design/design-doc/_list/list-name/view-name::
* /db/_design/design-doc/_list/list-name/other-ddoc/view-name::
* /db/_design/design-doc/_update/update-name::
* /db/_design/design-doc/_update/update-name/doc-id::
* /db/_design/design-doc/_rewrite/path::


File: CouchDB.info,  Node: /db/_design/design-doc,  Next: /db/_design/design-doc/attachment,  Up: Design Documents

10.5.1 `/db/_design/design-doc'
-------------------------------

 -- Head: HEAD /{db}/_design/{ddoc}
     Returns the HTTP Headers containing a minimal amount of information
     about the specified design document.

See also
........

     *note HEAD /{db}/{docid}: 45.

 -- Get: GET /{db}/_design/{ddoc}
     Returns the contents of the design document specified with the
     name of the design document and from the specified database from
     the URL. Unless you request a specific revision, the latest
     revision of the document will always be returned.

See also
........

     *note GET /{db}/{docid}: 46.

 -- Put: PUT /{db}/_design/{ddoc}
     The PUT(1) method creates a new named design document, or creates
     a new revision of the existing design document.

     The design documents have some agreement upon their fields and
     structure.  Currently it is the following:

        * *language* (_string_): Defines *note Query Server: 2e9.
          *note key: cb. to process design document functions

        * *options* (_object_): View's default options

        * *filters* (_object_): *note Filter functions: 235. definition

        * *lists* (_object_): *note List functions: f8. definition

        * *rewrites* (_array_): Rewrite rules definition

        * *shows* (_object_): *note Show functions: 176. definition

        * *updates* (_object_): *note Update functions: 29e. definition

        * *validate_doc_update* (_string_): *note Validate document
          update: 112.  function source

        * *views* (_object_): *note View functions: 10c. definition.

     Note, that for `filters', `lists', `shows' and `updates' fields
     objects are mapping of function name to string function source
     code.  For `views' mapping is the same except that values are
     objects with `map' and `reduce' (optional) keys which also
     contains functions source code.

See also
........

     *note PUT /{db}/{docid}: 47.

 -- Delete: DELETE /{db}/_design/{ddoc}
     Deletes the specified document from the database. You must supply
     the current (latest) revision, either by using the `rev' parameter
     to specify the revision.

See also
........

     *note DELETE /{db}/{docid}: 48.

 -- Copy: COPY /{db}/_design/{ddoc}
     The COPY(2) (which is non-standard HTTP) copies an existing design
     document to a new or existing one.

          Note: Copying a design document does automatically
          reconstruct the view indexes. These will be recreated, as
          with other views, the first time the new view is accessed.

See also
........

     *note COPY /{db}/{docid}: 49.

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6

  (2) http://tools.ietf.org/html/rfc2518#section-8.8


File: CouchDB.info,  Node: /db/_design/design-doc/attachment,  Next: /db/_design/design-doc/_info,  Prev: /db/_design/design-doc,  Up: Design Documents

10.5.2 `/db/_design/design-doc/attachment'
------------------------------------------

 -- Head: HEAD /{db}/_design/{ddoc}/{attname}
     Returns the HTTP headers containing a minimal amount of information
     about the specified attachment.

See also
........

     *note HEAD /{db}/{docid}/{attname}: 4a.

 -- Get: GET /{db}/_design/{ddoc}/{attname}
     Returns the file attachment associated with the design document.
     The raw data of the associated attachment is returned (just as if
     you were accessing a static file.

See also
........

     *note GET /{db}/{docid}/{attname}: 4b.

 -- Put: PUT /{db}/_design/{ddoc}/{attname}
     Uploads the supplied content as an attachment to the specified
     design document. The attachment name provided must be a URL
     encoded string.

See also
........

     *note PUT /{db}/{docid}/{attname}: 4c.

 -- Delete: DELETE /{db}/_design/{ddoc}/{attname}
     Deletes the attachment of the specified design document.

See also
........

     *note DELETE /{db}/{docid}/{attname}: 4d.


File: CouchDB.info,  Node: /db/_design/design-doc/_info,  Next: /db/_design/design-doc/_view/view-name,  Prev: /db/_design/design-doc/attachment,  Up: Design Documents

10.5.3 `/db/_design/design-doc/_info'
-------------------------------------

 -- Get: GET /{db}/_design/{ddoc}/_info
     Obtains information about the specified design document, including
     the index, index size and current status of the design document
     and associated index information.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'


          Response JSON Object:

             * *name* (_string_) - Design document name

             * *view_index* (_object_) - *note View Index Information:
               3d4.

          Status Codes:

             * 200 OK(3) - Request completed successfully

     *Request*:

         GET /recipes/_design/recipe/_info HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Length: 263
         Content-Type: application/json
         Date: Sat, 17 Aug 2013 12:54:17 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "name": "recipe",
             "view_index": {
                 "compact_running": false,
                 "data_size": 926691,
                 "disk_size": 1982704,
                 "language": "python",
                 "purge_seq": 0,
                 "signature": "a59a1bb13fdf8a8a584bc477919c97ac",
                 "update_seq": 12397,
                 "updater_running": false,
                 "waiting_clients": 0,
                 "waiting_commit": false
             }
         }



* Menu:

* View Index Information::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1


File: CouchDB.info,  Node: View Index Information,  Up: /db/_design/design-doc/_info

10.5.3.1 View Index Information
...............................

The response from *note GET /{db}/_design/{ddoc}/_info: 25. contains
`view_index' (_object_) field with the next structure:

   * *compact_running* (_boolean_):  Indicates whether a compaction
     routine is currently running on the view

   * *data_size* (_number_): Actual size in bytes of the view

   * *disk_size* (_number_): Size in bytes of the view as stored on disk

   * *language* (_string_): Language for the defined views

   * *purge_seq* (_number_): The purge sequence that has been processed

   * *signature* (_string_): MD5 signature of the views for the design
     document

   * *update_seq* (_number_): The update sequence of the corresponding
     database that has been indexed

   * *updater_running* (_boolean_): Indicates if the view is currently
     being updated

   * *waiting_clients* (_number_): Number of clients waiting on views
     from this design document

   * *waiting_commit* (_boolean_): Indicates if there are outstanding
     commits to the underlying database that need to processed


File: CouchDB.info,  Node: /db/_design/design-doc/_view/view-name,  Next: /db/_design/design-doc/_show/show-name,  Prev: /db/_design/design-doc/_info,  Up: Design Documents

10.5.4 `/db/_design/design-doc/_view/view-name'
-----------------------------------------------

 -- Get: GET /{db}/_design/{ddoc}/_view/{view}
     Executes the specified view function from the specified design
     document.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

             * *view* - View function name

          Request Headers:

             * Accept(1) -

                  - `application/json'

                  - `text/plain'


          Query Parameters:

             * *conflicts* (_boolean_) - Includes `conflicts'
               information in response.  Ignored if `include_docs'
               isn't `true'. Default is `false'

             * *descending* (_boolean_) - Return the documents in
               descending by key order.  Default is `false'

             * *endkey* (_string_) - Stop returning records when the
               specified key is reached. _Optional_

             * *end_key* (_string_) - Alias for `endkey' param

             * *endkey_docid* (_string_) - Stop returning records when
               the specified document ID is reached. _Optional_

             * *end_key_doc_id* (_string_) - Alias for `endkey_docid'
               param

             * *group* (_boolean_) - Group the results using the reduce
               function to a group or single row. Default is `false'

             * *group_level* (_number_) - Specify the group level to be
               used. _Optional_

             * *include_docs* (_boolean_) - Include the associated
               document with each row.  Default is `false'.

             * *attachments* (_boolean_) - Include the Base64-encoded
               content of *note attachments: 390. in the documents that
               are included if `include_docs' is `true'. Ignored if
               `include_docs' isn't `true'.  Default is `false'.

             * *att_encoding_info* (_boolean_) - Include encoding
               information in attachment stubs if `include_docs' is
               `true' and the particular attachment is compressed.
               Ignored if `include_docs' isn't `true'. Default is
               `false'.

             * *inclusive_end* (_boolean_) - Specifies whether the
               specified end key should be included in the result.
               Default is `true'

             * *key* (_string_) - Return only documents that match the
               specified key.  _Optional_

             * *limit* (_number_) - Limit the number of the returned
               documents to the specified number. _Optional_

             * *reduce* (_boolean_) - Use the reduction function.
               Default is `true'

             * *skip* (_number_) - Skip this number of records before
               starting to return the results. Default is `0'

             * *stale* (_string_) - Allow the results from a stale view
               to be used.  Supported values: `ok' and `update_after'.
               _Optional_

             * *startkey* (_string_) - Return records starting with the
               specified key.  _Optional_

             * *start_key* (_string_) - Alias for `startkey' param

             * *startkey_docid* (_string_) - Return records starting
               with the specified document ID. _Optional_

             * *start_key_doc_id* (_string_) - Alias for
               `startkey_docid' param

             * *update_seq* (_boolean_) - Response includes an
               `update_seq' value indicating which sequence id of the
               database the view reflects.  Default is `false'

          Response Headers:

             * Content-Type(2) -

                  - `application/json'

                  - `text/plain; charset=utf-8'

             * ETag(3) - Response signature

             * Transfer-Encoding(4) - `chunked'

          Response JSON Object:

             * *offset* (_number_) - Offset where the document list
               started

             * *rows* (_array_) - Array of view row objects. By default
               the information returned contains only the document ID
               and revision

             * *total_rows* (_number_) - Number of documents in the
               database/view

             * *update_seq* (_number_) - Current update sequence for
               the database

          Status Codes:

             * 200 OK(5) - Request completed successfully

             * 400 Bad Request(6) - Invalid request

             * 401 Unauthorized(7) - Read permission required

             * 404 Not Found(8) - Specified database, design document
               or view is missed

             * 500 Internal Server Error(9) - View function execution
               error

     *Request*:

         GET /recipes/_design/ingredients/_view/by_name HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Type: application/json
         Date: Wed, 21 Aug 2013 09:12:06 GMT
         ETag: "2FOLSBSW4O6WB798XU4AQYA9B"
         Server: CouchDB (Erlang/OTP)
         Transfer-Encoding: chunked

         {
             "offset": 0,
             "rows": [
                 {
                     "id": "SpaghettiWithMeatballs",
                     "key": "meatballs",
                     "value": 1
                 },
                 {
                     "id": "SpaghettiWithMeatballs",
                     "key": "spaghetti",
                     "value": 1
                 },
                 {
                     "id": "SpaghettiWithMeatballs",
                     "key": "tomato sauce",
                     "value": 1
                 }
             ],
             "total_rows": 3
         }



  Changed in version 1.6.0: added `attachments' and `att_encoding_info'
parameters

     Warning: Using the `attachments' parameter to include attachments
     in view results is not recommended for large attachment sizes.
     Also note that the Base64-encoding that is used leads to a 33%
     overhead (i.e. one third) in transfer size for attachments.

 -- Post: POST /{db}/_design/{ddoc}/_view/{view}
     Executes the specified view function from the specified design
     document.  Unlike *note GET /{db}/_design/{ddoc}/_view/{view}: 31.
     for accessing views, the POST(10) method supports the specification
     of explicit keys to be retrieved from the view results. The
     remainder of the POST(11) view functionality is identical to the
     *note GET /{db}/_design/{ddoc}/_view/{view}: 31. API.

     *Request*:

         POST /recipes/_design/ingredients/_view/by_name HTTP/1.1
         Accept: application/json
         Content-Length: 37
         Host: localhost:5984

         {
             "keys": [
                 "meatballs",
                 "spaghetti"
             ]
         }

     *Response*:

         HTTP/1.1 200 OK
         Cache-Control: must-revalidate
         Content-Type: application/json
         Date: Wed, 21 Aug 2013 09:14:13 GMT
         ETag: "6R5NM8E872JIJF796VF7WI3FZ"
         Server: CouchDB (Erlang/OTP)
         Transfer-Encoding: chunked

         {
             "offset": 0,
             "rows": [
                 {
                     "id": "SpaghettiWithMeatballs",
                     "key": "meatballs",
                     "value": 1
                 },
                 {
                     "id": "SpaghettiWithMeatballs",
                     "key": "spaghetti",
                     "value": 1
                 }
             ],
             "total_rows": 3
         }



* Menu:

* View Options::
* Querying Views and Indexes::
* Sorting Returned Rows::
* Using Limits and Skipping Rows::

  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41

  (5) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

  (7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

  (8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

  (9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1

  (10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5

  (11) http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5


File: CouchDB.info,  Node: View Options,  Next: Querying Views and Indexes,  Up: /db/_design/design-doc/_view/view-name

10.5.4.1 View Options
.....................

There are two view indexing options that can be defined in a design
document as boolean properties of an `options' object. Unlike the
others querying options, these aren't URL parameters because they take
effect when the view index is generated, not when it's accessed:

   - *local_seq* (_boolean_): Makes documents' local sequence numbers
     available to map functions (as a `_local_seq' document property)

   - *include_design* (_boolean_): Allows map functions to be called on
     design documents as well as regular documents

  In additional to these options, you may specify *note any other: 2c4.
with their default value. E.g. having option `"include_docs": true' will
automatically includes document body for view results response. You
still may override such by explicitly defining same query parameter
name with other value.


File: CouchDB.info,  Node: Querying Views and Indexes,  Next: Sorting Returned Rows,  Prev: View Options,  Up: /db/_design/design-doc/_view/view-name

10.5.4.2 Querying Views and Indexes
...................................

The definition of a view within a design document also creates an index
based on the key information defined within each view. The production
and use of the index significantly increases the speed of access and
searching or selecting documents from the view.

  However, the index is not updated when new documents are added or
modified in the database. Instead, the index is generated or updated,
either when the view is first accessed, or when the view is accessed
after a document has been updated. In each case, the index is updated
before the view query is executed against the database.

  View indexes are updated incrementally in the following situations:

   - A new document has been added to the database.

   - A document has been deleted from the database.

   - A document in the database has been updated.

  View indexes are rebuilt entirely when the view definition changes. To
achieve this, a 'fingerprint' of the view definition is created when the
design document is updated. If the fingerprint changes, then the view
indexes are entirely rebuilt. This ensures that changes to the view
definitions are reflected in the view indexes.

     Note: View index rebuilds occur when one view from the same the
     view group (i.e. all the views defined within a single a design
     document) has been determined as needing a rebuild. For example,
     if if you have a design document with different views, and you
     update the database, all three view indexes within the design
     document will be updated.

  Because the view is updated when it has been queried, it can result
in a delay in returned information when the view is accessed,
especially if there are a large number of documents in the database and
the view index does not exist. There are a number of ways to mitigate,
but not completely eliminate, these issues. These include:

   - Create the view definition (and associated design documents) on
     your database before allowing insertion or updates to the
     documents. If this is allowed while the view is being accessed,
     the index can be updated incrementally.

   - Manually force a view request from the database. You can do this
     either before users are allowed to use the view, or you can access
     the view manually after documents are added or updated.

   - Use the *note changes feed: 38c. to monitor for changes to the
     database and then access the view to force the corresponding view
     index to be updated.

   - Use a monitor with the *note update notification: 20c.  section of
     the CouchDB configuration file to monitor for changes to your
     database, and trigger a view query to force the view to be updated.

  None of these can completely eliminate the need for the indexes to be
rebuilt or updated when the view is accessed, but they may lessen the
effects on end-users of the index update affecting the user experience.

  Another alternative is to allow users to access a 'stale' version of
the view index, rather than forcing the index to be updated and
displaying the updated results. Using a stale view may not return the
latest information, but will return the results of the view query using
an existing version of the index.

  For example, to access the existing stale view `by_recipe' in the
`recipes' design document:

    http://localhost:5984/recipes/_design/recipes/_view/by_recipe?stale=ok

Accessing a stale view:

   - Does not trigger a rebuild of the view indexes, even if there have
     been changes since the last access.

   - Returns the current version of the view index, if a current version
     exists.

   - Returns an empty result set if the given view index does exist.

  As an alternative, you use the `update_after' value to the `stale'
parameter. This causes the view to be returned as a stale view, but for
the update process to be triggered after the view information has been
returned to the client.

  In addition to using stale views, you can also make use of the
`update_seq' query argument. Using this query argument generates the
view information including the update sequence of the database from
which the view was generated. The returned value can be compared this to
the current update sequence exposed in the database information
(returned by *note GET /{db}: 15.).


File: CouchDB.info,  Node: Sorting Returned Rows,  Next: Using Limits and Skipping Rows,  Prev: Querying Views and Indexes,  Up: /db/_design/design-doc/_view/view-name

10.5.4.3 Sorting Returned Rows
..............................

Each element within the returned array is sorted using native UTF-8
sorting according to the contents of the key portion of the emitted
content. The basic order of output is as follows:

   - `null'

   - `false'

   - `true'

   - Numbers

   - Text (case sensitive, lowercase first)

   - Arrays (according to the values of each element, in order)

   - Objects (according to the values of keys, in key order)

  *Request*:

    GET /db/_design/test/_view/sorting HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Type: application/json
    Date: Wed, 21 Aug 2013 10:09:25 GMT
    ETag: "8LA1LZPQ37B6R9U8BK9BGQH27"
    Server: CouchDB (Erlang/OTP)
    Transfer-Encoding: chunked

    {
        "offset": 0,
        "rows": [
            {
                "id": "dummy-doc",
                "key": null,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": false,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": true,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": 0,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": 1,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": 10,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": 42,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": "10",
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": "hello",
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": "Hello",
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": "\u043f\u0440\u0438\u0432\u0435\u0442",
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": [],
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": [
                    1,
                    2,
                    3
                ],
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": [
                    2,
                    3
                ],
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": [
                    3
                ],
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": {},
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": {
                    "foo": "bar"
                },
                "value": null
            }
        ],
        "total_rows": 17
    }

You can reverse the order of the returned view information by using the
`descending' query value set to true:

  *Request*:

    GET /db/_design/test/_view/sorting?descending=true HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Type: application/json
    Date: Wed, 21 Aug 2013 10:09:25 GMT
    ETag: "Z4N468R15JBT98OM0AMNSR8U"
    Server: CouchDB (Erlang/OTP)
    Transfer-Encoding: chunked

    {
        "offset": 0,
        "rows": [
            {
                "id": "dummy-doc",
                "key": {
                    "foo": "bar"
                },
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": {},
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": [
                    3
                ],
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": [
                    2,
                    3
                ],
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": [
                    1,
                    2,
                    3
                ],
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": [],
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": "\u043f\u0440\u0438\u0432\u0435\u0442",
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": "Hello",
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": "hello",
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": "10",
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": 42,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": 10,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": 1,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": 0,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": true,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": false,
                "value": null
            },
            {
                "id": "dummy-doc",
                "key": null,
                "value": null
            }
        ],
        "total_rows": 17
    }


* Menu:

* Sorting order and startkey/endkey::
* Raw collation: Raw collation<2>.


File: CouchDB.info,  Node: Sorting order and startkey/endkey,  Next: Raw collation<2>,  Up: Sorting Returned Rows

10.5.4.4 Sorting order and startkey/endkey
..........................................

The sorting direction is applied before the filtering applied using the
`startkey' and `endkey' query arguments. For example the following
query:

    GET http://couchdb:5984/recipes/_design/recipes/_view/by_ingredient?startkey=%22carrots%22&endkey=%22egg%22
    Accept: application/json

will operate correctly when listing all the matching entries between
`carrots' and `egg'. If the order of output is reversed with the
`descending' query argument, the view request will return no entries:

    GET /recipes/_design/recipes/_view/by_ingredient?descending=true&startkey=%22carrots%22&endkey=%22egg%22 HTTP/1.1
    Accept: application/json
    Host: localhost:5984

    {
       "total_rows" : 26453,
       "rows" : [],
       "offset" : 21882
    }

The results will be empty because the entries in the view are reversed
before the key filter is applied, and therefore the `endkey' of “egg”
will be seen before the `startkey' of “carrots”, resulting in an empty
list.

  Instead, you should reverse the values supplied to the `startkey' and
`endkey' parameters to match the descending sorting applied to the
keys. Changing the previous example to:

    GET /recipes/_design/recipes/_view/by_ingredient?descending=true&startkey=%22egg%22&endkey=%22carrots%22 HTTP/1.1
    Accept: application/json
    Host: localhost:5984



File: CouchDB.info,  Node: Raw collation<2>,  Prev: Sorting order and startkey/endkey,  Up: Sorting Returned Rows

10.5.4.5 Raw collation
......................

By default CouchDB using ICU(1) driver for sorting view results. It's
possible use binary collation instead for faster view builds where
Unicode collation is not important.

  To use raw collation add `"collation": "raw"' key-value pair to the
design documents `options' object at the root level. After that, views
will be regenerated and new order applied.

See also
........

*note Views Collation: 2b6.

  ---------- Footnotes ----------

  (1) http://site.icu-project.org/


File: CouchDB.info,  Node: Using Limits and Skipping Rows,  Prev: Sorting Returned Rows,  Up: /db/_design/design-doc/_view/view-name

10.5.4.6 Using Limits and Skipping Rows
.......................................

By default requestion views result returns all records for it. That's
ok when they are small, but this may lead to problems when there are
billions of them since the clients might have to read them all and
consume all available memory.

  But it's possible to reduce output result rows by specifying `limit'
query parameter. For example, retrieving the list of recipes using the
`by_title' view and limited to 5 returns only 5 records, while there
are total 2667 records in view:

  *Request*:

    GET /recipes/_design/recipes/_view/by_title?limit=5 HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Type: application/json
    Date: Wed, 21 Aug 2013 09:14:13 GMT
    ETag: "9Q6Q2GZKPH8D5F8L7PB6DBSS9"
    Server: CouchDB (Erlang/OTP)
    Transfer-Encoding: chunked

    {
       "offset" : 0,
       "rows" : [
          {
             "id" : "3-tiersalmonspinachandavocadoterrine",
             "key" : "3-tier salmon, spinach and avocado terrine",
             "value" : [
                null,
                "3-tier salmon, spinach and avocado terrine"
             ]
          },
          {
             "id" : "Aberffrawcake",
             "key" : "Aberffraw cake",
             "value" : [
                null,
                "Aberffraw cake"
             ]
          },
          {
             "id" : "Adukiandorangecasserole-microwave",
             "key" : "Aduki and orange casserole - microwave",
             "value" : [
                null,
                "Aduki and orange casserole - microwave"
             ]
          },
          {
             "id" : "Aioli-garlicmayonnaise",
             "key" : "Aioli - garlic mayonnaise",
             "value" : [
                null,
                "Aioli - garlic mayonnaise"
             ]
          },
          {
             "id" : "Alabamapeanutchicken",
             "key" : "Alabama peanut chicken",
             "value" : [
                null,
                "Alabama peanut chicken"
             ]
          }
       ],
       "total_rows" : 2667
    }

To omit some records you may use `skip' query parameter:

  *Request*:

    GET /recipes/_design/recipes/_view/by_title?limit=3&skip=2 HTTP/1.1
    Accept: application/json
    Host: localhost:5984

*Response*:

    HTTP/1.1 200 OK
    Cache-Control: must-revalidate
    Content-Type: application/json
    Date: Wed, 21 Aug 2013 09:14:13 GMT
    ETag: "H3G7YZSNIVRRHO5FXPE16NJHN"
    Server: CouchDB (Erlang/OTP)
    Transfer-Encoding: chunked

    {
       "offset" : 2,
       "rows" : [
          {
             "id" : "Adukiandorangecasserole-microwave",
             "key" : "Aduki and orange casserole - microwave",
             "value" : [
                null,
                "Aduki and orange casserole - microwave"
             ]
          },
          {
             "id" : "Aioli-garlicmayonnaise",
             "key" : "Aioli - garlic mayonnaise",
             "value" : [
                null,
                "Aioli - garlic mayonnaise"
             ]
          },
          {
             "id" : "Alabamapeanutchicken",
             "key" : "Alabama peanut chicken",
             "value" : [
                null,
                "Alabama peanut chicken"
             ]
          }
       ],
       "total_rows" : 2667
    }


     Warning: Using `limit' and `skip' parameters is not recommended
     for results pagination. Read *note pagination recipe: 2d9. why
     it's so and how to make it better.


File: CouchDB.info,  Node: /db/_design/design-doc/_show/show-name,  Next: /db/_design/design-doc/_show/show-name/doc-id,  Prev: /db/_design/design-doc/_view/view-name,  Up: Design Documents

10.5.5 `/db/_design/design-doc/_show/show-name'
-----------------------------------------------

 -- Get: GET /{db}/_design/{ddoc}/_show/{func}

 -- Post: POST /{db}/_design/{ddoc}/_show/{func}
     Applies *note show function: 176. for `null' document.

     The request and response parameters are depended upon function
     implementation.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

             * *func* - Show function name

          Response Headers:

             * ETag(1) - Response signature

          Query Parameters:

             * *details* (_boolean_) - Indicates whether details should
               be included

             * *format* (_string_) - Format of the returned response.
               Used by *note provides(): 29a. function

          Status Codes:

             * 200 OK(2) - Request completed successfully

             * 500 Internal Server Error(3) - Query server error

     *Function*:

         function(doc, req) {
           if (!doc) {
             return {body: "no doc"}
           } else {
             return {body: doc.description}
           }
         }

     *Request*:

         GET /recipes/_design/recipe/_show/description HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Content-Length: 6
         Content-Type: text/html; charset=utf-8
         Date: Wed, 21 Aug 2013 12:34:07 GMT
         Etag: "7Z2TO7FPEMZ0F4GH0RJCRIOAU"
         Server: CouchDB (Erlang/OTP)
         Vary: Accept

         no doc



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1


File: CouchDB.info,  Node: /db/_design/design-doc/_show/show-name/doc-id,  Next: /db/_design/design-doc/_list/list-name/view-name,  Prev: /db/_design/design-doc/_show/show-name,  Up: Design Documents

10.5.6 `/db/_design/design-doc/_show/show-name/doc-id'
------------------------------------------------------

 -- Get: GET /{db}/_design/{ddoc}/_show/{func}/{docid}

 -- Post: POST /{db}/_design/{ddoc}/_show/{func}/{docid}
     Applies *note show function: 176. for the specified document.

     The request and response parameters are depended upon function
     implementation.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

             * *func* - Show function name

             * *docid* - Document ID

          Response Headers:

             * ETag(1) - Response signature

          Query Parameters:

             * *details* (_boolean_) - Indicates whether details should
               be included

             * *format* (_string_) - Format of the returned response.
               Used by *note provides(): 29a. function

          Status Codes:

             * 200 OK(2) - Request completed successfully

             * 500 Internal Server Error(3) - Query server error

     *Function*:

         function(doc, req) {
           if (!doc) {
             return {body: "no doc"}
           } else {
             return {body: doc.description}
           }
         }

     *Request*:

         GET /recipes/_design/recipe/_show/description/SpaghettiWithMeatballs HTTP/1.1
         Accept: application/json
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Content-Length: 88
         Content-Type: text/html; charset=utf-8
         Date: Wed, 21 Aug 2013 12:38:08 GMT
         Etag: "8IEBO8103EI98HDZL5Z4I1T0C"
         Server: CouchDB (Erlang/OTP)
         Vary: Accept

         An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1


File: CouchDB.info,  Node: /db/_design/design-doc/_list/list-name/view-name,  Next: /db/_design/design-doc/_list/list-name/other-ddoc/view-name,  Prev: /db/_design/design-doc/_show/show-name/doc-id,  Up: Design Documents

10.5.7 `/db/_design/design-doc/_list/list-name/view-name'
---------------------------------------------------------

 -- Get: GET /{db}/_design/{ddoc}/_list/{func}/{view}

 -- Post: POST /{db}/_design/{ddoc}/_list/{func}/{view}
     Applies *note list function: f8. for the *note view function: 10c.
     from the same design document.

     The request and response parameters are depended upon function
     implementation.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

             * *func* - List function name

             * *view* - View function name

          Response Headers:

             * ETag(1) - Response signature

             * Transfer-Encoding(2) - `chunked'

          Query Parameters:

             * *format* (_string_) - Format of the returned response.
               Used by *note provides(): 29a. function

          Status Codes:

             * 200 OK(3) - Request completed successfully

             * 500 Internal Server Error(4) - Query server error

     *Function*:

         function(head, req) {
           var row = getRow();
           if (!row){
             return 'no ingredients'
           }
           send(row.key);
           while(row=getRow()){
             send(', ' + row.key);
           }
         }

     *Request*:

         GET /recipes/_design/recipe/_list/ingredients/by_name HTTP/1.1
         Accept: text/plain
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Content-Type: text/plain; charset=utf-8
         Date: Wed, 21 Aug 2013 12:49:15 GMT
         Etag: "D52L2M1TKQYDD1Y8MEYJR8C84"
         Server: CouchDB (Erlang/OTP)
         Transfer-Encoding: chunked
         Vary: Accept

         meatballs, spaghetti, tomato sauce



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1


File: CouchDB.info,  Node: /db/_design/design-doc/_list/list-name/other-ddoc/view-name,  Next: /db/_design/design-doc/_update/update-name,  Prev: /db/_design/design-doc/_list/list-name/view-name,  Up: Design Documents

10.5.8 `/db/_design/design-doc/_list/list-name/other-ddoc/view-name'
--------------------------------------------------------------------

 -- Get: GET /{db}/_design/{ddoc}/_list/{func}/{other-ddoc}/{view}

 -- Post: POST /{db}/_design/{ddoc}/_list/{func}/{other-ddoc}/{view}
     Applies *note list function: f8. for the *note view function: 10c.
     from the other design document.

     The request and response parameters are depended upon function
     implementation.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

             * *func* - List function name

             * *other-ddoc* - Other design document name that holds
               view function

             * *view* - View function name

          Response Headers:

             * ETag(1) - Response signature

             * Transfer-Encoding(2) - `chunked'

          Query Parameters:

             * *format* (_string_) - Format of the returned response.
               Used by *note provides(): 29a. function

          Status Codes:

             * 200 OK(3) - Request completed successfully

             * 500 Internal Server Error(4) - Query server error

     *Function*:

         function(head, req) {
           var row = getRow();
           if (!row){
             return 'no ingredients'
           }
           send(row.key);
           while(row=getRow()){
             send(', ' + row.key);
           }
         }

     *Request*:

         GET /recipes/_design/ingredient/_list/ingredients/recipe/by_ingredient?key="spaghetti" HTTP/1.1
         Accept: text/plain
         Host: localhost:5984

     *Response*:

         HTTP/1.1 200 OK
         Content-Type: text/plain; charset=utf-8
         Date: Wed, 21 Aug 2013 12:49:15 GMT
         Etag: "5L0975X493R0FB5Z3043POZHD"
         Server: CouchDB (Erlang/OTP)
         Transfer-Encoding: chunked
         Vary: Accept

         spaghetti



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1


File: CouchDB.info,  Node: /db/_design/design-doc/_update/update-name,  Next: /db/_design/design-doc/_update/update-name/doc-id,  Prev: /db/_design/design-doc/_list/list-name/other-ddoc/view-name,  Up: Design Documents

10.5.9 `/db/_design/design-doc/_update/update-name'
---------------------------------------------------

 -- Post: POST /{db}/_design/{ddoc}/_update/{func}
     Executes *note update function: 29e. on server side for `null'
     document.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

             * *func* - Update function name

          Response Headers:

             * *X-Couch-Id* - Created/updated document's ID

             * *X-Couch-Update-Newrev* - Created/updated document's
               revision

          Status Codes:

             * 200 OK(1) - No document was created or updated

             * 201 Created(2) - Document was created or updated

             * 500 Internal Server Error(3) - Query server error

     *Function*:

         function(doc, req) {
           if (!doc){
             return [null, {'code': 400,
                            'json': {'error': 'missed',
                                     'reason': 'no document to update'}}]
           } else {
             doc.ingredients.push(req.body);
             return [doc, {'json': {'status': 'ok'}}];
           }
         }

     *Request*:

         POST /recipes/_design/recipe/_update/ingredients HTTP/1.1
         Accept: application/json
         Content-Length: 10
         Content-Type: application/json
         Host: localhost:5984

         something

     *Response*:

         HTTP/1.1 404 Object Not Found
         Cache-Control: must-revalidate
         Content-Length: 52
         Content-Type: application/json
         Date: Wed, 21 Aug 2013 14:00:58 GMT
         Server: CouchDB (Erlang/OTP)

         {
             "error": "missed",
             "reason": "no document to update"
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1


File: CouchDB.info,  Node: /db/_design/design-doc/_update/update-name/doc-id,  Next: /db/_design/design-doc/_rewrite/path,  Prev: /db/_design/design-doc/_update/update-name,  Up: Design Documents

10.5.10 `/db/_design/design-doc/_update/update-name/doc-id'
-----------------------------------------------------------

 -- Put: PUT /{db}/_design/{ddoc}/_update/{func}/{docid}
     Executes *note update function: 29e. on server side for the
     specified document.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

             * *func* - Update function name

             * *docid* - Document ID

          Response Headers:

             * *X-Couch-Id* - Created/updated document's ID

             * *X-Couch-Update-Newrev* - Created/updated document's
               revision

          Status Codes:

             * 200 OK(1) - No document was created or updated

             * 201 Created(2) - Document was created or updated

             * 500 Internal Server Error(3) - Query server error

     *Function*:

         function(doc, req) {
           if (!doc){
             return [null, {'code': 400,
                            'json': {'error': 'missed',
                                     'reason': 'no document to update'}}]
           } else {
             doc.ingredients.push(req.body);
             return [doc, {'json': {'status': 'ok'}}];
           }
         }

     *Request*:

         POST /recipes/_design/recipe/_update/ingredients/SpaghettiWithMeatballs HTTP/1.1
         Accept: application/json
         Content-Length: 5
         Content-Type: application/json
         Host: localhost:5984

         love

     *Response*:

         HTTP/1.1 201 Created
         Cache-Control: must-revalidate
         Content-Length: 16
         Content-Type: application/json
         Date: Wed, 21 Aug 2013 14:11:34 GMT
         Server: CouchDB (Erlang/OTP)
         X-Couch-Id: SpaghettiWithMeatballs
         X-Couch-Update-NewRev: 12-a5e099df5720988dae90c8b664496baf

         {
             "status": "ok"
         }



  ---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

  (2) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

  (3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1


File: CouchDB.info,  Node: /db/_design/design-doc/_rewrite/path,  Prev: /db/_design/design-doc/_update/update-name/doc-id,  Up: Design Documents

10.5.11 `/db/_design/design-doc/_rewrite/path'
----------------------------------------------

 -- Any: ANY /{db}/_design/{ddoc}/_rewrite/{path}
     Rewrites the specified path by rules defined in the specified
     design document.

     The rewrite rules are defined in _array_ field of the design
     document called `rewrites'. Each rule is an _object_ with next
     structure:

        - *from* (_string_): The path rule used to bind current uri to
          the rule.  It use pattern matching for that

        - *to* (_string_): Rule to rewrite an url. It can contain
          variables depending on  binding variables discovered during
          pattern matching and query args (url args and from the query
          member)

        - *method* (_string_): HTTP request method to bind the request
          method to the rule. Default is `"*"'

        - *query* (_object_): Query args you want to define they can
          contain dynamic variable by binding the key

     The `to``and ``from' paths may contains string patterns with
     leading `:' or `*' characters.

     For example: `/somepath/:var/*'

        - This path is converted in Erlang list by splitting `/'

        - Each `var' are converted in atom

        - `""' are converted to `''' atom

        - The pattern matching is done by splitting `/' in request url
          in a list of token

        - A string pattern will match equal token

        - The star atom (`'*'' in single quotes) will match any number
          of tokens, but may only be present as the last `pathterm' in
          a `pathspec'

        - If all tokens are matched and all `pathterms' are used, then
          the `pathspec' matches

     The pattern matching is done by first matching the HTTP request
     method to a rule. `method' is equal to `"*"' by default, and will
     match any HTTP method. It will then try to match the path to one
     rule. If no rule matches, then a 404 Not Found(1) response
     returned.

     Once a rule is found we rewrite the request url using the `to' and
     `query' fields. The identified token are matched to the rule and
     will replace var.  If `'*'' is found in the rule it will contain
     the remaining part if it exists.

     Examples:

     Rule                                       Url            Rewrite to             Tokens
     --------------------------------------------------------------------------------------------- 
     {"from": "/a", "to": "/some"}              /a             /some                  
     {"from": "/a/*", "to": "/some/*}           /a/b/c         /some/b/c              
     {"from": "/a/b", "to": "/some"}            /a/b?k=v       /some?k=v              k=v
     {"from": "/a/b", "to": "/some/:var"}       /a/b           /some/b?var=b          var=b
     {"from": "/a/:foo/", "to": "/some/:foo/"}  /a/b/c         /some/b/c?foo=b        foo=b
     {"from": "/a/:foo", "to": "/some",         /a/b           /some/?k=b&foo=b       foo=b
     "query": { "k": ":foo" }}                                                        
     {"from": "/a", "to": "/some/:foo"}         /a?foo=b       /some/?b&foo=b         foo=b

     Request method, header, query parameters, request payload and
     response body are depended on endpoint to which url will be
     rewritten.

          Parameters:

             * *db* - Database name

             * *ddoc* - Design document name

             * *path* - URL path to rewrite

---------- Footnotes ----------

  (1) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5


File: CouchDB.info,  Node: Local non-replicating Documents,  Prev: Design Documents,  Up: API Reference<2>

10.6 Local (non-replicating) Documents
======================================

The Local (non-replicating) document interface allows you to create
local documents that are not replicated to other databases. These
documents can be used to hold configuration or other information that is
required specifically on the local CouchDB instance.

  Local documents have the following limitations:

   - Local documents are not replicated to other databases.

   - The ID of the local document must be known for the document to
     accessed. You cannot obtain a list of local documents from the
     database.

   - Local documents are not output by views, or the *note
     /db/_all_docs: 27f. view.

  Local documents can be used when you want to store configuration or
other information for the current (local) instance of a given database.

  A list of the available methods and URL paths are provided below:

Method       Path                          Description
------------------------------------------------------------------------------------------- 
GET          /db/_local/id                 Returns the latest revision of the
                                           non-replicated document
PUT          /db/_local/id                 Inserts a new version of the non-replicated
                                           document
DELETE       /db/_local/id                 Deletes the non-replicated document
COPY         /db/_local/id                 Copies the non-replicated document

* Menu:

* /db/_local/id::


File: CouchDB.info,  Node: /db/_local/id,  Up: Local non-replicating Documents

10.6.1 `/db/_local/id'
----------------------

 -- Get: GET /{db}/_local/{docid}
     Gets the specified local document. The semantics are identical to
     accessing a standard document in the specified database, except
     that the document is not replicated. See *note GET /{db}/{docid}:
     46.

 -- Put: PUT /{db}/_local/{docid}
     Stores the specified local document. The semantics are identical to
     storing a standard document in the specified database, except that
     the document is not replicated. See *note PUT /{db}/{docid}: 47.

 -- Delete: DELETE /{db}/_local/{docid}
     Deletes the specified local document. The semantics are identical
     to deleting a standard document in the specified database, except
     that the document is not replicated. See *note DELETE
     /{db}/{docid}: 48.

 -- Copy: COPY /{db}/_local/{docid}
     Copies the specified local document. The semantics are identical to
     copying a standard document in the specified database, except that
     the document is not replicated. See *note COPY /{db}/{docid}: 49.


File: CouchDB.info,  Node: JSON Structure Reference,  Next: Experimental Features,  Prev: API Reference<2>,  Up: Top

11 JSON Structure Reference
***************************

The following appendix provides a quick reference to all the JSON
structures that you can supply to CouchDB, or get in return to requests.

* Menu:

* All Database Documents::
* Bulk Document Response::
* Bulk Documents::
* Changes information for a database::
* CouchDB Document::
* CouchDB Error Status::
* CouchDB database information object::
* Design Document::
* Design Document Information::
* Document with Attachments::
* List of Active Tasks::
* Replication Settings::
* Replication Status::
* Request object::
* Response object::
* Returned CouchDB Document with Detailed Revision Info::
* Returned CouchDB Document with Revision Info::
* Returned Document with Attachments::
* Security Object::
* User Context Object::
* View Head Information::


File: CouchDB.info,  Node: All Database Documents,  Next: Bulk Document Response,  Up: JSON Structure Reference

11.1 All Database Documents
===========================

Field                                Description
--------------------------------------------------------------------------------------- 
total_rows                           Number of documents in the database/view
offset                               Offset where the document list started
update_seq (optional)                Current update sequence for the database
rows [array]                         Array of document object


File: CouchDB.info,  Node: Bulk Document Response,  Next: Bulk Documents,  Prev: All Database Documents,  Up: JSON Structure Reference

11.2 Bulk Document Response
===========================

Field                                Description
--------------------------------------------------------------------------------------- 
docs [array]                         Bulk Docs Returned Documents
id                                   Document ID
error                                Error type
reason                               Error string with extended reason


File: CouchDB.info,  Node: Bulk Documents,  Next: Changes information for a database,  Prev: Bulk Document Response,  Up: JSON Structure Reference

11.3 Bulk Documents
===================

Field                                Description
--------------------------------------------------------------------------------------- 
all_or_nothing (optional)            Sets the database commit mode to use
                                     all-or-nothing semantics
docs [array]                         Bulk Documents Document
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_deleted (optional)                  Whether the document should be deleted


File: CouchDB.info,  Node: Changes information for a database,  Next: CouchDB Document,  Prev: Bulk Documents,  Up: JSON Structure Reference

11.4 Changes information for a database
=======================================

Field                                Description
--------------------------------------------------------------------------------------- 
last_seq                             Last change sequence number
results [array]                      Changes made to a database
seq                                  Update sequence number
id                                   Document ID
changes [array]                      List of changes, field-by-field, for this
                                     document


File: CouchDB.info,  Node: CouchDB Document,  Next: CouchDB Error Status,  Prev: Changes information for a database,  Up: JSON Structure Reference

11.5 CouchDB Document
=====================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)


File: CouchDB.info,  Node: CouchDB Error Status,  Next: CouchDB database information object,  Prev: CouchDB Document,  Up: JSON Structure Reference

11.6 CouchDB Error Status
=========================

Field                                Description
--------------------------------------------------------------------------------------- 
id                                   Document ID
error                                Error type
reason                               Error string with extended reason


File: CouchDB.info,  Node: CouchDB database information object,  Next: Design Document,  Prev: CouchDB Error Status,  Up: JSON Structure Reference

11.7 CouchDB database information object
========================================

Field                                Description
--------------------------------------------------------------------------------------- 
db_name                              The name of the database.
committed_update_seq                 The number of committed updates.
doc_count                            The number of documents in the database.
doc_del_count                        The number of deleted documents.
compact_running                      Set to true if the database compaction routine
                                     is operating on this database.
disk_format_version                  The version of the physical format used for the
                                     data when it is stored on hard disk.
disk_size                            Size in bytes of the data as stored on disk.
                                     View indexes are not included in the calculation.
instance_start_time                  Timestamp indicating when the database was
                                     opened, expressed in microseconds since the
                                     epoch.
purge_seq                            The number of purge operations on the database.
update_seq                           The current number of updates made in the
                                     database.


File: CouchDB.info,  Node: Design Document,  Next: Design Document Information,  Prev: CouchDB database information object,  Up: JSON Structure Reference

11.8 Design Document
====================

Field                                Description
--------------------------------------------------------------------------------------- 
_id                                  Design Document ID
_rev                                 Design Document Revision
views                                View
viewname                             View Definition
map                                  Map Function for View
reduce (optional)                    Reduce Function for View


File: CouchDB.info,  Node: Design Document Information,  Next: Document with Attachments,  Prev: Design Document,  Up: JSON Structure Reference

11.9 Design Document Information
================================

Field                                Description
--------------------------------------------------------------------------------------- 
name                                 Name/ID of Design Document
view_index                           View Index
compact_running                      Indicates whether a compaction routine is
                                     currently running on the view
disk_size                            Size in bytes of the view as stored on disk
language                             Language for the defined views
purge_seq                            The purge sequence that has been processed
signature                            MD5 signature of the views for the design
                                     document
update_seq                           The update sequence of the corresponding
                                     database that has been indexed
updater_running                      Indicates if the view is currently being updated
waiting_clients                      Number of clients waiting on views from this
                                     design document
waiting_commit                       Indicates if there are outstanding commits to
                                     the underlying database that need to processed


File: CouchDB.info,  Node: Document with Attachments,  Next: List of Active Tasks,  Prev: Design Document Information,  Up: JSON Structure Reference

11.10 Document with Attachments
===============================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_attachments (optional)              Document Attachment
filename                             Attachment information
content_type                         MIME Content type string
data                                 File attachment content, Base64 encoded


File: CouchDB.info,  Node: List of Active Tasks,  Next: Replication Settings,  Prev: Document with Attachments,  Up: JSON Structure Reference

11.11 List of Active Tasks
==========================

Field                                Description
--------------------------------------------------------------------------------------- 
tasks [array]                        Active Tasks
pid                                  Process ID
status                               Task status message
task                                 Task name
type                                 Operation Type


File: CouchDB.info,  Node: Replication Settings,  Next: Replication Status,  Prev: List of Active Tasks,  Up: JSON Structure Reference

11.12 Replication Settings
==========================

Field                                Description
--------------------------------------------------------------------------------------- 
source                               Source database name or URL
target                               Target database name or URL
create_target (optional)             Creates the target database
continuous (optional)                Configure the replication to be continuous
cancel (optional)                    Cancels the replication
doc_ids (optional)                   Array of document IDs to be synchronized
proxy (optional)                     Address of a proxy server through which
                                     replication should occur
since_seq (optional)                 Sequence from which the replication should start
filter (optional)                    name of the filter function in the form of
                                     `ddoc/myfilter'
query_params (optional)              Query parameter that are passed to the filter
                                     function; the value should be a document
                                     containing parameters as members
use_checkpoints (optional)           Whether to use replication checkpoints or not
checkpoint_interval (optional)       Specifies the checkpoint interval in ms.


File: CouchDB.info,  Node: Replication Status,  Next: Request object,  Prev: Replication Settings,  Up: JSON Structure Reference

11.13 Replication Status
========================

Field                                Description
--------------------------------------------------------------------------------------- 
ok                                   Replication status
session_id                           Unique session ID
source_last_seq                      Last sequence number read from the source
                                     database
history [array]                      Replication History
session_id                           Session ID for this replication operation
recorded_seq                         Last recorded sequence number
docs_read                            Number of documents read
docs_written                         Number of documents written to target
doc_write_failures                   Number of document write failures
start_time                           Date/Time replication operation started
start_last_seq                       First sequence number in changes stream
end_time                             Date/Time replication operation completed
end_last_seq                         Last sequence number in changes stream
missing_checked                      Number of missing documents checked
missing_found                        Number of missing documents found


File: CouchDB.info,  Node: Request object,  Next: Response object,  Prev: Replication Status,  Up: JSON Structure Reference

11.14 Request object
====================

Field                                Description
--------------------------------------------------------------------------------------- 
body                                 Request body data as `string'.  If the request
                                     method is `GET' this field contains the value
                                     `"undefined"'. If the method is `DELETE' or
                                     `HEAD' the value is `""' (empty string).
cookie                               Cookies `object'.
form                                 Form data `object'.  Contains the decoded body
                                     as key-value pairs if the `Content-Type' header
                                     was `application/x-www-form-urlencoded'.
headers                              Request headers `object'.
id                                   Requested document id `string' if it was
                                     specified or `null' otherwise.
info                                 *note Database information: 28b.
method                               Request method as `string' or `array'.  String
                                     value is a method as one of: `HEAD', `GET',
                                     `POST', `PUT', `DELETE', `OPTIONS', and `TRACE'.
                                     Otherwise it will be represented as an array of
                                     char codes.
path                                 List of requested path sections.
peer                                 Request source IP address.
query                                URL query parameters `object'.  Note that
                                     multiple keys are not supported and the last key
                                     value suppresses others.
requested_path                       List of actual requested path section.
raw_path                             Raw requested path `string'.
secObj                               *note Security Object: 28e.
userCtx                              *note User Context Object: 1dd.
uuid                                 Generated UUID by a specified algorithm in the
                                     config file.

    {
        "body": "undefined",
        "cookie": {
            "AuthSession": "cm9vdDo1MDZBRjQzRjrfcuikzPRfAn-EA37FmjyfM8G8Lw",
            "m": "3234"
        },
        "form": {},
        "headers": {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.3",
            "Accept-Encoding": "gzip,deflate,sdch",
            "Accept-Language": "en-US,en;q=0.8",
            "Connection": "keep-alive",
            "Cookie": "m=3234:t|3247:t|6493:t|6967:t|34e2:|18c3:t|2c69:t|5acb:t|ca3:t|c01:t|5e55:t|77cb:t|2a03:t|1d98:t|47ba:t|64b8:t|4a01:t; AuthSession=cm9vdDo1MDZBRjQzRjrfcuikzPRfAn-EA37FmjyfM8G8Lw",
            "Host": "127.0.0.1:5984",
            "User-Agent": "Mozilla/5.0 (Windows NT 5.2) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7"
        },
        "id": "foo",
        "info": {
            "committed_update_seq": 2701412,
            "compact_running": false,
            "data_size": 7580843252,
            "db_name": "mailbox",
            "disk_format_version": 6,
            "disk_size": 14325313673,
            "doc_count": 2262757,
            "doc_del_count": 560,
            "instance_start_time": "1347601025628957",
            "purge_seq": 0,
            "update_seq": 2701412
        },
        "method": "GET",
        "path": [
            "mailbox",
            "_design",
            "request",
            "_show",
            "dump",
            "foo"
        ],
        "peer": "127.0.0.1",
        "query": {},
        "raw_path": "/mailbox/_design/request/_show/dump/foo",
        "requested_path": [
            "mailbox",
            "_design",
            "request",
            "_show",
            "dump",
            "foo"
        ],
        "secObj": {
            "admins": {
                "names": [
                    "Bob"
                ],
                "roles": []
            },
            "members": {
                "names": [
                    "Mike",
                    "Alice"
                ],
                "roles": []
            }
        },
        "userCtx": {
            "db": "mailbox",
            "name": "Mike",
            "roles": [
                "user"
            ]
        },
        "uuid": "3184f9d1ea934e1f81a24c71bde5c168"
    }



File: CouchDB.info,  Node: Response object,  Next: Returned CouchDB Document with Detailed Revision Info,  Prev: Request object,  Up: JSON Structure Reference

11.15 Response object
=====================

Field                                Description
--------------------------------------------------------------------------------------- 
code                                 HTTP status code `number'.
json                                 JSON encodable `object'.  Implicitly sets
                                     `Content-Type' header as `application/json'.
body                                 Raw response text `string'.  Implicitly sets
                                     `Content-Type' header as `text/html;
                                     charset=utf-8'.
base64                               Base64 encoded `string'.  Implicitly sets
                                     `Content-Type' header as `application/binary'.
headers                              Response headers `object'.  `Content-Type'
                                     header from this object overrides any implicitly
                                     assigned one.
stop                                 `boolean' signal to stop iteration over view
                                     result rows (for list functions only)

     Warning: The `body', `base64' and `json' object keys are
     overlapping each other where the last one wins. Since most
     realizations of key-value objects do not preserve the key order or
     if they are mixed, confusing situations can occure. Try to use
     only one of them.

     Note: Any custom property makes CouchDB raise an internal
     exception.  Furthermore, the `Response object' could be a simple
     string value which would be implicitly wrapped into a `{"body":
     ...}' object.


File: CouchDB.info,  Node: Returned CouchDB Document with Detailed Revision Info,  Next: Returned CouchDB Document with Revision Info,  Prev: Response object,  Up: JSON Structure Reference

11.16 Returned CouchDB Document with Detailed Revision Info
===========================================================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_revs_info [array]                   CouchDB document extended revision info
rev                                  Full revision string
status                               Status of the revision


File: CouchDB.info,  Node: Returned CouchDB Document with Revision Info,  Next: Returned Document with Attachments,  Prev: Returned CouchDB Document with Detailed Revision Info,  Up: JSON Structure Reference

11.17 Returned CouchDB Document with Revision Info
==================================================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_revisions                           CouchDB document revisions
ids [array]                          Array of valid revision IDs, in reverse order
                                     (latest first)
start                                Prefix number for the latest revision


File: CouchDB.info,  Node: Returned Document with Attachments,  Next: Security Object,  Prev: Returned CouchDB Document with Revision Info,  Up: JSON Structure Reference

11.18 Returned Document with Attachments
========================================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_attachments (optional)              Document attachment
filename                             Attachment
stub                                 Indicates whether the attachment is a stub
content_type                         MIME Content type string
length                               Length (bytes) of the attachment data
revpos                               Revision where this attachment exists


File: CouchDB.info,  Node: Security Object,  Next: User Context Object,  Prev: Returned Document with Attachments,  Up: JSON Structure Reference

11.19 Security Object
=====================

Field                                Description
--------------------------------------------------------------------------------------- 
admins                               Roles/Users with admin privileges
roles [array]                        List of roles with parent privilege
users [array]                        List of users with parent privilege
readers                              Roles/Users with reader privileges
roles [array]                        List of roles with parent privilege
users [array]                        List of users with parent privilege

    {
        "admins": {
            "names": [
                "Bob"
            ],
            "roles": []
        },
        "members": {
            "names": [
                "Mike",
                "Alice"
            ],
            "roles": []
        }
      }



File: CouchDB.info,  Node: User Context Object,  Next: View Head Information,  Prev: Security Object,  Up: JSON Structure Reference

11.20 User Context Object
=========================

Field                                Description
--------------------------------------------------------------------------------------- 
db                                   Database name in the context of the provided
                                     operation.
name                                 User name.
roles                                List of user roles.

    {
        "db": "mailbox",
        "name": null,
        "roles": [
            "_admin"
        ]
    }



File: CouchDB.info,  Node: View Head Information,  Prev: User Context Object,  Up: JSON Structure Reference

11.21 View Head Information
===========================

Field                                Description
--------------------------------------------------------------------------------------- 
total_rows                           Number of documents in the view
offset                               Offset where the document list started

    {
        "total_rows": 42,
        "offset": 3
    }



File: CouchDB.info,  Node: Experimental Features,  Next: Contributing to this Documentation,  Prev: JSON Structure Reference,  Up: Top

12 Experimental Features
************************

This is a list of experimental features in CouchDB. They are included in
a release because the development team is requesting feedback from the
larger developer community. As such, please play around with these
features and send us feedback, thanks!

  Use at your own risk! Do not rely on these features for critical
applications.

* Menu:

* NodeJS Query Server::
* Plugins::

NodeJS Query Server

* Setup: Setup<2>.
* Differences from the SpiderMonkey Query Server::


File: CouchDB.info,  Node: NodeJS Query Server,  Next: Plugins,  Up: Experimental Features

12.1 NodeJS Query Server
========================

The NodeJS Query Server is an alternative runtime environment for the
default JavaScript Query Server that runs on top of Node.JS and not
SpiderMonkey like the default Query Server.

* Menu:

* Setup: Setup<2>.
* Differences from the SpiderMonkey Query Server::


File: CouchDB.info,  Node: Setup<2>,  Next: Differences from the SpiderMonkey Query Server,  Up: NodeJS Query Server

12.1.1 Setup
------------

You will need to install Node.JS version 0.10.0 or later. See Node.JS
Downloads(1) for options.

  1. Install the `couchjs-node' binary. Either from the CouchDB sources:

         cd src/couchjs-node
         npm link



  Or via NPM:

    npm install -g couchjs


     Note: *NPM in non-standard locations*

     If your Node.JS installation doesn’t store binaries in
     `/usr/local/bin' you will need to adjust CouchDB’s configuration.
     Add this to your `local.ini' file:

         [query_servers]
         nodejs = /path/to/couchjs-node /path/to/couchdb/share/server/main.js

     And then restart your CouchDB instance.

  2. Done. Now you can create design documents with the `language'
parameter set to `nodejs' and all JavaScript functions in this design
document will be processed by the Node.JS query server.

  Enjoy!

  ---------- Footnotes ----------

  (1) http://nodejs.org/download/


File: CouchDB.info,  Node: Differences from the SpiderMonkey Query Server,  Prev: Setup<2>,  Up: NodeJS Query Server

12.1.2 Differences from the SpiderMonkey Query Server
-----------------------------------------------------

V8 and SpiderMonkey roughly behave similar, but there might be engine-
specific differences that make or break a JavaScript function in one or
the other server.


File: CouchDB.info,  Node: Plugins,  Prev: NodeJS Query Server,  Up: Experimental Features

12.2 Plugins
============

See `src/couch_plugins/README.md'.


File: CouchDB.info,  Node: Contributing to this Documentation,  Next: Release History,  Prev: Experimental Features,  Up: Top

13 Contributing to this Documentation
*************************************

The documentation lives in the CouchDB source tree. We'll start by
forking and closing the CouchDB GitHub mirror. That will allow us to
send the contribution to CouchDB with a pull request.

  If you don't have a GitHub account yet, it is a good time to get one,
they are free. If you don't want to use GitHub, there are alternate
ways to contributing back, that we'll cover next time.

  Go to <https://github.com/apache/couchdb> and click the "fork" button
in the top right. This will create a fork of CouchDB in your GitHub
account. Mine is `janl', so my fork lives at
<https://github.com/janl/couchdb>. In the header, it tells me me my
"GitHub Clone URL". We need to copy that and start a terminal:

    $ git clone https://github.com/janl/couchdb.git
    $ cd couchdb
    $ subl .

I'm opening the whole CouchDB source tree in my favourite editor. It
gives me the usual directory listing:

    .git/
    .gitignore
    .mailmap
    .travis.yml
    AUTHORS
    BUGS
    CHANGES
    DEVELOPERS
    INSTALL
    INSTALL.Unix
    INSTALL.Windows
    LICENSE
    Makefile.am
    NEWS
    NOTICE
    README
    THANKS.in
    acinclude.m4.in
    bin/
    bootstrap
    build-aux/
    configure.ac
    etc/
    license.skip
    share/
    src/
    test/
    utils/
    var/

The documentation sources live in `share/doc/src', you can safely
ignore all the other files and directories.

  First we should determine where we want to document this inside the
documentation. We can look through <http://docs.couchdb.org/en/latest/>
for inspiration. The JSON Structure Reference(1) looks like a fine
place to write this up.

  The current state includes mostly tables describing the JSON
structure (after all, that's the title of this chapter), but some prose
about the number representation can't hurt. For future reference, since
the topic in the thread includes views and different encoding in views
(as opposed to the storage engine), we should remember to make a note
in the views documentation as well, but we'll leave this for later.

  Let's try and find the source file that builds the file
<http://docs.couchdb.org/en/latest/json-structure.html> - we are in
luck, under `share/doc/src' we find the file `json-structure.rst'. That
looks promising.  `.rst' stands for ReStructured Text (see
<http://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html> for a
markup reference), which is an ascii format for writing documents,
documentation in this case. Let's have a look and open it.

  We see ascii tables with some additional formatting, all looking like
the final HTML. So far so easy. For now, let's just add to the bottom
of this. We can worry about organising this better later.

  We start by adding a new headline:

    Number Handling
    ===============

Now we paste in the rest of the main email of the thread. It is mostly
text, but it includes some code listings. Let's mark them up. We'll
turn:

    ejson:encode(ejson:decode(<<"1.1">>)).
    <<"1.1000000000000000888">>

Into:

    .. code-block:: erlang

      ejson:encode(ejson:decode(<<"1.1">>)).
      <<"1.1000000000000000888">>

And we follow along with the other code samples. We turn:

    Spidermonkey

    $ js -h 2>&1 | head -n 1
    JavaScript-C 1.8.5 2011-03-31
    $ js
    js> JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
    "1.0123456789012346"
    js> var f = JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
    js> JSON.stringify(JSON.parse(f))
    "1.0123456789012346"

into:

    Spidermonkey::

        $ js -h 2>&1 | head -n 1
        JavaScript-C 1.8.5 2011-03-31
        $ js
        js> JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
        "1.0123456789012346"
        js> var f = JSON.stringify(JSON.parse("1.01234567890123456789012345678901234567890"))
        js> JSON.stringify(JSON.parse(f))
        "1.0123456789012346"

And then follow all the other ones.

  I cleaned up the text a little but to make it sound more like a
documentation entry as opposed to a post on a mailing list.

  The next step would be to validate that we got all the markup right.
I'll leave this for later. For now we'll contribute our change back to
CouchDB.

  First, we commit our changes:

    $ > git commit -am 'document number encoding'
    [master a84b2cf] document number encoding
    1 file changed, 199 insertions(+)

Then we push the commit to our CouchDB fork:

    $ git push origin master

Next, we go back to our GitHub page <https://github.com/janl/couchdb>
and click the "Pull Request" button. Fill in the description with
something useful and hit the "Send Pull Request" button.

  And we're done!

  ---------- Footnotes ----------

  (1) http://docs.couchdb.org/en/latest/json-structure.html


File: CouchDB.info,  Node: Release History,  Next: Security Issues Information,  Prev: Contributing to this Documentation,  Up: Top

14 Release History
******************

* Menu:

* 1.6.x Branch: 1 6 x Branch.
* 1.5.x Branch: 1 5 x Branch.
* 1.4.x Branch: 1 4 x Branch.
* 1.3.x Branch: 1 3 x Branch.
* 1.2.x Branch: 1 2 x Branch.
* 1.1.x Branch: 1 1 x Branch.
* 1.0.x Branch: 1 0 x Branch.
* 0.11.x Branch: 0 11 x Branch.
* 0.10.x Branch: 0 10 x Branch.
* 0.9.x Branch: 0 9 x Branch.
* 0.8.x Branch: 0 8 x Branch.

1.6.x Branch

* Upgrade Notes::
* Version 1.6.0: Version 1 6 0.

1.5.x Branch

* Version 1.5.1: Version 1 5 1.
* Version 1.5.0: Version 1 5 0.

1.4.x Branch

* Upgrade Notes: Upgrade Notes<2>.
* Version 1.4.0: Version 1 4 0.

1.3.x Branch

* Upgrade Notes: Upgrade Notes<3>.
* Version 1.3.1: Version 1 3 1.
* Version 1.3.0: Version 1 3 0.

Version 1.3.1

* Replicator: Replicator<2>.
* Log System::
* View Server::
* Miscellaneous::

Version 1.3.0

* Database core::
* Documentation::
* Futon::
* HTTP Interface::
* Log System: Log System<2>.
* Replicator: Replicator<3>.
* Security: Security<2>.
* Source Repository::
* Storage System::
* Test Suite::
* URL Rewriter & Vhosts::
* UUID Algorithms::
* Query and View Server::
* Windows::

1.2.x Branch

* Upgrade Notes: Upgrade Notes<4>.
* Version 1.2.2: Version 1 2 2.
* Version 1.2.1: Version 1 2 1.
* Version 1.2.0: Version 1 2 0.

Upgrade Notes

* Security changes::
* Database Compression::

Version 1.2.2

* Build System::
* HTTP Interface: HTTP Interface<2>.

Version 1.2.1

* Build System: Build System<2>.
* Futon: Futon<2>.
* HTTP Interface: HTTP Interface<3>.
* Security: Security<3>.
* Replication: Replication<3>.
* View Server: View Server<2>.

Version 1.2.0

* Authentication: Authentication<3>.
* Build System: Build System<3>.
* Futon: Futon<3>.
* HTTP Interface: HTTP Interface<4>.
* OAuth::
* Replicator: Replicator<4>.
* Storage System: Storage System<2>.
* View Server: View Server<3>.

1.1.x Branch

* Upgrade Notes: Upgrade Notes<5>.
* Version 1.1.2: Version 1 1 2.
* Version 1.1.1: Version 1 1 1.
* Version 1.1.0: Version 1 1 0.

Version 1.1.2

* Build System: Build System<4>.
* HTTP Interface: HTTP Interface<5>.
* Log System: Log System<3>.
* Replicator: Replicator<5>.
* Security: Security<4>.
* View Server: View Server<4>.

Version 1.1.0

* Externals::
* Futon: Futon<4>.
* HTTP Interface: HTTP Interface<6>.
* Replicator: Replicator<6>.
* Storage System: Storage System<3>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<2>.
* View Server: View Server<5>.

1.0.x Branch

* Upgrade Notes: Upgrade Notes<6>.
* Version 1.0.4: Version 1 0 4.
* Version 1.0.3: Version 1 0 3.
* Version 1.0.2: Version 1 0 2.
* Version 1.0.1: Version 1 0 1.
* Version 1.0.0: Version 1 0 0.

Version 1.0.4

* HTTP Interface: HTTP Interface<7>.
* Log System: Log System<4>.
* Replicator: Replicator<7>.
* Security: Security<5>.
* View System::

Version 1.0.3

* General::
* Etap Test Suite::
* Futon: Futon<5>.
* HTTP Interface: HTTP Interface<8>.
* Replicator: Replicator<8>.
* Security: Security<6>.
* Storage System: Storage System<4>.
* Windows: Windows<2>.

Version 1.0.2

* Futon: Futon<6>.
* HTTP Interface: HTTP Interface<9>.
* Log System: Log System<5>.
* Replicator: Replicator<9>.
* Storage System: Storage System<5>.
* View Server: View Server<6>.

Version 1.0.1

* Authentication: Authentication<4>.
* Build and System Integration::
* Futon: Futon<7>.
* HTTP Interface: HTTP Interface<10>.
* Replicator: Replicator<10>.
* Storage System: Storage System<6>.

Version 1.0.0

* Security: Security<7>.
* Storage System: Storage System<7>.
* View Server: View Server<7>.

0.11.x Branch

* Upgrade Notes: Upgrade Notes<7>.
* Version 0.11.2: Version 0 11 2.
* Version 0.11.1: Version 0 11 1.
* Version 0.11.0: Version 0 11 0.

Upgrade Notes

* Changes Between 0.11.0 and 0.11.1: Changes Between 0 11 0 and 0 11 1.
* Changes Between 0.10.x and 0.11.0: Changes Between 0 10 x and 0 11 0.

Changes Between 0.10.x and 0.11.0

* show, list, update and validation functions: show list update and validation functions.
* _admins -> _security::
* json2.js: json2 js.
* WWW-Authenticate::
* Query server line protocol::
* UTF8 JSON::
* _changes line format::

Version 0.11.2

* Authentication: Authentication<5>.
* Futon: Futon<8>.
* HTTP Interface: HTTP Interface<11>.
* Replicator: Replicator<11>.
* Security: Security<8>.

Version 0.11.1

* Build and System Integration: Build and System Integration<2>.
* Configuration System::
* Futon: Futon<9>.
* HTTP Interface: HTTP Interface<12>.
* JavaScript Clients::
* Log System: Log System<6>.
* Replication System::
* Security: Security<9>.
* Storage System: Storage System<8>.
* Test Suite: Test Suite<2>.
* View Server: View Server<8>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<3>.

Version 0.11.0

* Build and System Integration: Build and System Integration<3>.
* Futon: Futon<10>.
* HTTP Interface: HTTP Interface<13>.
* Replication: Replication<4>.
* Runtime Statistics::
* Security: Security<10>.
* Storage System: Storage System<9>.
* View Server: View Server<9>.

0.10.x Branch

* Upgrade Notes: Upgrade Notes<8>.
* Version 0.10.2: Version 0 10 2.
* Version 0.10.1: Version 0 10 1.
* Version 0.10.0: Version 0 10 0.

Upgrade Notes

* Modular Configuration Directories::
* Show and List API change::
* Stricter enforcing of reduciness in reduce-functions::
* View query reduce parameter strictness::

Version 0.10.2

* Build and System Integration: Build and System Integration<4>.
* Security: Security<11>.
* Replicator: Replicator<12>.

Version 0.10.1

* Build and System Integration: Build and System Integration<5>.
* Replicator: Replicator<13>.
* Query Server: Query Server<2>.
* Stats::

Version 0.10.0

* Build and System Integration: Build and System Integration<6>.
* HTTP Interface: HTTP Interface<14>.
* Storage Format::
* View Server: View Server<10>.

0.9.x Branch

* Upgrade Notes: Upgrade Notes<9>.
* Version 0.9.2: Version 0 9 2.
* Version 0.9.1: Version 0 9 1.
* Version 0.9.0: Version 0 9 0.

Upgrade Notes

* Response to Bulk Creation/Updates::
* Database File Format::
* Renamed "count" to "limit"::
* Moved View URLs::
* Attachments: Attachments<3>.
* Error Codes::
* ini file format::

Version 0.9.2

* Build and System Integration: Build and System Integration<7>.
* Replication: Replication<5>.

Version 0.9.1

* Build and System Integration: Build and System Integration<8>.
* Configuration and stats system::
* Database Core::
* External Handlers::
* Futon: Futon<11>.
* HTTP Interface: HTTP Interface<15>.
* JavaScript View Server::
* Replication: Replication<6>.

Version 0.9.0

* Build and System Integration: Build and System Integration<9>.
* Configuration and stats system: Configuration and stats system<2>.
* Database Core: Database Core<2>.
* Design Document Resource Paths::
* Futon Utility Client::
* HTTP Interface: HTTP Interface<16>.
* Replication: Replication<7>.

0.8.x Branch

* Version 0.8.1-incubating: Version 0 8 1-incubating.
* Version 0.8.0-incubating: Version 0 8 0-incubating.

Version 0.8.1-incubating

* Build and System Integration: Build and System Integration<10>.
* Database Core: Database Core<3>.
* Futon: Futon<12>.
* JavaScript View Server: JavaScript View Server<2>.
* HTTP Interface: HTTP Interface<17>.

Version 0.8.0-incubating

* Build and System Integration: Build and System Integration<11>.
* Database Core: Database Core<4>.
* Futon: Futon<13>.
* JavaScript View Server: JavaScript View Server<3>.
* HTTP Interface: HTTP Interface<18>.


File: CouchDB.info,  Node: 1 6 x Branch,  Next: 1 5 x Branch,  Up: Release History

14.1 1.6.x Branch
=================

* Menu:

* Upgrade Notes::
* Version 1.6.0: Version 1 6 0.


File: CouchDB.info,  Node: Upgrade Notes,  Next: Version 1 6 0,  Up: 1 6 x Branch

14.1.1 Upgrade Notes
--------------------

The *note Proxy Authentication: 1de. handler was renamed to
`proxy_authentication_handler' to follow the `*_authentication_handler'
form of all other handlers. The old `proxy_authentification_handler'
name is marked as deprecated and will be removed in future releases.
It's strongly recommended to update *note
httpd/authentication_handlers: 8f. option with new value in case if you
had used such handler.


File: CouchDB.info,  Node: Version 1 6 0,  Prev: Upgrade Notes,  Up: 1 6 x Branch

14.1.2 Version 1.6.0
--------------------

   * COUCHDB-2200(1): support Erlang/OTP 17.0 #35e16032(2)

   * Fauxton: many improvements in our experimental new user interface,
     including switching the code editor from CodeMirror to Ace as well
     as better support for various browsers.

   * Add the `max_count' option (*note UUIDs Configuration: 21c.) to
     allow rate-limiting the amount of UUIDs that can be requested from
     the *note /_uuids: 367.  handler in a single request (*note CVE
     2014-2668: 421.).

   * COUCHDB-1986(3): increase socket buffer size to improve
     replication speed for large documents and attachments, and fix
     tests on BSD-like systems.  #9a0e561b(4)

   * COUCHDB-1953(5): improve performance of multipart/related requests.
     #ce3e89dc(6)

   * COUCHDB-2221(7): verify that authentication-related configuration
     settings are well-formed. #dbe769c6(8)

   * COUCHDB-1922(9): fix CORS exposed headers. #4f619833(10)

   * COUCHDB-1795(11): ensure the startup script clears the pid file on
     termination.  #818ef4f9(12)

   * COUCHDB-1962(13): replication can now be performed without having
     write access to the source database (#1d5fe2aa(14)), the
     replication checkpoint interval is now configurable
     (#0693f98e(15)).

   * COUCHDB-2025(16): add support for SOCKS5 proxies for replication.
     #fcd76c9(17)

   * COUCHDB-1930(18): redirect to the correct page after submitting a
     new document with a different ID than the one suggested by Futon.
     #4906b591(19)

   * COUCHDB-1923(20): add support for `attachments' and
     `att_encoding_info' options (formerly only available on the
     documents API) to the view API.  #ca41964b(21)

   * COUCHDB-1780(22): upgrade password hashes from SHA-1 to PBKDF2
     scheme on successful authentication. #34888938(23)

   * COUCHDB-2059(24): allow run-time configuration of maximum URL
     length.  #f7ca266b(25)

   * COUCHDB-2054(26): accept gzipped JSON request bodies. #4d893387(27)

   * Rename `proxy_authentification_handler' to
     `proxy_authentication_handler'.  #c66ac4a8(28)

   * COUCHDB-1647(29): for failed replications originating from a
     document in the `_replicator' database, store the failure reason
     in the document.  #08cac68b(30)

   * COUCHDB-2053(31): send better error messages when both `key' and
     `keys' parameters are specified in view requests. #2bc07840(32)

   * COUCHDB-2040(33): send better error messages when incorrect
     checksums are encountered during compaction. #e7fdc16a(34)

   * COUCHDB-2028(35): allow intermedia certificates when using SSL/TLS.
     #2d080449(36)

   * COUCHDB-2031(37): fix rewriting of paths with query string
     parameters.  #37c84596(38)

   * Numerous improvements to the documentation.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-2200

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=35e16032

  (3) https://issues.apache.org/jira/browse/COUCHDB-1986

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=9a0e561b

  (5) https://issues.apache.org/jira/browse/COUCHDB-1953

  (6)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=ce3e89dc

  (7) https://issues.apache.org/jira/browse/COUCHDB-2221

  (8)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=dbe769c6

  (9) https://issues.apache.org/jira/browse/COUCHDB-1922

  (10)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=4f619833

  (11) https://issues.apache.org/jira/browse/COUCHDB-1795

  (12)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=818ef4f9

  (13) https://issues.apache.org/jira/browse/COUCHDB-1962

  (14)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=1d5fe2aa

  (15)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=0693f98e

  (16) https://issues.apache.org/jira/browse/COUCHDB-2025

  (17)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=fcd76c9

  (18) https://issues.apache.org/jira/browse/COUCHDB-1930

  (19)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=4906b591

  (20) https://issues.apache.org/jira/browse/COUCHDB-1923

  (21)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=ca41964b

  (22) https://issues.apache.org/jira/browse/COUCHDB-1780

  (23)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=34888938

  (24) https://issues.apache.org/jira/browse/COUCHDB-2059

  (25)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=f7ca266b

  (26) https://issues.apache.org/jira/browse/COUCHDB-2054

  (27)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=4d893387

  (28)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=c66ac4a8

  (29) https://issues.apache.org/jira/browse/COUCHDB-1647

  (30)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=08cac68b

  (31) https://issues.apache.org/jira/browse/COUCHDB-2053

  (32)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2bc07840

  (33) https://issues.apache.org/jira/browse/COUCHDB-2040

  (34)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=e7fdc16a

  (35) https://issues.apache.org/jira/browse/COUCHDB-2028

  (36)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2d080449

  (37) https://issues.apache.org/jira/browse/COUCHDB-2031

  (38)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=37c84596


File: CouchDB.info,  Node: 1 5 x Branch,  Next: 1 4 x Branch,  Prev: 1 6 x Branch,  Up: Release History

14.2 1.5.x Branch
=================

     Warning: *note Version 1.5.1: 425. contains important security
     fixes. Previous `1.5.x' releases are not recommended for regular
     usage.

* Menu:

* Version 1.5.1: Version 1 5 1.
* Version 1.5.0: Version 1 5 0.


File: CouchDB.info,  Node: Version 1 5 1,  Next: Version 1 5 0,  Up: 1 5 x Branch

14.2.1 Version 1.5.1
--------------------

   * Add the `max_count' option (*note UUIDs Configuration: 21c.) to
     allow rate-limiting the amount of UUIDs that can be requested from
     the *note /_uuids: 367.  handler in a single request (*note CVE
     2014-2668: 421.).


File: CouchDB.info,  Node: Version 1 5 0,  Prev: Version 1 5 1,  Up: 1 5 x Branch

14.2.2 Version 1.5.0
--------------------

   * COUCHDB-1781(1): The official documentation has been overhauled. A
     lot of content from other sources have been merged, and the index
     page has been rebuilt to make the docs much more accessible.
     #54813a7(2)

   * A new administration UI, codenamed Fauxton, has been included as an
     experimental preview. It can be accessed at `/_utils/fauxton/'.
     There are too many improvements here to list them all. We are
     looking for feedback from the community on this preview release.

   * COUCHDB-1888(3): Fixed an issue where admin users would be
     restricted by the `public_fields' feature.

   * Fixed an issue with the JavaScript CLI test runner. #be76882(4),
     #54813a7(5)

   * COUCHDB-1867(6): An experimental plugin feature has been added. See
     `src/couch_plugin/README.md' for details. We invite the community
     to test and report any findings.

   * COUCHDB-1894(7): An experimental Node.js-based query server runtime
     has been added. See *note Experimental Features: 40e. for details.
     We invite the community to test and report any findings.

   * COUCHDB-1901(8): Better retry mechanism for transferring
     attachments during replication. #4ca2cec(9)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1781

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=54813a7

  (3) https://issues.apache.org/jira/browse/COUCHDB-1888

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=be76882

  (5)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=54813a7

  (6) https://issues.apache.org/jira/browse/COUCHDB-1867

  (7) https://issues.apache.org/jira/browse/COUCHDB-1894

  (8) https://issues.apache.org/jira/browse/COUCHDB-1901

  (9)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=4ca2cec


File: CouchDB.info,  Node: 1 4 x Branch,  Next: 1 3 x Branch,  Prev: 1 5 x Branch,  Up: Release History

14.3 1.4.x Branch
=================

     Warning: *note 1.4.x Branch: 429. is affected by the issue
     described in *note CVE-2014-2668; DoS (CPU and memory consumption)
     via the count parameter to /_uuids: 421.  Upgrading to a more
     recent release is strongly recommended.

* Menu:

* Upgrade Notes: Upgrade Notes<2>.
* Version 1.4.0: Version 1 4 0.


File: CouchDB.info,  Node: Upgrade Notes<2>,  Next: Version 1 4 0,  Up: 1 4 x Branch

14.3.1 Upgrade Notes
--------------------

We now support Erlang/OTP R16B and R16B01; the minimum required version
is R14B.

  User document role values must now be strings. Other types of values
will be refused when saving the user document.


File: CouchDB.info,  Node: Version 1 4 0,  Prev: Upgrade Notes<2>,  Up: 1 4 x Branch

14.3.2 Version 1.4.0
--------------------

   * COUCHDB-1139(1): it's possible to apply *note list: f8.  functions
     to `_all_docs' view. #54fd258e(2)

   * COUCHDB-1632(3): Ignore epilogues in `multipart/related' MIME
     attachments.  #2b4ab67a(4)

   * COUCHDB-1634(5): Reduce PBKDF2 work factor. #f726bc4d(6)

   * COUCHDB-1684(7): Support for server-wide changes feed reporting on
     creation, updates and deletion of databases. #917d8988(8)

   * COUCHDB-1772(9): Prevent invalid JSON output when using
     `all_or_nothing' *note of bulk API: 255. #dfd39d57(10)

   * Add a *note configurable whitelist: 64.  of user document
     properties. #8d7ab8b1(11)

   * COUCHDB-1852(12): Support Last-Event-ID header in EventSource
     changes feeds.  #dfd2199a(13)

   * Allow storing pre-hashed admin passwords via *note config API: 168.
     #c98ba561(14)

   * Automatic loading of CouchDB plugins. #3fab6bb5(15)

   * Much improved documentation, including an *note expanded
     description: 112. of `validate_doc_update' functions
     (commit:`ef9ac469') and a description of how  CouchDB handles JSON
     *note number values: 34b. (#bbd93f77(16)).

   * Split up `replicator_db' tests into multiple independent tests.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1139

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=54fd258e

  (3) https://issues.apache.org/jira/browse/COUCHDB-1632

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2b4ab67a

  (5) https://issues.apache.org/jira/browse/COUCHDB-1634

  (6)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=f726bc4d

  (7) https://issues.apache.org/jira/browse/COUCHDB-1684

  (8)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=917d8988

  (9) https://issues.apache.org/jira/browse/COUCHDB-1772

  (10)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=dfd39d57

  (11)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=8d7ab8b1

  (12) https://issues.apache.org/jira/browse/COUCHDB-1852

  (13)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=dfd2199a

  (14)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=c98ba561

  (15)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=3fab6bb5

  (16)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=bbd93f77


File: CouchDB.info,  Node: 1 3 x Branch,  Next: 1 2 x Branch,  Prev: 1 4 x Branch,  Up: Release History

14.4 1.3.x Branch
=================

     Warning: *note 1.3.x Branch: 432. is affected by the issue
     described in *note CVE-2014-2668; DoS (CPU and memory consumption)
     via the count parameter to /_uuids: 421.  Upgrading to a more
     recent release is strongly recommended.

* Menu:

* Upgrade Notes: Upgrade Notes<3>.
* Version 1.3.1: Version 1 3 1.
* Version 1.3.0: Version 1 3 0.


File: CouchDB.info,  Node: Upgrade Notes<3>,  Next: Version 1 3 1,  Up: 1 3 x Branch

14.4.1 Upgrade Notes
--------------------

You can upgrade your existing CouchDB 1.0.x installation to 1.3.0
without any specific steps or migration. When you run CouchDB, the
existing data and index files will be opened and used as normal.

  The first time you run a compaction routine on your database within
1.3.0, the data structure and indexes will be updated to the new
version of the CouchDB database format that can only be read by CouchDB
1.3.0 and later.  This step is not reversible. Once the data files have
been updated and migrated to the new version the data files will no
longer work with a CouchDB 1.0.x release.

     Warning: If you want to retain support for opening the data files
     in CouchDB 1.0.x you must back up your data files before
     performing the upgrade and compaction process.


File: CouchDB.info,  Node: Version 1 3 1,  Next: Version 1 3 0,  Prev: Upgrade Notes<3>,  Up: 1 3 x Branch

14.4.2 Version 1.3.1
--------------------

* Menu:

* Replicator: Replicator<2>.
* Log System::
* View Server::
* Miscellaneous::


File: CouchDB.info,  Node: Replicator<2>,  Next: Log System,  Up: Version 1 3 1

14.4.2.1 Replicator
...................

   * COUCHDB-1788(1): Tolerate missing source and target fields in
     _replicator docs.  #869f42e2(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1788

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=869f42e2


File: CouchDB.info,  Node: Log System,  Next: View Server,  Prev: Replicator<2>,  Up: Version 1 3 1

14.4.2.2 Log System
...................

   * COUCHDB-1794(1): Fix bug in WARN level logging from 1.3.0.

   * Don't log about missing .compact files. #06f1a8dc(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1794

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=06f1a8dc


File: CouchDB.info,  Node: View Server,  Next: Miscellaneous,  Prev: Log System,  Up: Version 1 3 1

14.4.2.3 View Server
....................

   * COUCHDB-1792(1): Fix the -S option to couchjs to increase memory
     limits.  #cfaa66cd(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1792

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=cfaa66cd


File: CouchDB.info,  Node: Miscellaneous,  Prev: View Server,  Up: Version 1 3 1

14.4.2.4 Miscellaneous
......................

   * COUCHDB-1784(1): Improvements to test suite and VPATH build system.
     #01afaa4f(2)

   * Improve documentation: better structure, improve language, less
     duplication.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1784

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=01afaa4f


File: CouchDB.info,  Node: Version 1 3 0,  Prev: Version 1 3 1,  Up: 1 3 x Branch

14.4.3 Version 1.3.0
--------------------

* Menu:

* Database core::
* Documentation::
* Futon::
* HTTP Interface::
* Log System: Log System<2>.
* Replicator: Replicator<3>.
* Security: Security<2>.
* Source Repository::
* Storage System::
* Test Suite::
* URL Rewriter & Vhosts::
* UUID Algorithms::
* Query and View Server::
* Windows::


File: CouchDB.info,  Node: Database core,  Next: Documentation,  Up: Version 1 3 0

14.4.3.1 Database core
......................

   * COUCHDB-1512(1): Validate bind address before assignment.
     #09ead8a0(2)

   * Restore `max_document_size' protection. #bf1eb135(3)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1512

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=09ead8a0

  (3)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=bf1eb135


File: CouchDB.info,  Node: Documentation,  Next: Futon,  Prev: Database core,  Up: Version 1 3 0

14.4.3.2 Documentation
......................

   * COUCHDB-1523(1): Import CouchBase documentation and convert them
     into Sphinx docs(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1523

  (2) http://sphinx.pocoo.org/


File: CouchDB.info,  Node: Futon,  Next: HTTP Interface,  Prev: Documentation,  Up: Version 1 3 0

14.4.3.3 Futon
..............

   * COUCHDB-509(1): Added view request duration to Futon. #2d2c7d1e(2)

   * COUCHDB-627(3): Support all timezones. #b1a049bb(4)

   * COUCHDB-1383(5): Futon view editor won't allow you to save
     original view after saving a revision. #ce48342(6)

   * COUCHDB-1470(7): Futon raises popup on attempt to navigate to
     missed/deleted document. #5da40eef(8)

   * COUCHDB-1473(9), COUCHDB-1472(10): Disable buttons for actions
     that the user doesn't have permissions to. #7156254d(11)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-509

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2d2c7d1e

  (3) https://issues.apache.org/jira/browse/COUCHDB-627

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b1a049bb

  (5) https://issues.apache.org/jira/browse/COUCHDB-1383

  (6)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=ce48342

  (7) https://issues.apache.org/jira/browse/COUCHDB-1470

  (8)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=5da40eef

  (9) https://issues.apache.org/jira/browse/COUCHDB-1473

  (10) https://issues.apache.org/jira/browse/COUCHDB-1472

  (11)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=7156254d


File: CouchDB.info,  Node: HTTP Interface,  Next: Log System<2>,  Prev: Futon,  Up: Version 1 3 0

14.4.3.4 HTTP Interface
.......................

   * COUCHDB-431(1): Introduce experimental *note CORS support: 56.
     #b90e4021(2)

   * COUCHDB-764(3), COUCHDB-514(4), COUCHDB-430(5): Fix sending HTTP
     headers from `_list' function, #2a74f88375(6)

   * COUCHDB-887(7): Fix `bytes' and `offset' parameters semantic for
     `_log' resource (explanation(8)) #ad700014(9)

   * COUCHDB-986(10): Added Server-Sent Events protocol to db changes
     API.  See <http://www.w3.org/TR/eventsource/> for details.
     #093d2aa6(11)

   * COUCHDB-1026(12): Database names are encoded with respect of
     special characters in the rewriter now. #272d6415(13)

   * COUCHDB-1097(14): Allow `OPTIONS' request to shows and lists
     functions.  #9f53704a(15)

   * COUCHDB-1210(16): Files starting with underscore can be attached
     and updated now.  #05858792(17)

   * COUCHDB-1277(18): Better query parameter support and code clarity:
     #7e3c69ba(19)

        * Responses to documents created/modified via form data `POST'
          to /db/doc or copied with `COPY' should now include
          `Location' header.

        * Form data POST to /db/doc now includes an `ETag' response
          header.

        * `?batch=ok' is now supported for `COPY' and `POST' /db/doc
          updates.

        * `?new_edits=false' is now supported for more operations.

   * COUCHDB-1285(20): Allow configuration of vendor and modules
     version in CouchDB welcome message. #3c24a94d(21)

   * COUCHDB-1321(22): Variables in rewrite rules breaks OAuth
     authentication.  #c307ba95(23)

   * COUCHDB-1337(24): Use MD5 for attachment ETag header value.
     #6d912c9f(25)

   * COUCHDB-1381(26): Add jquery.couch support for Windows 8 Metro
     apps.  #dfc5d37c(27)

   * COUCHDB-1441(28): Limit recursion depth in the URL rewriter.
     Defaults to a maximum of 100 invocations but is configurable.
     #d076976c(29)

   * COUCHDB-1442(30): No longer rewrites the
     `X-CouchDB-Requested-Path' during recursive calls to the rewriter.
     #56744f2f(31)

   * COUCHDB-1501(32): *note Changes feed: fc. now can take special
     parameter `since=now' to emit changes since current point of time.
     #3bbb2612(33)

   * COUCHDB-1502(34): Allow users to delete own _users doc.
     #f0d6f19bc8(35)

   * COUCHDB-1511(36): CouchDB checks `roles' field for `_users'
     database documents with more care. #41205000(37)

   * COUCHDB-1537(38): Include user name in show/list `ETags'.
     #ac320479(39)

   * Send a 202 response for `_restart'. #b213e16f(40)

   * Make password hashing synchronous when using the /_config/admins
     API.  #08071a80(41)

   * Add support to serve single file with CouchDB, #2774531ff2(42)

   * Allow any 2xx code to indicate success, #0d50103cfd(43)

   * Fix `_session' for IE7.

   * Restore 400 error for empty PUT, #2057b895(44)

   * Return `X-Couch-Id' header if doc is created, #98515bf0b9(45)

   * Support auth cookies with `:' characters, #d9566c831d(46)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-431

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b90e4021

  (3) https://issues.apache.org/jira/browse/COUCHDB-764

  (4) https://issues.apache.org/jira/browse/COUCHDB-514

  (5) https://issues.apache.org/jira/browse/COUCHDB-430

  (6)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2a74f88375

  (7) https://issues.apache.org/jira/browse/COUCHDB-887

  (8)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=blobdiff;f=src/couchdb/couch_log.erl;h=1b05f4db2;hp=0befe7aab;hb=ad700014;hpb=7809f3ca

  (9)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=ad700014

  (10) https://issues.apache.org/jira/browse/COUCHDB-986

  (11)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=093d2aa6

  (12) https://issues.apache.org/jira/browse/COUCHDB-1026

  (13)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=272d6415

  (14) https://issues.apache.org/jira/browse/COUCHDB-1097

  (15)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=9f53704a

  (16) https://issues.apache.org/jira/browse/COUCHDB-1210

  (17)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=05858792

  (18) https://issues.apache.org/jira/browse/COUCHDB-1277

  (19)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=7e3c69ba

  (20) https://issues.apache.org/jira/browse/COUCHDB-1285

  (21)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=3c24a94d

  (22) https://issues.apache.org/jira/browse/COUCHDB-1321

  (23)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=c307ba95

  (24) https://issues.apache.org/jira/browse/COUCHDB-1337

  (25)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=6d912c9f

  (26) https://issues.apache.org/jira/browse/COUCHDB-1381

  (27)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=dfc5d37c

  (28) https://issues.apache.org/jira/browse/COUCHDB-1441

  (29)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=d076976c

  (30) https://issues.apache.org/jira/browse/COUCHDB-1442

  (31)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=56744f2f

  (32) https://issues.apache.org/jira/browse/COUCHDB-1501

  (33)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=3bbb2612

  (34) https://issues.apache.org/jira/browse/COUCHDB-1502

  (35)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=f0d6f19bc8

  (36) https://issues.apache.org/jira/browse/COUCHDB-1511

  (37)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=41205000

  (38) https://issues.apache.org/jira/browse/COUCHDB-1537

  (39)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=ac320479

  (40)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b213e16f

  (41)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=08071a80

  (42)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2774531ff2

  (43)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=0d50103cfd

  (44)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2057b895

  (45)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=98515bf0b9

  (46)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=d9566c831d


File: CouchDB.info,  Node: Log System<2>,  Next: Replicator<3>,  Prev: HTTP Interface,  Up: Version 1 3 0

14.4.3.5 Log System
...................

   * COUCHDB-1380(1): Minor fixes for logrotate support.

   * Improve file I/O error logging and handling, #4b6475da(2)

   * Module Level Logging, #b58f069167(3)

   * Log 5xx responses at error level, #e896b0b7(4)

   * Log problems opening database at ERROR level except for
     auto-created system dbs, #41667642f7(5)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1380

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=4b6475da

  (3)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b58f069167

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=e896b0b7

  (5)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=41667642f7


File: CouchDB.info,  Node: Replicator<3>,  Next: Security<2>,  Prev: Log System<2>,  Up: Version 1 3 0

14.4.3.6 Replicator
...................

   * COUCHDB-1248(1): `HTTP 500' error now doesn't occurs when
     replicating with `?doc_ids=null'. #bea76dbf(2)

   * COUCHDB-1259(3): Stabilize replication id, #c6252d6d7f(4)

   * COUCHDB-1323(5): Replicator now acts as standalone application.
     #f913ca6e(6)

   * COUCHDB-1363(7): Fix rarely occurred, but still race condition in
     changes feed if a quick burst of changes happens while replication
     is starting the replication can go stale. #573a7bb9(8)

   * COUCHDB-1557(9): Upgrade some code to use BIFs bring good
     improvements for replication.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1248

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=bea76dbf

  (3) https://issues.apache.org/jira/browse/COUCHDB-1259

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=c6252d6d7f

  (5) https://issues.apache.org/jira/browse/COUCHDB-1323

  (6)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=f913ca6e

  (7) https://issues.apache.org/jira/browse/COUCHDB-1363

  (8)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=573a7bb9

  (9) https://issues.apache.org/jira/browse/COUCHDB-1557


File: CouchDB.info,  Node: Security<2>,  Next: Source Repository,  Prev: Replicator<3>,  Up: Version 1 3 0

14.4.3.7 Security
.................

   * COUCHDB-1060(1): Passwords are now hashed using the PBKDF2
     algorithm with a configurable work factor. #7d418134(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1060

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=7d418134


File: CouchDB.info,  Node: Source Repository,  Next: Storage System,  Prev: Security<2>,  Up: Version 1 3 0

14.4.3.8 Source Repository
..........................

   * The source repository was migrated from SVN(1) to Git(2).

  ---------- Footnotes ----------

  (1) https://svn.apache.org/repos/asf/couchdb

  (2) https://git-wip-us.apache.org/repos/asf/couchdb.git


File: CouchDB.info,  Node: Storage System,  Next: Test Suite,  Prev: Source Repository,  Up: Version 1 3 0

14.4.3.9 Storage System
.......................

   * Fixed unnecessary conflict when deleting and creating a document
     in the same batch.


File: CouchDB.info,  Node: Test Suite,  Next: URL Rewriter & Vhosts,  Prev: Storage System,  Up: Version 1 3 0

14.4.3.10 Test Suite
....................

   * COUCHDB-1321(1): Moved the JS test suite to the CLI.

   * COUCHDB-1338(2): Start CouchDB with `port=0'. While CouchDB might
     be already running on the default port 5984, port number 0 let the
     TCP stack figure out a free port to run. #127cbe3(3)

   * COUCHDB-1339(4): Use shell trap to catch dying beam processes
     during test runs.  #2921c78(5)

   * COUCHDB-1389(6): Improved tracebacks printed by the JS CLI tests.

   * COUCHDB-1563(7): Ensures urlPrefix is set in all ajax requests.
     #07a6af222(8)

   * Fix race condition for test running on faster hardware.

   * Improved the reliability of a number of tests.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1321

  (2) https://issues.apache.org/jira/browse/COUCHDB-1338

  (3)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=127cbe3

  (4) https://issues.apache.org/jira/browse/COUCHDB-1339

  (5)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2921c78

  (6) https://issues.apache.org/jira/browse/COUCHDB-1389

  (7) https://issues.apache.org/jira/browse/COUCHDB-1563

  (8)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=07a6af222


File: CouchDB.info,  Node: URL Rewriter & Vhosts,  Next: UUID Algorithms,  Prev: Test Suite,  Up: Version 1 3 0

14.4.3.11 URL Rewriter & Vhosts
...............................

   * COUCHDB-1026(1): Database name is encoded during rewriting
     (allowing embedded /'s, etc). #272d6415(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1026

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=272d6415


File: CouchDB.info,  Node: UUID Algorithms,  Next: Query and View Server,  Prev: URL Rewriter & Vhosts,  Up: Version 1 3 0

14.4.3.12 UUID Algorithms
.........................

   * COUCHDB-1373(1): Added the utc_id algorithm #5ab712a2(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1373

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=5ab712a2


File: CouchDB.info,  Node: Query and View Server,  Next: Windows,  Prev: UUID Algorithms,  Up: Version 1 3 0

14.4.3.13 Query and View Server
...............................

   * COUCHDB-111(1): Improve the errors reported by the javascript view
     server to provide a more friendly error report when something goes
     wrong.  #0c619ed(2)

   * COUCHDB-410(3): More graceful error handling for JavaScript
     validate_doc_update functions.

   * COUCHDB-1372(4): `_stats' builtin reduce function no longer
     produces error for empty view result.

   * COUCHDB-1444(5): Fix missed_named_view error that occurs on
     existed design documents and views. #b59ac98b(6)

   * COUCHDB-1445(7): CouchDB tries no more to delete view file if it
     couldn't open it, even if the error is `emfile'.

   * COUCHDB-1483(8): Update handlers requires valid doc ids.
     #72ea7e38(9)

   * COUCHDB-1491(10): Clenaup view tables. #c37204b7(11)

   * Deprecate E4X support, #cdfdda2314(12)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-111

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=0c619ed

  (3) https://issues.apache.org/jira/browse/COUCHDB-410

  (4) https://issues.apache.org/jira/browse/COUCHDB-1372

  (5) https://issues.apache.org/jira/browse/COUCHDB-1444

  (6)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b59ac98b

  (7) https://issues.apache.org/jira/browse/COUCHDB-1445

  (8) https://issues.apache.org/jira/browse/COUCHDB-1483

  (9)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=72ea7e38

  (10) https://issues.apache.org/jira/browse/COUCHDB-1491

  (11)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=c37204b7

  (12)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=cdfdda2314


File: CouchDB.info,  Node: Windows,  Prev: Query and View Server,  Up: Version 1 3 0

14.4.3.14 Windows
.................

   * COUCHDB-1482(1): Use correct linker flag to build `snappy_nif.dll'
     on Windows.  #a6eaf9f1(2)

   * Allows building cleanly on Windows without cURL, #fb670f5712(3)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1482

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=a6eaf9f1

  (3)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=fb670f5712


File: CouchDB.info,  Node: 1 2 x Branch,  Next: 1 1 x Branch,  Prev: 1 3 x Branch,  Up: Release History

14.5 1.2.x Branch
=================

* Menu:

* Upgrade Notes: Upgrade Notes<4>.
* Version 1.2.2: Version 1 2 2.
* Version 1.2.1: Version 1 2 1.
* Version 1.2.0: Version 1 2 0.

Upgrade Notes

* Security changes::
* Database Compression::

Version 1.2.2

* Build System::
* HTTP Interface: HTTP Interface<2>.

Version 1.2.1

* Build System: Build System<2>.
* Futon: Futon<2>.
* HTTP Interface: HTTP Interface<3>.
* Security: Security<3>.
* Replication: Replication<3>.
* View Server: View Server<2>.

Version 1.2.0

* Authentication: Authentication<3>.
* Build System: Build System<3>.
* Futon: Futon<3>.
* HTTP Interface: HTTP Interface<4>.
* OAuth::
* Replicator: Replicator<4>.
* Storage System: Storage System<2>.
* View Server: View Server<3>.


File: CouchDB.info,  Node: Upgrade Notes<4>,  Next: Version 1 2 2,  Up: 1 2 x Branch

14.5.1 Upgrade Notes
--------------------

     Warning: This version drops support for the database format that
     was introduced in version 0.9.0. Compact your older databases
     (that have not been compacted for a long time) before upgrading,
     or they will become inaccessible.

     Warning: *note Version 1.2.1: 450. contains important security
     fixes. Previous `1.2.x' releases are not recommended for regular
     usage.

* Menu:

* Security changes::
* Database Compression::


File: CouchDB.info,  Node: Security changes,  Next: Database Compression,  Up: Upgrade Notes<4>

14.5.1.1 Security changes
.........................

The interface to the `_users' and `_replicator' databases have been
changed so that non-administrator users can see less information:

   * In the `_users' database:

        * User documents can now only be read by the respective users,
          as well as administrators. Other users cannot read these
          documents.

        * Views can only be defined and queried by administrator users.

        * The `_changes' feed can only be queried by administrator
          users.

   * In the `_replicator' database:

        * Documents now have a forced `owner' field that corresponds to
          the authenticated user that created them.

        * Non-owner users will not see confidential information like
          passwords or OAuth tokens in replication documents; they can
          still see the other contents of those documents.
          Administrators can see everything.

        * Views can only be defined and queried by administrators.


File: CouchDB.info,  Node: Database Compression,  Prev: Security changes,  Up: Upgrade Notes<4>

14.5.1.2 Database Compression
.............................

The new optional (but enabled by default) compression of disk files
requires an upgrade of the on-disk format (5 -> 6) which occurs on
creation for new databases and views, and on compaction for existing
files. This format is not supported in previous releases, so rollback
would require replication to the previous CouchDB release or restoring
from backup.

  Compression can be disabled by setting `compression = none' in your
`local.ini' `[couchdb]' section, but the on-disk format will still be
upgraded.


File: CouchDB.info,  Node: Version 1 2 2,  Next: Version 1 2 1,  Prev: Upgrade Notes<4>,  Up: 1 2 x Branch

14.5.2 Version 1.2.2
--------------------

* Menu:

* Build System::
* HTTP Interface: HTTP Interface<2>.


File: CouchDB.info,  Node: Build System,  Next: HTTP Interface<2>,  Up: Version 1 2 2

14.5.2.1 Build System
.....................

   * Fixed issue in `couchdb' script where stopped status returns
     before process exits.


File: CouchDB.info,  Node: HTTP Interface<2>,  Prev: Build System,  Up: Version 1 2 2

14.5.2.2 HTTP Interface
.......................

   * Reset rewrite counter on new request, avoiding unnecessary request
     failures due to bogus rewrite limit reports.


File: CouchDB.info,  Node: Version 1 2 1,  Next: Version 1 2 0,  Prev: Version 1 2 2,  Up: 1 2 x Branch

14.5.3 Version 1.2.1
--------------------

* Menu:

* Build System: Build System<2>.
* Futon: Futon<2>.
* HTTP Interface: HTTP Interface<3>.
* Security: Security<3>.
* Replication: Replication<3>.
* View Server: View Server<2>.


File: CouchDB.info,  Node: Build System<2>,  Next: Futon<2>,  Up: Version 1 2 1

14.5.3.1 Build System
.....................

   * Fix couchdb start script.

   * Win: fix linker invocations.


File: CouchDB.info,  Node: Futon<2>,  Next: HTTP Interface<3>,  Prev: Build System<2>,  Up: Version 1 2 1

14.5.3.2 Futon
..............

   * Disable buttons that aren't available for the logged-in user.


File: CouchDB.info,  Node: HTTP Interface<3>,  Next: Security<3>,  Prev: Futon<2>,  Up: Version 1 2 1

14.5.3.3 HTTP Interface
.......................

   * No longer rewrites the `X-CouchDB-Requested-Path' during recursive
     calls to the rewriter.

   * Limit recursion depth in the URL rewriter. Defaults to a maximum
     of 100 invocations but is configurable.


File: CouchDB.info,  Node: Security<3>,  Next: Replication<3>,  Prev: HTTP Interface<3>,  Up: Version 1 2 1

14.5.3.4 Security
.................

   * Fixed *note CVE-2012-5641; Information disclosure via unescaped
     backslashes in URLs on Windows: 45c.

   * Fixed *note CVE-2012-5649; JSONP arbitrary code execution with
     Adobe Flash: 45d.

   * Fixed *note CVE-2012-5650; DOM based Cross-Site Scripting via
     Futon UI: 45e.


File: CouchDB.info,  Node: Replication<3>,  Next: View Server<2>,  Prev: Security<3>,  Up: Version 1 2 1

14.5.3.5 Replication
....................

   * Fix potential timeouts.


File: CouchDB.info,  Node: View Server<2>,  Prev: Replication<3>,  Up: Version 1 2 1

14.5.3.6 View Server
....................

   * Change use of signals to avoid broken view groups.


File: CouchDB.info,  Node: Version 1 2 0,  Prev: Version 1 2 1,  Up: 1 2 x Branch

14.5.4 Version 1.2.0
--------------------

* Menu:

* Authentication: Authentication<3>.
* Build System: Build System<3>.
* Futon: Futon<3>.
* HTTP Interface: HTTP Interface<4>.
* OAuth::
* Replicator: Replicator<4>.
* Storage System: Storage System<2>.
* View Server: View Server<3>.


File: CouchDB.info,  Node: Authentication<3>,  Next: Build System<3>,  Up: Version 1 2 0

14.5.4.1 Authentication
.......................

   * Fix use of OAuth with VHosts and URL rewriting.

   * OAuth secrets can now be stored in the users system database as an
     alternative to key value pairs in the .ini configuration.  By
     default this is disabled (secrets are stored in the .ini) but can
     be enabled via the .ini configuration key `use_users_db' in the
     `couch_httpd_oauth' section.

   * Documents in the _users database are no longer publicly readable.

   * Confidential information in the _replication database is no longer
     publicly readable.

   * Password hashes are now calculated by CouchDB. Clients are no
     longer required to do this manually.

   * Cookies used for authentication can be made persistent by enabling
     the .ini configuration key `allow_persistent_cookies' in the
     `couch_httpd_auth' section.


File: CouchDB.info,  Node: Build System<3>,  Next: Futon<3>,  Prev: Authentication<3>,  Up: Version 1 2 0

14.5.4.2 Build System
.....................

   * cURL is no longer required to build CouchDB as it is only used by
     the command line JS test runner. If cURL is available when
     building CouchJS you can enable the HTTP bindings by passing -H on
     the command line.

   * Temporarily made `make check' pass with R15B. A more thorough fix
     is in the works (COUCHDB-1424(1)).

   * Fixed -with-js-include and -with-js-lib options.

   * Added -with-js-lib-name option.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1424


File: CouchDB.info,  Node: Futon<3>,  Next: HTTP Interface<4>,  Prev: Build System<3>,  Up: Version 1 2 0

14.5.4.3 Futon
..............

   * The `Status' screen (active tasks) now displays two new task status
     fields: `Started on' and `Updated on'.

   * Futon remembers view code every time it is saved, allowing to save
     an edit that amounts to a revert.


File: CouchDB.info,  Node: HTTP Interface<4>,  Next: OAuth,  Prev: Futon<3>,  Up: Version 1 2 0

14.5.4.4 HTTP Interface
.......................

   * Added a native JSON parser.

   * The _active_tasks API now offers more granular fields. Each task
     type is now able to expose different properties.

   * Added built-in changes feed filter `_view'.

   * Fixes to the `_changes' feed heartbeat option which caused
     heartbeats to be missed when used with a filter. This caused
     timeouts of continuous pull replications with a filter.

   * Properly restart the SSL socket on configuration changes.


File: CouchDB.info,  Node: OAuth,  Next: Replicator<4>,  Prev: HTTP Interface<4>,  Up: Version 1 2 0

14.5.4.5 OAuth
..............

   * Updated bundled `erlang_oauth' library to the latest version.


File: CouchDB.info,  Node: Replicator<4>,  Next: Storage System<2>,  Prev: OAuth,  Up: Version 1 2 0

14.5.4.6 Replicator
...................

   * A new replicator implementation. It offers more performance and
     configuration options.

   * Passing non-string values to query_params is now a 400 bad
     request. This is to reduce the surprise that all parameters are
     converted to strings internally.

   * Added optional field `since_seq' to replication objects/documents.
     It allows to bootstrap a replication from a specific source
     sequence number.

   * Simpler replication cancellation. In addition to the current
     method, replications can now be canceled by specifying the
     replication ID instead of the original replication object/document.


File: CouchDB.info,  Node: Storage System<2>,  Next: View Server<3>,  Prev: Replicator<4>,  Up: Version 1 2 0

14.5.4.7 Storage System
.......................

   * Added optional database and view index file compression (using
     Google's snappy or zlib's deflate). This feature is enabled by
     default, but it can be disabled by adapting local.ini accordingly.
     The on-disk format is upgraded on compaction and new DB/view
     creation to support this.

   * Several performance improvements, most notably regarding database
     writes and view indexing.

   * Computation of the size of the latest MVCC snapshot data and all
     its supporting metadata, both for database and view index files.
     This information is exposed as the `data_size' attribute in the
     database and view group information URIs.

   * The size of the buffers used for database and view compaction is
     now configurable.

   * Added support for automatic database and view compaction. This
     feature is disabled by default, but it can be enabled via the .ini
     configuration.

   * Performance improvements for the built-in changes feed filters
     `_doc_ids' and `_design'.


File: CouchDB.info,  Node: View Server<3>,  Prev: Storage System<2>,  Up: Version 1 2 0

14.5.4.8 View Server
....................

   * Add CoffeeScript (<http://coffeescript.org/>) as a first class
     view server language.

   * Fixed old index file descriptor leaks after a view cleanup.

   * The requested_path property keeps the pre-rewrite path even when
     no VHost configuration is matched.

   * Fixed incorrect reduce query results when using pagination
     parameters.

   * Made icu_driver work with Erlang R15B and later.


File: CouchDB.info,  Node: 1 1 x Branch,  Next: 1 0 x Branch,  Prev: 1 2 x Branch,  Up: Release History

14.6 1.1.x Branch
=================

* Menu:

* Upgrade Notes: Upgrade Notes<5>.
* Version 1.1.2: Version 1 1 2.
* Version 1.1.1: Version 1 1 1.
* Version 1.1.0: Version 1 1 0.


File: CouchDB.info,  Node: Upgrade Notes<5>,  Next: Version 1 1 2,  Up: 1 1 x Branch

14.6.1 Upgrade Notes
--------------------

     Warning: *note Version 1.1.2: 470. contains important security
     fixes. Previous `1.1.x' releases are not recommended for regular
     usage.


File: CouchDB.info,  Node: Version 1 1 2,  Next: Version 1 1 1,  Prev: Upgrade Notes<5>,  Up: 1 1 x Branch

14.6.2 Version 1.1.2
--------------------

* Menu:

* Build System: Build System<4>.
* HTTP Interface: HTTP Interface<5>.
* Log System: Log System<3>.
* Replicator: Replicator<5>.
* Security: Security<4>.
* View Server: View Server<4>.


File: CouchDB.info,  Node: Build System<4>,  Next: HTTP Interface<5>,  Up: Version 1 1 2

14.6.2.1 Build System
.....................

   * Don't `ln' the `couchjs' install target on Windows

   * Remove ICU version dependency on Windows.

   * Improve SpiderMonkey version detection.


File: CouchDB.info,  Node: HTTP Interface<5>,  Next: Log System<3>,  Prev: Build System<4>,  Up: Version 1 1 2

14.6.2.2 HTTP Interface
.......................

   * ETag of attachment changes only when the attachment changes, not
     the document.

   * Fix retrieval of headers larger than 4k.

   * Allow OPTIONS HTTP method for list requests.

   * Don't attempt to encode invalid json.


File: CouchDB.info,  Node: Log System<3>,  Next: Replicator<5>,  Prev: HTTP Interface<5>,  Up: Version 1 1 2

14.6.2.3 Log System
...................

   * Improvements to log messages for file-related errors.


File: CouchDB.info,  Node: Replicator<5>,  Next: Security<4>,  Prev: Log System<3>,  Up: Version 1 1 2

14.6.2.4 Replicator
...................

        * Fix pull replication of documents with many revisions.

        * Fix replication from an HTTP source to an HTTP target.


File: CouchDB.info,  Node: Security<4>,  Next: View Server<4>,  Prev: Replicator<5>,  Up: Version 1 1 2

14.6.2.5 Security
.................

   * Fixed *note CVE-2012-5641; Information disclosure via unescaped
     backslashes in URLs on Windows: 45c.

   * Fixed *note CVE-2012-5649; JSONP arbitrary code execution with
     Adobe Flash: 45d.

   * Fixed *note CVE-2012-5650; DOM based Cross-Site Scripting via
     Futon UI: 45e.


File: CouchDB.info,  Node: View Server<4>,  Prev: Security<4>,  Up: Version 1 1 2

14.6.2.6 View Server
....................

   * Avoid invalidating view indexes when running out of file
     descriptors.


File: CouchDB.info,  Node: Version 1 1 1,  Next: Version 1 1 0,  Prev: Version 1 1 2,  Up: 1 1 x Branch

14.6.3 Version 1.1.1
--------------------

   * Support SpiderMonkey 1.8.5

   * Add configurable maximum to the number of bytes returned by _log.

   * Allow CommonJS modules to be an empty string.

   * Bump minimum Erlang version to R13B02.

   * Do not run deleted validate_doc_update functions.

   * ETags for views include current sequence if include_docs=true.

   * Fix bug where duplicates can appear in _changes feed.

   * Fix bug where update handlers break after conflict resolution.

   * Fix bug with _replicator where include "filter" could crash couch.

   * Fix crashes when compacting large views.

   * Fix file descriptor leak in _log

   * Fix missing revisions in _changes?style=all_docs.

   * Improve handling of compaction at max_dbs_open limit.

   * JSONP responses now send "text/javascript" for Content-Type.

   * Link to ICU 4.2 on Windows.

   * Permit forward slashes in path to update functions.

   * Reap couchjs processes that hit reduce_overflow error.

   * Status code can be specified in update handlers.

   * Support provides() in show functions.

   * _view_cleanup when ddoc has no views now removes all index files.

   * max_replication_retry_count now supports "infinity".

   * Fix replication crash when source database has a document with
     empty ID.

   * Fix deadlock when assigning couchjs processes to serve requests.

   * Fixes to the document multipart PUT API.

   * Fixes regarding file descriptor leaks for databases with views.


File: CouchDB.info,  Node: Version 1 1 0,  Prev: Version 1 1 1,  Up: 1 1 x Branch

14.6.4 Version 1.1.0
--------------------

     Note: All CHANGES for 1.0.2 and 1.0.3 also apply to 1.1.0.

* Menu:

* Externals::
* Futon: Futon<4>.
* HTTP Interface: HTTP Interface<6>.
* Replicator: Replicator<6>.
* Storage System: Storage System<3>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<2>.
* View Server: View Server<5>.


File: CouchDB.info,  Node: Externals,  Next: Futon<4>,  Up: Version 1 1 0

14.6.4.1 Externals
..................

   * Added OS Process module to manage daemons outside of CouchDB.

   * Added HTTP Proxy handler for more scalable externals.


File: CouchDB.info,  Node: Futon<4>,  Next: HTTP Interface<6>,  Prev: Externals,  Up: Version 1 1 0

14.6.4.2 Futon
..............

   * Added a "change password"-feature to Futon.


File: CouchDB.info,  Node: HTTP Interface<6>,  Next: Replicator<6>,  Prev: Futon<4>,  Up: Version 1 1 0

14.6.4.3 HTTP Interface
.......................

   * Native SSL support.

   * Added support for HTTP range requests for attachments.

   * Added built-in filters for `_changes': `_doc_ids' and `_design'.

   * Added configuration option for TCP_NODELAY aka "Nagle".

   * Allow POSTing arguments to `_changes'.

   * Allow `keys' parameter for GET requests to views.

   * Allow wildcards in vhosts definitions.

   * More granular ETag support for views.

   * More flexible URL rewriter.

   * Added support for recognizing "Q values" and media parameters in
     HTTP Accept headers.

   * Validate doc ids that come from a PUT to a URL.


File: CouchDB.info,  Node: Replicator<6>,  Next: Storage System<3>,  Prev: HTTP Interface<6>,  Up: Version 1 1 0

14.6.4.4 Replicator
...................

   * Added `_replicator' database to manage replications.

   * Fixed issues when an endpoint is a remote database accessible via
     SSL.

   * Added support for continuous by-doc-IDs replication.

   * Fix issue where revision info was omitted when replicating
     attachments.

   * Integrity of attachment replication is now verified by MD5.


File: CouchDB.info,  Node: Storage System<3>,  Next: URL Rewriter & Vhosts<2>,  Prev: Replicator<6>,  Up: Version 1 1 0

14.6.4.5 Storage System
.......................

   * Multiple micro-optimizations when reading data.


File: CouchDB.info,  Node: URL Rewriter & Vhosts<2>,  Next: View Server<5>,  Prev: Storage System<3>,  Up: Version 1 1 0

14.6.4.6 URL Rewriter & Vhosts
..............................

   * Fix for variable substituion


File: CouchDB.info,  Node: View Server<5>,  Prev: URL Rewriter & Vhosts<2>,  Up: Version 1 1 0

14.6.4.7 View Server
....................

   * Added CommonJS support to map functions.

   * Added `stale=update_after' query option that triggers a view
     update after returning a `stale=ok' response.

   * Warn about empty result caused by `startkey' and `endkey' limiting.

   * Built-in reduce function `_sum' now accepts lists of integers as
     input.

   * Added view query aliases start_key, end_key, start_key_doc_id and
     end_key_doc_id.


File: CouchDB.info,  Node: 1 0 x Branch,  Next: 0 11 x Branch,  Prev: 1 1 x Branch,  Up: Release History

14.7 1.0.x Branch
=================

* Menu:

* Upgrade Notes: Upgrade Notes<6>.
* Version 1.0.4: Version 1 0 4.
* Version 1.0.3: Version 1 0 3.
* Version 1.0.2: Version 1 0 2.
* Version 1.0.1: Version 1 0 1.
* Version 1.0.0: Version 1 0 0.


File: CouchDB.info,  Node: Upgrade Notes<6>,  Next: Version 1 0 4,  Up: 1 0 x Branch

14.7.1 Upgrade Notes
--------------------

Note, to replicate with a 1.0 CouchDB instance you must first upgrade
in-place your current CouchDB to 1.0 or 0.11.1 - backporting so that
0.10.x can replicate to 1.0 wouldn't be that hard. All that is required
is patching the replicator to use the `application/json' content type.

   - `_log' and `_temp_views' are now admin-only resources.

   - `_bulk_docs' now requires a valid `Content-Type' header of
     `application/json'.

   - `JSONP' is disabled by default. An .ini option was added to
     selectively enable it.

   - The `key', `startkey' and `endkey' properties of the request object
     passed to *note list: f8. and *note show: 176. functions now
     contain JSON objects representing the URL encoded string values in
     the query string. Previously, these properties contained strings
     which needed to be converted to JSON before using.

     Warning: *note Version 1.0.4: 487. contains important security
     fixes. Previous `1.0.x' releases are not recommended for regular
     usage.


File: CouchDB.info,  Node: Version 1 0 4,  Next: Version 1 0 3,  Prev: Upgrade Notes<6>,  Up: 1 0 x Branch

14.7.2 Version 1.0.4
--------------------

* Menu:

* HTTP Interface: HTTP Interface<7>.
* Log System: Log System<4>.
* Replicator: Replicator<7>.
* Security: Security<5>.
* View System::


File: CouchDB.info,  Node: HTTP Interface<7>,  Next: Log System<4>,  Up: Version 1 0 4

14.7.2.1 HTTP Interface
.......................

   * Fix missing revisions in `_changes?style=all_docs'.

   * Fix validation of attachment names.


File: CouchDB.info,  Node: Log System<4>,  Next: Replicator<7>,  Prev: HTTP Interface<7>,  Up: Version 1 0 4

14.7.2.2 Log System
...................

   * Fix file descriptor leak in `_log'.


File: CouchDB.info,  Node: Replicator<7>,  Next: Security<5>,  Prev: Log System<4>,  Up: Version 1 0 4

14.7.2.3 Replicator
...................

   * Fix a race condition where replications can go stale


File: CouchDB.info,  Node: Security<5>,  Next: View System,  Prev: Replicator<7>,  Up: Version 1 0 4

14.7.2.4 Security
.................

   * Fixed *note CVE-2012-5641; Information disclosure via unescaped
     backslashes in URLs on Windows: 45c.

   * Fixed *note CVE-2012-5649; JSONP arbitrary code execution with
     Adobe Flash: 45d.

   * Fixed *note CVE-2012-5650; DOM based Cross-Site Scripting via
     Futon UI: 45e.


File: CouchDB.info,  Node: View System,  Prev: Security<5>,  Up: Version 1 0 4

14.7.2.5 View System
....................

   * Avoid invalidating view indexes when running out of file
     descriptors.


File: CouchDB.info,  Node: Version 1 0 3,  Next: Version 1 0 2,  Prev: Version 1 0 4,  Up: 1 0 x Branch

14.7.3 Version 1.0.3
--------------------

* Menu:

* General::
* Etap Test Suite::
* Futon: Futon<5>.
* HTTP Interface: HTTP Interface<8>.
* Replicator: Replicator<8>.
* Security: Security<6>.
* Storage System: Storage System<4>.
* Windows: Windows<2>.


File: CouchDB.info,  Node: General,  Next: Etap Test Suite,  Up: Version 1 0 3

14.7.3.1 General
................

   * Fixed compatibility issues with Erlang R14B02.


File: CouchDB.info,  Node: Etap Test Suite,  Next: Futon<5>,  Prev: General,  Up: Version 1 0 3

14.7.3.2 Etap Test Suite
........................

   * Etap tests no longer require use of port 5984. They now use a
     randomly selected port so they won't clash with a running CouchDB.


File: CouchDB.info,  Node: Futon<5>,  Next: HTTP Interface<8>,  Prev: Etap Test Suite,  Up: Version 1 0 3

14.7.3.3 Futon
..............

   * Made compatible with jQuery 1.5.x.


File: CouchDB.info,  Node: HTTP Interface<8>,  Next: Replicator<8>,  Prev: Futon<5>,  Up: Version 1 0 3

14.7.3.4 HTTP Interface
.......................

   * Fix bug that allows invalid UTF-8 after valid escapes.

   * The query parameter `include_docs' now honors the parameter
     `conflicts'.  This applies to queries against map views, _all_docs
     and _changes.

   * Added support for inclusive_end with reduce views.


File: CouchDB.info,  Node: Replicator<8>,  Next: Security<6>,  Prev: HTTP Interface<8>,  Up: Version 1 0 3

14.7.3.5 Replicator
...................

   * Enabled replication over IPv6.

   * Fixed for crashes in continuous and filtered changes feeds.

   * Fixed error when restarting replications in OTP R14B02.

   * Upgrade ibrowse to version 2.2.0.

   * Fixed bug when using a filter and a limit of 1.


File: CouchDB.info,  Node: Security<6>,  Next: Storage System<4>,  Prev: Replicator<8>,  Up: Version 1 0 3

14.7.3.6 Security
.................

   * Fixed OAuth signature computation in OTP R14B02.

   * Handle passwords with : in them.


File: CouchDB.info,  Node: Storage System<4>,  Next: Windows<2>,  Prev: Security<6>,  Up: Version 1 0 3

14.7.3.7 Storage System
.......................

   * More performant queries against _changes and _all_docs when using
     the `include_docs' parameter.


File: CouchDB.info,  Node: Windows<2>,  Prev: Storage System<4>,  Up: Version 1 0 3

14.7.3.8 Windows
................

   * Windows builds now require ICU >= 4.4.0 and Erlang >= R14B03. See
     COUCHDB-1152(1), and COUCHDB-963(2) + OTP-9139 for more
     information.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1152

  (2) https://issues.apache.org/jira/browse/COUCHDB-963


File: CouchDB.info,  Node: Version 1 0 2,  Next: Version 1 0 1,  Prev: Version 1 0 3,  Up: 1 0 x Branch

14.7.4 Version 1.0.2
--------------------

* Menu:

* Futon: Futon<6>.
* HTTP Interface: HTTP Interface<9>.
* Log System: Log System<5>.
* Replicator: Replicator<9>.
* Storage System: Storage System<5>.
* View Server: View Server<6>.


File: CouchDB.info,  Node: Futon<6>,  Next: HTTP Interface<9>,  Up: Version 1 0 2

14.7.4.1 Futon
..............

   * Make test suite work with Safari and Chrome.

   * Fixed animated progress spinner.

   * Fix raw view document link due to overzealous URI encoding.

   * Spell javascript correctly in loadScript(uri).


File: CouchDB.info,  Node: HTTP Interface<9>,  Next: Log System<5>,  Prev: Futon<6>,  Up: Version 1 0 2

14.7.4.2 HTTP Interface
.......................

   * Allow reduce=false parameter in map-only views.

   * Fix parsing of Accept headers.

   * Fix for multipart GET APIs when an attachment was created during a
     local-local replication. See COUCHDB-1022(1) for details.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1022


File: CouchDB.info,  Node: Log System<5>,  Next: Replicator<9>,  Prev: HTTP Interface<9>,  Up: Version 1 0 2

14.7.4.3 Log System
...................

   * Reduce lengthy stack traces.

   * Allow logging of native <xml> types.


File: CouchDB.info,  Node: Replicator<9>,  Next: Storage System<5>,  Prev: Log System<5>,  Up: Version 1 0 2

14.7.4.4 Replicator
...................

   * Updated ibrowse library to 2.1.2 fixing numerous replication
     issues.

   * Make sure that the replicator respects HTTP settings defined in
     the config.

   * Fix error when the ibrowse connection closes unexpectedly.

   * Fix authenticated replication (with HTTP basic auth) of design
     documents with attachments.

   * Various fixes to make replication more resilient for edge-cases.


File: CouchDB.info,  Node: Storage System<5>,  Next: View Server<6>,  Prev: Replicator<9>,  Up: Version 1 0 2

14.7.4.5 Storage System
.......................

   * Fix leaking file handles after compacting databases and views.

   * Fix databases forgetting their validation function after
     compaction.

   * Fix occasional timeout errors after successfully compacting large
     databases.

   * Fix ocassional error when writing to a database that has just been
     compacted.

   * Fix occasional timeout errors on systems with slow or heavily
     loaded IO.

   * Fix for OOME when compactions include documents with many
     conflicts.

   * Fix for missing attachment compression when MIME types included
     parameters.

   * Preserve purge metadata during compaction to avoid spurious view
     rebuilds.

   * Fix spurious conflicts introduced when uploading an attachment
     after a doc has been in a conflict. See COUCHDB-902(1) for details.

   * Fix for frequently edited documents in multi-master deployments
     being duplicated in _changes and _all_docs.  See COUCHDB-968(2)
     for details on how to repair.

   * Significantly higher read and write throughput against database and
     view index files.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-902

  (2) https://issues.apache.org/jira/browse/COUCHDB-968


File: CouchDB.info,  Node: View Server<6>,  Prev: Storage System<5>,  Up: Version 1 0 2

14.7.4.6 View Server
....................

   * Don't trigger view updates when requesting `_design/doc/_info'.

   * Fix for circular references in CommonJS requires.

   * Made isArray() function available to functions executed in the
     query server.

   * Documents are now sealed before being passed to map functions.

   * Force view compaction failure when duplicated document data
     exists. When this error is seen in the logs users should rebuild
     their views from scratch to fix the issue. See COUCHDB-999(1) for
     details.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-999


File: CouchDB.info,  Node: Version 1 0 1,  Next: Version 1 0 0,  Prev: Version 1 0 2,  Up: 1 0 x Branch

14.7.5 Version 1.0.1
--------------------

* Menu:

* Authentication: Authentication<4>.
* Build and System Integration::
* Futon: Futon<7>.
* HTTP Interface: HTTP Interface<10>.
* Replicator: Replicator<10>.
* Storage System: Storage System<6>.


File: CouchDB.info,  Node: Authentication<4>,  Next: Build and System Integration,  Up: Version 1 0 1

14.7.5.1 Authentication
.......................

   *
    Enable basic-auth popup when required to access the server, to prevent
          people from getting locked out.


File: CouchDB.info,  Node: Build and System Integration,  Next: Futon<7>,  Prev: Authentication<4>,  Up: Version 1 0 1

14.7.5.2 Build and System Integration
.....................................

   * Included additional source files for distribution.


File: CouchDB.info,  Node: Futon<7>,  Next: HTTP Interface<10>,  Prev: Build and System Integration,  Up: Version 1 0 1

14.7.5.3 Futon
..............

   * User interface element for querying stale (cached) views.


File: CouchDB.info,  Node: HTTP Interface<10>,  Next: Replicator<10>,  Prev: Futon<7>,  Up: Version 1 0 1

14.7.5.4 HTTP Interface
.......................

   * Expose `committed_update_seq' for monitoring purposes.

   * Show fields saved along with _deleted=true. Allows for auditing of
     deletes.

   * More robust Accept-header detection.


File: CouchDB.info,  Node: Replicator<10>,  Next: Storage System<6>,  Prev: HTTP Interface<10>,  Up: Version 1 0 1

14.7.5.5 Replicator
...................

   * Added support for replication via an HTTP/HTTPS proxy.

   * Fix pull replication of attachments from 0.11 to 1.0.x.

   * Make the _changes feed work with non-integer seqnums.


File: CouchDB.info,  Node: Storage System<6>,  Prev: Replicator<10>,  Up: Version 1 0 1

14.7.5.6 Storage System
.......................

   * Fix data corruption bug COUCHDB-844(1). Please see
     <http://couchdb.apache.org/notice/1.0.1.html> for details.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-844


File: CouchDB.info,  Node: Version 1 0 0,  Prev: Version 1 0 1,  Up: 1 0 x Branch

14.7.6 Version 1.0.0
--------------------

* Menu:

* Security: Security<7>.
* Storage System: Storage System<7>.
* View Server: View Server<7>.


File: CouchDB.info,  Node: Security<7>,  Next: Storage System<7>,  Up: Version 1 0 0

14.7.6.1 Security
.................

   * Added authentication caching, to avoid repeated opening and
     closing of the users database for each request requiring
     authentication.


File: CouchDB.info,  Node: Storage System<7>,  Next: View Server<7>,  Prev: Security<7>,  Up: Version 1 0 0

14.7.6.2 Storage System
.......................

   * Small optimization for reordering result lists.

   * More efficient header commits.

   * Use O_APPEND to save lseeks.

   * Faster implementation of pread_iolist(). Further improves
     performance on concurrent reads.


File: CouchDB.info,  Node: View Server<7>,  Prev: Storage System<7>,  Up: Version 1 0 0

14.7.6.3 View Server
....................

   * Faster default view collation.

   * Added option to include update_seq in view responses.


File: CouchDB.info,  Node: 0 11 x Branch,  Next: 0 10 x Branch,  Prev: 1 0 x Branch,  Up: Release History

14.8 0.11.x Branch
==================

* Menu:

* Upgrade Notes: Upgrade Notes<7>.
* Version 0.11.2: Version 0 11 2.
* Version 0.11.1: Version 0 11 1.
* Version 0.11.0: Version 0 11 0.

Upgrade Notes

* Changes Between 0.11.0 and 0.11.1: Changes Between 0 11 0 and 0 11 1.
* Changes Between 0.10.x and 0.11.0: Changes Between 0 10 x and 0 11 0.

Changes Between 0.10.x and 0.11.0

* show, list, update and validation functions: show list update and validation functions.
* _admins -> _security::
* json2.js: json2 js.
* WWW-Authenticate::
* Query server line protocol::
* UTF8 JSON::
* _changes line format::

Version 0.11.2

* Authentication: Authentication<5>.
* Futon: Futon<8>.
* HTTP Interface: HTTP Interface<11>.
* Replicator: Replicator<11>.
* Security: Security<8>.

Version 0.11.1

* Build and System Integration: Build and System Integration<2>.
* Configuration System::
* Futon: Futon<9>.
* HTTP Interface: HTTP Interface<12>.
* JavaScript Clients::
* Log System: Log System<6>.
* Replication System::
* Security: Security<9>.
* Storage System: Storage System<8>.
* Test Suite: Test Suite<2>.
* View Server: View Server<8>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<3>.

Version 0.11.0

* Build and System Integration: Build and System Integration<3>.
* Futon: Futon<10>.
* HTTP Interface: HTTP Interface<13>.
* Replication: Replication<4>.
* Runtime Statistics::
* Security: Security<10>.
* Storage System: Storage System<9>.
* View Server: View Server<9>.


File: CouchDB.info,  Node: Upgrade Notes<7>,  Next: Version 0 11 2,  Up: 0 11 x Branch

14.8.1 Upgrade Notes
--------------------

     Warning: *note Version 0.11.2: 4b2. contains important security
     fixes. Previous `0.11.x' releases are not recommended for regular
     usage.

* Menu:

* Changes Between 0.11.0 and 0.11.1: Changes Between 0 11 0 and 0 11 1.
* Changes Between 0.10.x and 0.11.0: Changes Between 0 10 x and 0 11 0.


File: CouchDB.info,  Node: Changes Between 0 11 0 and 0 11 1,  Next: Changes Between 0 10 x and 0 11 0,  Up: Upgrade Notes<7>

14.8.1.1 Changes Between 0.11.0 and 0.11.1
..........................................

   - `_log' and `_temp_views' are now admin-only resources.

   - `_bulk_docs' now requires a valid `Content-Type' header of
     `application/json'.

   - `JSONP' is disabled by default. An .ini option was added to
     selectively enable it.

   - The `key', `startkey' and `endkey' properties of the request object
     passed to *note list: f8. and *note show: 176. functions now
     contain JSON objects representing the URL encoded string values in
     the query string. Previously, these properties contained strings
     which needed to be converted to JSON before using.


File: CouchDB.info,  Node: Changes Between 0 10 x and 0 11 0,  Prev: Changes Between 0 11 0 and 0 11 1,  Up: Upgrade Notes<7>

14.8.1.2 Changes Between 0.10.x and 0.11.0
..........................................

* Menu:

* show, list, update and validation functions: show list update and validation functions.
* _admins -> _security::
* json2.js: json2 js.
* WWW-Authenticate::
* Query server line protocol::
* UTF8 JSON::
* _changes line format::


File: CouchDB.info,  Node: show list update and validation functions,  Next: _admins -> _security,  Up: Changes Between 0 10 x and 0 11 0

14.8.1.3 show, list, update and validation functions
....................................................

The `req' argument to show, list, update and validation functions now
contains the member method with the specified HTTP method of the
current request.  Previously, this member was called `verb'. `method'
is following RFC 2616(1) (HTTP 1.1) closer.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2616.html


File: CouchDB.info,  Node: _admins -> _security,  Next: json2 js,  Prev: show list update and validation functions,  Up: Changes Between 0 10 x and 0 11 0

14.8.1.4 _admins -> _security
.............................

The `/db/_admins' handler has been removed and replaced with a *note
/db/_security: 10f. object. Any existing `_admins' will be dropped and
need to be added to the security object again. The reason for this is
that the old system made no distinction between names and roles, while
the new one does, so there is no way to automatically upgrade the old
admins list.

  The security object has 2 special fields, `admins' and `readers',
which contain lists of names and roles which are admins or readers on
that database.  Anything else may be stored in other fields on the
security object. The entire object is made available to validation
functions.


File: CouchDB.info,  Node: json2 js,  Next: WWW-Authenticate,  Prev: _admins -> _security,  Up: Changes Between 0 10 x and 0 11 0

14.8.1.5 json2.js
.................

JSON handling in the query server has been upgraded to use json2.js(1).
This allows us to use faster native JSON serialization when it is
available.

  In previous versions, attempts to serialize undefined would throw an
exception, causing the doc that emitted undefined to be dropped from
the view index.  The new behavior is to serialize undefined as null.
Applications depending on the old behavior will need to explicitly
check for undefined.

  Another change is that E4X's XML objects will not automatically be
stringified. XML users will need to call `my_xml_object.toXMLString()'
to return a string value. #8d3b7ab3(2)

  ---------- Footnotes ----------

  (1) https://github.com/douglascrockford/JSON-js/blob/master/json2.js

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=8d3b7ab3


File: CouchDB.info,  Node: WWW-Authenticate,  Next: Query server line protocol,  Prev: json2 js,  Up: Changes Between 0 10 x and 0 11 0

14.8.1.6 WWW-Authenticate
.........................

The default configuration has been changed to avoid causing basic-auth
popups which result from sending the WWW-Authenticate header. To enable
basic-auth popups, uncomment the *note httpd/WWW-Authenticate: 8d. line
in `local.ini'.


File: CouchDB.info,  Node: Query server line protocol,  Next: UTF8 JSON,  Prev: WWW-Authenticate,  Up: Changes Between 0 10 x and 0 11 0

14.8.1.7 Query server line protocol
...................................

The query server line protocol has changed for all functions except
*note map: 2f7, *note reduce: 2f9, and *note rereduce: 2fc. This allows
us to cache the entire design document in the query server process,
which results in faster performance for common operations. It also
gives more flexibility to query server implementators and shouldn't
require major changes in the future when adding new query server
features.


File: CouchDB.info,  Node: UTF8 JSON,  Next: _changes line format,  Prev: Query server line protocol,  Up: Changes Between 0 10 x and 0 11 0

14.8.1.8 UTF8 JSON
..................

JSON request bodies are validated for proper UTF-8 before saving,
instead of waiting to fail on subsequent read requests.


File: CouchDB.info,  Node: _changes line format,  Prev: UTF8 JSON,  Up: Changes Between 0 10 x and 0 11 0

14.8.1.9 _changes line format
.............................

Continuous changes are now newline delimited, instead of having each
line followed by a comma.


File: CouchDB.info,  Node: Version 0 11 2,  Next: Version 0 11 1,  Prev: Upgrade Notes<7>,  Up: 0 11 x Branch

14.8.2 Version 0.11.2
---------------------

* Menu:

* Authentication: Authentication<5>.
* Futon: Futon<8>.
* HTTP Interface: HTTP Interface<11>.
* Replicator: Replicator<11>.
* Security: Security<8>.


File: CouchDB.info,  Node: Authentication<5>,  Next: Futon<8>,  Up: Version 0 11 2

14.8.2.1 Authentication
.......................

   * User documents can now be deleted by admins or the user.


File: CouchDB.info,  Node: Futon<8>,  Next: HTTP Interface<11>,  Prev: Authentication<5>,  Up: Version 0 11 2

14.8.2.2 Futon
..............

   * Add some Futon files that were missing from the Makefile.


File: CouchDB.info,  Node: HTTP Interface<11>,  Next: Replicator<11>,  Prev: Futon<8>,  Up: Version 0 11 2

14.8.2.3 HTTP Interface
.......................

   * Better error messages on invalid URL requests.


File: CouchDB.info,  Node: Replicator<11>,  Next: Security<8>,  Prev: HTTP Interface<11>,  Up: Version 0 11 2

14.8.2.4 Replicator
...................

   * Fix bug when pushing design docs by non-admins, which was hanging
     the replicator for no good reason.

   * Fix bug when pulling design documents from a source that requires
     basic-auth.


File: CouchDB.info,  Node: Security<8>,  Prev: Replicator<11>,  Up: Version 0 11 2

14.8.2.5 Security
.................

   * Avoid potential DOS attack by guarding all creation of atoms.

   * Fixed *note CVE-2010-2234; Apache CouchDB Cross Site Request
     Forgery Attack: 4c3.


File: CouchDB.info,  Node: Version 0 11 1,  Next: Version 0 11 0,  Prev: Version 0 11 2,  Up: 0 11 x Branch

14.8.3 Version 0.11.1
---------------------

* Menu:

* Build and System Integration: Build and System Integration<2>.
* Configuration System::
* Futon: Futon<9>.
* HTTP Interface: HTTP Interface<12>.
* JavaScript Clients::
* Log System: Log System<6>.
* Replication System::
* Security: Security<9>.
* Storage System: Storage System<8>.
* Test Suite: Test Suite<2>.
* View Server: View Server<8>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<3>.


File: CouchDB.info,  Node: Build and System Integration<2>,  Next: Configuration System,  Up: Version 0 11 1

14.8.3.1 Build and System Integration
.....................................

   * Output of `couchdb -help' has been improved.

   * Fixed compatibility with the Erlang R14 series.

   * Fixed warnings on Linux builds.

   * Fixed build error when aclocal needs to be called during the build.

   * Require ICU 4.3.1.

   * Fixed compatibility with Solaris.


File: CouchDB.info,  Node: Configuration System,  Next: Futon<9>,  Prev: Build and System Integration<2>,  Up: Version 0 11 1

14.8.3.2 Configuration System
.............................

   * Fixed timeout with large .ini files.


File: CouchDB.info,  Node: Futon<9>,  Next: HTTP Interface<12>,  Prev: Configuration System,  Up: Version 0 11 1

14.8.3.3 Futon
..............

   * Use "expando links" for over-long document values in Futon.

   * Added continuous replication option.

   * Added option to replicating test results anonymously to a community
     CouchDB instance.

   * Allow creation and deletion of config entries.

   * Fixed display issues with doc ids that have escaped characters.

   * Fixed various UI issues.


File: CouchDB.info,  Node: HTTP Interface<12>,  Next: JavaScript Clients,  Prev: Futon<9>,  Up: Version 0 11 1

14.8.3.4 HTTP Interface
.......................

   * Mask passwords in active tasks and logging.

   * Update mochijson2 to allow output of BigNums not in float form.

   * Added support for X-HTTP-METHOD-OVERRIDE.

   * Better error message for database names.

   * Disable jsonp by default.

   * Accept gzip encoded standalone attachments.

   * Made max_concurrent_connections configurable.

   * Made changes API more robust.

   * Send newly generated document rev to callers of an update function.


File: CouchDB.info,  Node: JavaScript Clients,  Next: Log System<6>,  Prev: HTTP Interface<12>,  Up: Version 0 11 1

14.8.3.5 JavaScript Clients
...........................

   * Added tests for couch.js and jquery.couch.js

   * Added changes handler to jquery.couch.js.

   * Added cache busting to jquery.couch.js if the user agent is msie.

   * Added support for multi-document-fetch (via _all_docs) to
     jquery.couch.js.

   * Added attachment versioning to jquery.couch.js.

   * Added option to control ensure_full_commit to jquery.couch.js.

   * Added list functionality to jquery.couch.js.

   * Fixed issues where bulkSave() wasn't sending a POST body.


File: CouchDB.info,  Node: Log System<6>,  Next: Replication System,  Prev: JavaScript Clients,  Up: Version 0 11 1

14.8.3.6 Log System
...................

   * Log HEAD requests as HEAD, not GET.

   * Keep massive JSON blobs out of the error log.

   * Fixed a timeout issue.


File: CouchDB.info,  Node: Replication System,  Next: Security<9>,  Prev: Log System<6>,  Up: Version 0 11 1

14.8.3.7 Replication System
...........................

   * Refactored various internal APIs related to attachment streaming.

   * Fixed hanging replication.

   * Fixed keepalive issue.


File: CouchDB.info,  Node: Security<9>,  Next: Storage System<8>,  Prev: Replication System,  Up: Version 0 11 1

14.8.3.8 Security
.................

   * Added authentication redirect URL to log in clients.

   * Fixed query parameter encoding issue in oauth.js.

   * Made authentication timeout configurable.

   * Temporary views are now admin-only resources.


File: CouchDB.info,  Node: Storage System<8>,  Next: Test Suite<2>,  Prev: Security<9>,  Up: Version 0 11 1

14.8.3.9 Storage System
.......................

   * Don't require a revpos for attachment stubs.

   * Added checking to ensure when a revpos is sent with an attachment
     stub, it's correct.

   * Make file deletions async to avoid pauses during compaction and db
     deletion.

   * Fixed for wrong offset when writing headers and converting them to
     blocks, only triggered when header is larger than 4k.

   * Preserve _revs_limit and instance_start_time after compaction.


File: CouchDB.info,  Node: Test Suite<2>,  Next: View Server<8>,  Prev: Storage System<8>,  Up: Version 0 11 1

14.8.3.10 Test Suite
....................

   * Made the test suite overall more reliable.


File: CouchDB.info,  Node: View Server<8>,  Next: URL Rewriter & Vhosts<3>,  Prev: Test Suite<2>,  Up: Version 0 11 1

14.8.3.11 View Server
.....................

   * Provide a UUID to update functions (and all other functions) that
     they can use to create new docs.

   * Upgrade CommonJS modules support to 1.1.1.

   * Fixed erlang filter funs and normalize filter fun API.

   * Fixed hang in view shutdown.


File: CouchDB.info,  Node: URL Rewriter & Vhosts<3>,  Prev: View Server<8>,  Up: Version 0 11 1

14.8.3.12 URL Rewriter & Vhosts
...............................

   * Allow more complex keys in rewriter.

   * Allow global rewrites so system defaults are available in vhosts.

   * Allow isolation of databases with vhosts.

   * Fix issue with passing variables to query parameters.


File: CouchDB.info,  Node: Version 0 11 0,  Prev: Version 0 11 1,  Up: 0 11 x Branch

14.8.4 Version 0.11.0
---------------------

* Menu:

* Build and System Integration: Build and System Integration<3>.
* Futon: Futon<10>.
* HTTP Interface: HTTP Interface<13>.
* Replication: Replication<4>.
* Runtime Statistics::
* Security: Security<10>.
* Storage System: Storage System<9>.
* View Server: View Server<9>.


File: CouchDB.info,  Node: Build and System Integration<3>,  Next: Futon<10>,  Up: Version 0 11 0

14.8.4.1 Build and System Integration
.....................................

   * Updated and improved source documentation.

   * Fixed distribution preparation for building on Mac OS X.

   * Added support for building a Windows installer as part of 'make
     dist'.

   * Bug fix for building couch.app's module list.

   * ETap tests are now run during make distcheck. This included a
     number of updates to the build system to properly support VPATH
     builds.

   * Gavin McDonald setup a build-bot instance. More info can be found
     at <http://ci.apache.org/buildbot.html>


File: CouchDB.info,  Node: Futon<10>,  Next: HTTP Interface<13>,  Prev: Build and System Integration<3>,  Up: Version 0 11 0

14.8.4.2 Futon
..............

   * Added a button for view compaction.

   * JSON strings are now displayed as-is in the document view, without
     the escaping of new-lines and quotes. That dramatically improves
     readability of multi-line strings.

   * Same goes for editing of JSON string values. When a change to a
     field value is submitted, and the value is not valid JSON it is
     assumed to be a string. This improves editing of multi-line
     strings a lot.

   * Hitting tab in textareas no longer moves focus to the next form
     field, but simply inserts a tab character at the current caret
     position.

   * Fixed some font declarations.


File: CouchDB.info,  Node: HTTP Interface<13>,  Next: Replication<4>,  Prev: Futon<10>,  Up: Version 0 11 0

14.8.4.3 HTTP Interface
.......................

   * Provide Content-MD5 header support for attachments.

   * Added URL Rewriter handler.

   * Added virtual host handling.


File: CouchDB.info,  Node: Replication<4>,  Next: Runtime Statistics,  Prev: HTTP Interface<13>,  Up: Version 0 11 0

14.8.4.4 Replication
....................

   * Added option to implicitly create replication target databases.

   * Avoid leaking file descriptors on automatic replication restarts.

   * Added option to replicate a list of documents by id.

   * Allow continuous replication to be cancelled.


File: CouchDB.info,  Node: Runtime Statistics,  Next: Security<10>,  Prev: Replication<4>,  Up: Version 0 11 0

14.8.4.5 Runtime Statistics
...........................

   * Statistics are now calculated for a moving window instead of
     non-overlapping timeframes.

   * Fixed a problem with statistics timers and system sleep.

   * Moved statistic names to a term file in the priv directory.


File: CouchDB.info,  Node: Security<10>,  Next: Storage System<9>,  Prev: Runtime Statistics,  Up: Version 0 11 0

14.8.4.6 Security
.................

   * Fixed CVE-2010-0009: Apache CouchDB Timing Attack Vulnerability.

   * Added default cookie-authentication and users database.

   * Added Futon user interface for user signup and login.

   * Added per-database reader access control lists.

   * Added per-database security object for configuration data in
     validation functions.

   * Added proxy authentication handler


File: CouchDB.info,  Node: Storage System<9>,  Next: View Server<9>,  Prev: Security<10>,  Up: Version 0 11 0

14.8.4.7 Storage System
.......................

   * Adds batching of multiple updating requests, to improve throughput
     with many writers. Removed the now redundant couch_batch_save
     module.

   * Adds configurable compression of attachments.


File: CouchDB.info,  Node: View Server<9>,  Prev: Storage System<9>,  Up: Version 0 11 0

14.8.4.8 View Server
....................

   * Added optional 'raw' binary collation for faster view builds where
     Unicode collation is not important.

   * Improved view index build time by reducing ICU collation callouts.

   * Improved view information objects.

   * Bug fix for partial updates during view builds.

   * Move query server to a design-doc based protocol.

   * Use json2.js for JSON serialization for compatiblity with native
     JSON.

   * Major refactoring of couchjs to lay the groundwork for disabling
     cURL support. The new HTTP interaction acts like a synchronous
     XHR. Example usage of the new system is in the JavaScript CLI test
     runner.


File: CouchDB.info,  Node: 0 10 x Branch,  Next: 0 9 x Branch,  Prev: 0 11 x Branch,  Up: Release History

14.9 0.10.x Branch
==================

* Menu:

* Upgrade Notes: Upgrade Notes<8>.
* Version 0.10.2: Version 0 10 2.
* Version 0.10.1: Version 0 10 1.
* Version 0.10.0: Version 0 10 0.

Upgrade Notes

* Modular Configuration Directories::
* Show and List API change::
* Stricter enforcing of reduciness in reduce-functions::
* View query reduce parameter strictness::

Version 0.10.2

* Build and System Integration: Build and System Integration<4>.
* Security: Security<11>.
* Replicator: Replicator<12>.

Version 0.10.1

* Build and System Integration: Build and System Integration<5>.
* Replicator: Replicator<13>.
* Query Server: Query Server<2>.
* Stats::

Version 0.10.0

* Build and System Integration: Build and System Integration<6>.
* HTTP Interface: HTTP Interface<14>.
* Storage Format::
* View Server: View Server<10>.


File: CouchDB.info,  Node: Upgrade Notes<8>,  Next: Version 0 10 2,  Up: 0 10 x Branch

14.9.1 Upgrade Notes
--------------------

     Warning: *note Version 0.10.2: 4e1. contains important security
     fixes. Previous `0.10.x' releases are not recommended for regular
     usage.

* Menu:

* Modular Configuration Directories::
* Show and List API change::
* Stricter enforcing of reduciness in reduce-functions::
* View query reduce parameter strictness::


File: CouchDB.info,  Node: Modular Configuration Directories,  Next: Show and List API change,  Up: Upgrade Notes<8>

14.9.1.1 Modular Configuration Directories
..........................................

CouchDB now loads configuration from the following places (glob(7)(1)
syntax) in order:

   - PREFIX/default.ini

   - PREFIX/default.d/*

   - PREFIX/local.ini

   - PREFIX/local.d/*

  The configuration options for `couchdb' script have changed to:

    -a FILE     add configuration FILE to chain
    -A DIR      add configuration DIR to chain
    -n          reset configuration file chain (including system default)
    -c          print configuration file chain and exit


  ---------- Footnotes ----------

  (1) http://linux.die.net/man/7/glob


File: CouchDB.info,  Node: Show and List API change,  Next: Stricter enforcing of reduciness in reduce-functions,  Prev: Modular Configuration Directories,  Up: Upgrade Notes<8>

14.9.1.2 Show and List API change
.................................

Show and List functions must have a new structure in 0.10.  See
Formatting_with_Show_and_List(1) for details.

  ---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/Formatting_with_Show_and_List


File: CouchDB.info,  Node: Stricter enforcing of reduciness in reduce-functions,  Next: View query reduce parameter strictness,  Prev: Show and List API change,  Up: Upgrade Notes<8>

14.9.1.3 Stricter enforcing of reduciness in reduce-functions
.............................................................

Reduce functions are now required to reduce the number of values for a
key.


File: CouchDB.info,  Node: View query reduce parameter strictness,  Prev: Stricter enforcing of reduciness in reduce-functions,  Up: Upgrade Notes<8>

14.9.1.4 View query reduce parameter strictness
...............................................

CouchDB now considers the parameter `reduce=false' to be an error for
queries of map-only views, and responds with status code 400.


File: CouchDB.info,  Node: Version 0 10 2,  Next: Version 0 10 1,  Prev: Upgrade Notes<8>,  Up: 0 10 x Branch

14.9.2 Version 0.10.2
---------------------

* Menu:

* Build and System Integration: Build and System Integration<4>.
* Security: Security<11>.
* Replicator: Replicator<12>.


File: CouchDB.info,  Node: Build and System Integration<4>,  Next: Security<11>,  Up: Version 0 10 2

14.9.2.1 Build and System Integration
.....................................

   * Fixed distribution preparation for building on Mac OS X.


File: CouchDB.info,  Node: Security<11>,  Next: Replicator<12>,  Prev: Build and System Integration<4>,  Up: Version 0 10 2

14.9.2.2 Security
.................

   * Fixed *note CVE-2010-0009; Apache CouchDB Timing Attack
     Vulnerability: 4eb.


File: CouchDB.info,  Node: Replicator<12>,  Prev: Security<11>,  Up: Version 0 10 2

14.9.2.3 Replicator
...................

   * Avoid leaking file descriptors on automatic replication restarts.


File: CouchDB.info,  Node: Version 0 10 1,  Next: Version 0 10 0,  Prev: Version 0 10 2,  Up: 0 10 x Branch

14.9.3 Version 0.10.1
---------------------

* Menu:

* Build and System Integration: Build and System Integration<5>.
* Replicator: Replicator<13>.
* Query Server: Query Server<2>.
* Stats::


File: CouchDB.info,  Node: Build and System Integration<5>,  Next: Replicator<13>,  Up: Version 0 10 1

14.9.3.1 Build and System Integration
.....................................

   * Test suite now works with the distcheck target.


File: CouchDB.info,  Node: Replicator<13>,  Next: Query Server<2>,  Prev: Build and System Integration<5>,  Up: Version 0 10 1

14.9.3.2 Replicator
...................

   * Stability enhancements regarding redirects, timeouts, OAuth.


File: CouchDB.info,  Node: Query Server<2>,  Next: Stats,  Prev: Replicator<13>,  Up: Version 0 10 1

14.9.3.3 Query Server
.....................

   * Avoid process leaks

   * Allow list and view to span languages


File: CouchDB.info,  Node: Stats,  Prev: Query Server<2>,  Up: Version 0 10 1

14.9.3.4 Stats
..............

   * Eliminate new process flood on system wake


File: CouchDB.info,  Node: Version 0 10 0,  Prev: Version 0 10 1,  Up: 0 10 x Branch

14.9.4 Version 0.10.0
---------------------

* Menu:

* Build and System Integration: Build and System Integration<6>.
* HTTP Interface: HTTP Interface<14>.
* Storage Format::
* View Server: View Server<10>.


File: CouchDB.info,  Node: Build and System Integration<6>,  Next: HTTP Interface<14>,  Up: Version 0 10 0

14.9.4.1 Build and System Integration
.....................................

   * Changed `couchdb' script configuration options.

   * Added default.d and local.d configuration directories to load
     sequence.


File: CouchDB.info,  Node: HTTP Interface<14>,  Next: Storage Format,  Prev: Build and System Integration<6>,  Up: Version 0 10 0

14.9.4.2 HTTP Interface
.......................

   * Added optional cookie-based authentication handler.

   * Added optional two-legged OAuth authentication handler.


File: CouchDB.info,  Node: Storage Format,  Next: View Server<10>,  Prev: HTTP Interface<14>,  Up: Version 0 10 0

14.9.4.3 Storage Format
.......................

   * Add move headers with checksums to the end of database files for
     extra robust storage and faster storage.


File: CouchDB.info,  Node: View Server<10>,  Prev: Storage Format,  Up: Version 0 10 0

14.9.4.4 View Server
....................

   * Added native Erlang views for high-performance applications.


File: CouchDB.info,  Node: 0 9 x Branch,  Next: 0 8 x Branch,  Prev: 0 10 x Branch,  Up: Release History

14.10 0.9.x Branch
==================

* Menu:

* Upgrade Notes: Upgrade Notes<9>.
* Version 0.9.2: Version 0 9 2.
* Version 0.9.1: Version 0 9 1.
* Version 0.9.0: Version 0 9 0.

Upgrade Notes

* Response to Bulk Creation/Updates::
* Database File Format::
* Renamed "count" to "limit"::
* Moved View URLs::
* Attachments: Attachments<3>.
* Error Codes::
* ini file format::

Version 0.9.2

* Build and System Integration: Build and System Integration<7>.
* Replication: Replication<5>.

Version 0.9.1

* Build and System Integration: Build and System Integration<8>.
* Configuration and stats system::
* Database Core::
* External Handlers::
* Futon: Futon<11>.
* HTTP Interface: HTTP Interface<15>.
* JavaScript View Server::
* Replication: Replication<6>.

Version 0.9.0

* Build and System Integration: Build and System Integration<9>.
* Configuration and stats system: Configuration and stats system<2>.
* Database Core: Database Core<2>.
* Design Document Resource Paths::
* Futon Utility Client::
* HTTP Interface: HTTP Interface<16>.
* Replication: Replication<7>.


File: CouchDB.info,  Node: Upgrade Notes<9>,  Next: Version 0 9 2,  Up: 0 9 x Branch

14.10.1 Upgrade Notes
---------------------

* Menu:

* Response to Bulk Creation/Updates::
* Database File Format::
* Renamed "count" to "limit"::
* Moved View URLs::
* Attachments: Attachments<3>.
* Error Codes::
* ini file format::


File: CouchDB.info,  Node: Response to Bulk Creation/Updates,  Next: Database File Format,  Up: Upgrade Notes<9>

14.10.1.1 Response to Bulk Creation/Updates
...........................................

The response to a bulk creation / update now looks like this

    [
        {"id": "0", "rev": "3682408536"},
        {"id": "1", "rev": "3206753266"},
        {"id": "2", "error": "conflict", "reason": "Document update conflict."}
    ]



File: CouchDB.info,  Node: Database File Format,  Next: Renamed "count" to "limit",  Prev: Response to Bulk Creation/Updates,  Up: Upgrade Notes<9>

14.10.1.2 Database File Format
..............................

The database file format has changed. CouchDB itself does yet not
provide any tools for migrating your data. In the meantime, you can use
third-party scripts to deal with the migration, such as the dump/load
tools that come with the development version (trunk) of
couchdb-python(1).

  ---------- Footnotes ----------

  (1) http://code.google.com/p/couchdb-python/


File: CouchDB.info,  Node: Renamed "count" to "limit",  Next: Moved View URLs,  Prev: Database File Format,  Up: Upgrade Notes<9>

14.10.1.3 Renamed "count" to "limit"
....................................

The view query API has been changed: `count' has become `limit'.  This
is a better description of what the parameter does, and should be a
simple update in any client code.


File: CouchDB.info,  Node: Moved View URLs,  Next: Attachments<3>,  Prev: Renamed "count" to "limit",  Up: Upgrade Notes<9>

14.10.1.4 Moved View URLs
.........................

The view URLs have been moved to design document resources. This means
that paths that used to be like
<http://hostname:5984/mydb/_view/designname/viewname?limit=10> will now
look like
<http://hostname:5984/mydb/_design/designname/_view/viewname?limit=10>.
See the REST, Hypermedia, and CouchApps(1)  thread on dev for details.

  ---------- Footnotes ----------

  (1)
http://mail-archives.apache.org/mod_mbox/couchdb-dev/200902.mbox/%3Ce282921e0902242116n2cd207c4x7a9d0feced3f10d9@mail.gmail.com%3E


File: CouchDB.info,  Node: Attachments<3>,  Next: Error Codes,  Prev: Moved View URLs,  Up: Upgrade Notes<9>

14.10.1.5 Attachments
.....................

Names of attachments are no longer allowed to start with an underscore.


File: CouchDB.info,  Node: Error Codes,  Next: ini file format,  Prev: Attachments<3>,  Up: Upgrade Notes<9>

14.10.1.6 Error Codes
.....................

Some refinements have been made to error handling. CouchDB will send
400 instead of 500 on invalid query parameters. Most notably, document
update conflicts now respond with `409 Conflict' instead of `412
Precondition Failed'. The error code for when attempting to create a
database that already exists is now 412 instead of 409.


File: CouchDB.info,  Node: ini file format,  Prev: Error Codes,  Up: Upgrade Notes<9>

14.10.1.7 ini file format
.........................

CouchDB 0.9 changes sections and configuration variable names in
configuration files. Old .ini files won't work. Also note that CouchDB
now ships with two .ini files where 0.8 used couch.ini there are now
`default.ini' and `local.ini'.  `default.ini' contains CouchDB's
standard configuration values. local.ini is meant for local changes.
`local.ini' is not overwritten on CouchDB updates, so your edits are
safe. In addition, the new runtime configuration system persists
changes to the configuration in `local.ini'.


File: CouchDB.info,  Node: Version 0 9 2,  Next: Version 0 9 1,  Prev: Upgrade Notes<9>,  Up: 0 9 x Branch

14.10.2 Version 0.9.2
---------------------

* Menu:

* Build and System Integration: Build and System Integration<7>.
* Replication: Replication<5>.


File: CouchDB.info,  Node: Build and System Integration<7>,  Next: Replication<5>,  Up: Version 0 9 2

14.10.2.1 Build and System Integration
......................................

   * Remove branch callbacks to allow building couchjs against newer
     versions of Spidermonkey.


File: CouchDB.info,  Node: Replication<5>,  Prev: Build and System Integration<7>,  Up: Version 0 9 2

14.10.2.2 Replication
.....................

   * Fix replication with 0.10 servers initiated by an 0.9 server
     (COUCHDB-559(1)).

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-559


File: CouchDB.info,  Node: Version 0 9 1,  Next: Version 0 9 0,  Prev: Version 0 9 2,  Up: 0 9 x Branch

14.10.3 Version 0.9.1
---------------------

* Menu:

* Build and System Integration: Build and System Integration<8>.
* Configuration and stats system::
* Database Core::
* External Handlers::
* Futon: Futon<11>.
* HTTP Interface: HTTP Interface<15>.
* JavaScript View Server::
* Replication: Replication<6>.


File: CouchDB.info,  Node: Build and System Integration<8>,  Next: Configuration and stats system,  Up: Version 0 9 1

14.10.3.1 Build and System Integration
......................................

   * PID file directory is now created by the SysV/BSD daemon scripts.

   * Fixed the environment variables shown by the configure script.

   * Fixed the build instructions shown by the configure script.

   * Updated ownership and permission advice in `README' for better
     security.


File: CouchDB.info,  Node: Configuration and stats system,  Next: Database Core,  Prev: Build and System Integration<8>,  Up: Version 0 9 1

14.10.3.2 Configuration and stats system
........................................

   * Corrected missing configuration file error message.

   * Fixed incorrect recording of request time.


File: CouchDB.info,  Node: Database Core,  Next: External Handlers,  Prev: Configuration and stats system,  Up: Version 0 9 1

14.10.3.3 Database Core
.......................

   * Document validation for underscore prefixed variables.

   * Made attachment storage less sparse.

   * Fixed problems when a database with delayed commits pending is
     considered idle, and subject to losing changes when shutdown.
     (COUCHDB-334(1))

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-334


File: CouchDB.info,  Node: External Handlers,  Next: Futon<11>,  Prev: Database Core,  Up: Version 0 9 1

14.10.3.4 External Handlers
...........................

   * Fix POST requests.


File: CouchDB.info,  Node: Futon<11>,  Next: HTTP Interface<15>,  Prev: External Handlers,  Up: Version 0 9 1

14.10.3.5 Futon
...............

   * Redirect when loading a deleted view URI from the cookie.


File: CouchDB.info,  Node: HTTP Interface<15>,  Next: JavaScript View Server,  Prev: Futon<11>,  Up: Version 0 9 1

14.10.3.6 HTTP Interface
........................

   * Attachment requests respect the "rev" query-string parameter.


File: CouchDB.info,  Node: JavaScript View Server,  Next: Replication<6>,  Prev: HTTP Interface<15>,  Up: Version 0 9 1

14.10.3.7 JavaScript View Server
................................

   * Useful JavaScript Error messages.


File: CouchDB.info,  Node: Replication<6>,  Prev: JavaScript View Server,  Up: Version 0 9 1

14.10.3.8 Replication
.....................

   * Added support for Unicode characters transmitted as UTF-16
     surrogate pairs.

   * URL-encode attachment names when necessary.

   * Pull specific revisions of an attachment, instead of just the
     latest one.

   * Work around a rare chunk-merging problem in ibrowse.

   * Work with documents containing Unicode characters outside the Basic
     Multilingual Plane.


File: CouchDB.info,  Node: Version 0 9 0,  Prev: Version 0 9 1,  Up: 0 9 x Branch

14.10.4 Version 0.9.0
---------------------

* Menu:

* Build and System Integration: Build and System Integration<9>.
* Configuration and stats system: Configuration and stats system<2>.
* Database Core: Database Core<2>.
* Design Document Resource Paths::
* Futon Utility Client::
* HTTP Interface: HTTP Interface<16>.
* Replication: Replication<7>.


File: CouchDB.info,  Node: Build and System Integration<9>,  Next: Configuration and stats system<2>,  Up: Version 0 9 0

14.10.4.1 Build and System Integration
......................................

   * The `couchdb' script now supports system chainable configuration
     files.

   * The Mac OS X daemon script now redirects STDOUT and STDERR like
     SysV/BSD.

   * The build and system integration have been improved for
     portability.

   * Added COUCHDB_OPTIONS to etc/default/couchdb file.

   * Remove COUCHDB_INI_FILE and COUCHDB_PID_FILE from
     etc/default/couchdb file.

   * Updated `configure.ac' to manually link `libm' for portability.

   * Updated `configure.ac' to extended default library paths.

   * Removed inets configuration files.

   * Added command line test runner.

   * Created dev target for make.


File: CouchDB.info,  Node: Configuration and stats system<2>,  Next: Database Core<2>,  Prev: Build and System Integration<9>,  Up: Version 0 9 0

14.10.4.2 Configuration and stats system
........................................

   * Separate default and local configuration files.

   * HTTP interface for configuration changes.

   * Statistics framework with HTTP query API.


File: CouchDB.info,  Node: Database Core<2>,  Next: Design Document Resource Paths,  Prev: Configuration and stats system<2>,  Up: Version 0 9 0

14.10.4.3 Database Core
.......................

   * Faster B-tree implementation.

   * Changed internal JSON term format.

   * Improvements to Erlang VM interactions under heavy load.

   * User context and administrator role.

   * Update validations with design document validation functions.

   * Document purge functionality.

   * Ref-counting for database file handles.


File: CouchDB.info,  Node: Design Document Resource Paths,  Next: Futon Utility Client,  Prev: Database Core<2>,  Up: Version 0 9 0

14.10.4.4 Design Document Resource Paths
........................................

   * Added httpd_design_handlers config section.

   * Moved _view to httpd_design_handlers.

   * Added ability to render documents as non-JSON content-types with
     _show and _list functions, which are also httpd_design_handlers.


File: CouchDB.info,  Node: Futon Utility Client,  Next: HTTP Interface<16>,  Prev: Design Document Resource Paths,  Up: Version 0 9 0

14.10.4.5 Futon Utility Client
..............................

   * Added pagination to the database listing page.

   * Implemented attachment uploading from the document page.

   * Added page that shows the current configuration, and allows
     modification of option values.

   * Added a JSON "source view" for document display.

   * JSON data in view rows is now syntax highlighted.

   * Removed the use of an iframe for better integration with browser
     history and bookmarking.

   * Full database listing in the sidebar has been replaced by a short
     list of recent databases.

   * The view editor now allows selection of the view language if there
     is more than one configured.

   * Added links to go to the raw view or document URI.

   * Added status page to display currently running tasks in CouchDB.

   * JavaScript test suite split into multiple files.

   * Pagination for reduce views.


File: CouchDB.info,  Node: HTTP Interface<16>,  Next: Replication<7>,  Prev: Futon Utility Client,  Up: Version 0 9 0

14.10.4.6 HTTP Interface
........................

   * Added client side UUIDs for idempotent document creation

   * HTTP COPY for documents

   * Streaming of chunked attachment PUTs to disk

   * Remove negative count feature

   * Add include_docs option for view queries

   * Add multi-key view post for views

   * Query parameter validation

   * Use stale=ok to request potentially cached view index

   * External query handler module for full-text or other indexers.

   * Etags for attachments, views, shows and lists

   * Show and list functions for rendering documents and views as
     developer controlled content-types.

   * Attachment names may use slashes to allow uploading of nested
     directories (useful for static web hosting).

   * Option for a view to run over design documents.

   * Added newline to JSON responses. Closes bike-shed.


File: CouchDB.info,  Node: Replication<7>,  Prev: HTTP Interface<16>,  Up: Version 0 9 0

14.10.4.7 Replication
.....................

   * Using ibrowse.

   * Checkpoint replications so failures are less expensive.

   * Automatically retry of failed replications.

   * Stream attachments in pull-replication.


File: CouchDB.info,  Node: 0 8 x Branch,  Prev: 0 9 x Branch,  Up: Release History

14.11 0.8.x Branch
==================

* Menu:

* Version 0.8.1-incubating: Version 0 8 1-incubating.
* Version 0.8.0-incubating: Version 0 8 0-incubating.

Version 0.8.1-incubating

* Build and System Integration: Build and System Integration<10>.
* Database Core: Database Core<3>.
* Futon: Futon<12>.
* JavaScript View Server: JavaScript View Server<2>.
* HTTP Interface: HTTP Interface<17>.

Version 0.8.0-incubating

* Build and System Integration: Build and System Integration<11>.
* Database Core: Database Core<4>.
* Futon: Futon<13>.
* JavaScript View Server: JavaScript View Server<3>.
* HTTP Interface: HTTP Interface<18>.


File: CouchDB.info,  Node: Version 0 8 1-incubating,  Next: Version 0 8 0-incubating,  Up: 0 8 x Branch

14.11.1 Version 0.8.1-incubating
--------------------------------

* Menu:

* Build and System Integration: Build and System Integration<10>.
* Database Core: Database Core<3>.
* Futon: Futon<12>.
* JavaScript View Server: JavaScript View Server<2>.
* HTTP Interface: HTTP Interface<17>.


File: CouchDB.info,  Node: Build and System Integration<10>,  Next: Database Core<3>,  Up: Version 0 8 1-incubating

14.11.1.1 Build and System Integration
......................................

   * The `couchdb' script no longer uses `awk' for configuration checks
     as this was causing portability problems.

   * Updated `sudo' example in `README' to use the `-i' option, this
     fixes problems when invoking from a directory the `couchdb' user
     cannot access.


File: CouchDB.info,  Node: Database Core<3>,  Next: Futon<12>,  Prev: Build and System Integration<10>,  Up: Version 0 8 1-incubating

14.11.1.2 Database Core
.......................

   * Fix for replication problems where the write queues can get backed
     up if the writes aren't happening fast enough to keep up with the
     reads. For a large replication, this can exhaust memory and crash,
     or slow down the machine dramatically. The fix keeps only one
     document in the write queue at a time.

   * Fix for databases sometimes incorrectly reporting that they
     contain 0 documents after compaction.

   * CouchDB now uses ibrowse instead of inets for its internal HTTP
     client implementation. This means better replication stability.


File: CouchDB.info,  Node: Futon<12>,  Next: JavaScript View Server<2>,  Prev: Database Core<3>,  Up: Version 0 8 1-incubating

14.11.1.3 Futon
...............

   * The view selector dropdown should now work in Opera and Internet
     Explorer even when it includes optgroups for design documents.
     (COUCHDB-81(1))

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-81


File: CouchDB.info,  Node: JavaScript View Server<2>,  Next: HTTP Interface<17>,  Prev: Futon<12>,  Up: Version 0 8 1-incubating

14.11.1.4 JavaScript View Server
................................

   * Sealing of documents has been disabled due to an incompatibility
     with SpiderMonkey 1.9.

   * Improve error handling for undefined values emitted by map
     functions.  (COUCHDB-83(1))

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-83


File: CouchDB.info,  Node: HTTP Interface<17>,  Prev: JavaScript View Server<2>,  Up: Version 0 8 1-incubating

14.11.1.5 HTTP Interface
........................

   * Fix for chunked responses where chunks were always being split
     into multiple TCP packets, which caused problems with the test
     suite under Safari, and in some other cases.

   * Fix for an invalid JSON response body being returned for some
     kinds of views. (COUCHDB-84(1))

   * Fix for connections not getting closed after rejecting a chunked
     request.  (COUCHDB-55(2))

   * CouchDB can now be bound to IPv6 addresses.

   * The HTTP `Server' header now contains the versions of CouchDB and
     Erlang.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-84

  (2) https://issues.apache.org/jira/browse/COUCHDB-55


File: CouchDB.info,  Node: Version 0 8 0-incubating,  Prev: Version 0 8 1-incubating,  Up: 0 8 x Branch

14.11.2 Version 0.8.0-incubating
--------------------------------

* Menu:

* Build and System Integration: Build and System Integration<11>.
* Database Core: Database Core<4>.
* Futon: Futon<13>.
* JavaScript View Server: JavaScript View Server<3>.
* HTTP Interface: HTTP Interface<18>.


File: CouchDB.info,  Node: Build and System Integration<11>,  Next: Database Core<4>,  Up: Version 0 8 0-incubating

14.11.2.1 Build and System Integration
......................................

   * CouchDB can automatically respawn following a server crash.

   * Database server no longer refuses to start with a stale PID file.

   * System logrotate configuration provided.

   * Improved handling of ICU shared libraries.

   * The `couchdb' script now automatically enables SMP support in
     Erlang.

   * The `couchdb' and `couchjs' scripts have been improved for
     portability.

   * The build and system integration have been improved for
     portability.


File: CouchDB.info,  Node: Database Core<4>,  Next: Futon<13>,  Prev: Build and System Integration<11>,  Up: Version 0 8 0-incubating

14.11.2.2 Database Core
.......................

   * The view engine has been completely decoupled from the storage
     engine. Index data is now stored in separate files, and the format
     of the main database file has changed.

   * Databases can now be compacted to reclaim space used for deleted
     documents and old document revisions.

   * Support for incremental map/reduce views has been added.

   * To support map/reduce, the structure of design documents has
     changed. View values are now JSON objects containing at least a
     `map' member, and optionally a `reduce' member.

   * View servers are now identified by name (for example `javascript')
     instead of by media type.

   * Automatically generated document IDs are now based on proper UUID
     generation using the crypto module.

   * The field `content-type' in the JSON representation of attachments
     has been renamed to `content_type' (underscore).


File: CouchDB.info,  Node: Futon<13>,  Next: JavaScript View Server<3>,  Prev: Database Core<4>,  Up: Version 0 8 0-incubating

14.11.2.3 Futon
...............

   * When adding a field to a document, Futon now just adds a field
     with an autogenerated name instead of prompting for the name with
     a dialog. The name is automatically put into edit mode so that it
     can be changed immediately.

   * Fields are now sorted alphabetically by name when a document is
     displayed.

   * Futon can be used to create and update permanent views.

   * The maximum number of rows to display per page on the database
     page can now be adjusted.

   * Futon now uses the XMLHTTPRequest API asynchronously to
     communicate with the CouchDB HTTP server, so that most operations
     no longer block the browser.

   * View results sorting can now be switched between ascending and
     descending by clicking on the `Key' column header.

   * Fixed a bug where documents that contained a `@' character could
     not be viewed. (COUCHDB-12(1))

   * The database page now provides a `Compact' button to trigger
     database compaction. (COUCHDB-38(2))

   * Fixed portential double encoding of document IDs and other URI
     segments in many instances. (COUCHDB-39(3))

   * Improved display of attachments.

   * The JavaScript Shell has been removed due to unresolved licensing
     issues.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-12

  (2) https://issues.apache.org/jira/browse/COUCHDB-38

  (3) https://issues.apache.org/jira/browse/COUCHDB-39


File: CouchDB.info,  Node: JavaScript View Server<3>,  Next: HTTP Interface<18>,  Prev: Futon<13>,  Up: Version 0 8 0-incubating

14.11.2.4 JavaScript View Server
................................

   * SpiderMonkey is no longer included with CouchDB, but rather
     treated as a normal external dependency. A simple C program
     (`_couchjs') is provided that links against an existing
     SpiderMonkey installation and uses the interpreter embedding API.

   * View functions using the default JavaScript view server can now do
     logging using the global `log(message)' function. Log messages are
     directed into the CouchDB log at `INFO' level. (COUCHDB-59(1))

   * The global `map(key, value)' function made available to view code
     has been renamed to `emit(key, value)'.

   * Fixed handling of exceptions raised by view functions.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-59


File: CouchDB.info,  Node: HTTP Interface<18>,  Prev: JavaScript View Server<3>,  Up: Version 0 8 0-incubating

14.11.2.5 HTTP Interface
........................

   * CouchDB now uses MochiWeb instead of inets for the HTTP server
     implementation. Among other things, this means that the extra
     configuration files needed for inets (such as `couch_httpd.conf')
     are no longer used.

   * The HTTP interface now completely supports the `HEAD' method.
     (COUCHDB-3(1))

   * Improved compliance of `Etag' handling with the HTTP specification.
     (COUCHDB-13(2))

   * Etags are no longer included in responses to document `GET'
     requests that include query string parameters causing the JSON
     response to change without the revision or the URI having changed.

   * The bulk document update API has changed slightly on both the
     request and the response side. In addition, bulk updates are now
     atomic.

   * CouchDB now uses `TCP_NODELAY' to fix performance problems with
     persistent connections on some platforms due to nagling.

   * Including a `?descending=false' query string parameter in requests
     to views no longer raises an error.

   * Requests to unknown top-level reserved URLs (anything with a
     leading underscore) now return a `unknown_private_path' error
     instead of the confusing `illegal_database_name'.

   * The Temporary view handling now expects a JSON request body, where
     the JSON is an object with at least a `map' member, and optional
     `reduce' and `language' members.

   * Temporary views no longer determine the view server based on the
     Content-Type header of the `POST' request, but rather by looking
     for a `language' member in the JSON body of the request.

   * The status code of responses to `DELETE' requests is now 200 to
     reflect that that the deletion is performed synchronously.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-3

  (2) https://issues.apache.org/jira/browse/COUCHDB-13


File: CouchDB.info,  Node: Security Issues Information,  Next: Reporting New Security Problems with Apache CouchDB,  Prev: Release History,  Up: Top

15 Security Issues Information
******************************

* Menu:

* CVE-2010-0009; Apache CouchDB Timing Attack Vulnerability: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability.
* CVE-2010-2234; Apache CouchDB Cross Site Request Forgery Attack: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack.
* CVE-2010-3854; Apache CouchDB Cross Site Scripting Issue: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue.
* CVE-2012-5641; Information disclosure via unescaped backslashes in URLs on Windows: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows.
* CVE-2012-5649; JSONP arbitrary code execution with Adobe Flash: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash.
* CVE-2012-5650; DOM based Cross-Site Scripting via Futon UI: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI.
* CVE-2014-2668; DoS (CPU and memory consumption) via the count parameter to /_uuids: CVE-2014-2668 DoS CPU and memory consumption via the count parameter to /_uuids.

CVE-2010-0009: Apache CouchDB Timing Attack Vulnerability

* Description::
* Mitigation::
* Example::
* Credit::

CVE-2010-2234: Apache CouchDB Cross Site Request Forgery Attack

* Description: Description<2>.
* Mitigation: Mitigation<2>.
* Example: Example<2>.
* Credit: Credit<2>.

CVE-2010-3854: Apache CouchDB Cross Site Scripting Issue

* Description: Description<3>.
* Mitigation: Mitigation<3>.
* Example: Example<3>.
* Credit: Credit<3>.

CVE-2012-5641: Information disclosure via unescaped backslashes in URLs on Windows

* Description: Description<4>.
* Mitigation: Mitigation<4>.
* Work-Around::
* Acknowledgement::
* References::

CVE-2012-5649: JSONP arbitrary code execution with Adobe Flash

* Description: Description<5>.
* Mitigation: Mitigation<5>.
* Work-Around: Work-Around<2>.

CVE-2012-5650: DOM based Cross-Site Scripting via Futon UI

* Description: Description<6>.
* Mitigation: Mitigation<6>.
* Work-Around: Work-Around<3>.
* Acknowledgement: Acknowledgement<2>.

CVE-2014-2668: DoS (CPU and memory consumption) via the count parameter to /_uuids

* Description: Description<7>.
* Mitigation: Mitigation<7>.
* Work-Around: Work-Around<4>.


File: CouchDB.info,  Node: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability,  Next: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack,  Up: Security Issues Information

15.1 CVE-2010-0009: Apache CouchDB Timing Attack Vulnerability
==============================================================

     Date: 31.03.2010

     Affected: Apache CouchDB 0.8.0 to 0.10.1

     Severity: Important

     Vendor: The Apache Software Foundation

* Menu:

* Description::
* Mitigation::
* Example::
* Credit::


File: CouchDB.info,  Node: Description,  Next: Mitigation,  Up: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability

15.1.1 Description
------------------

Apache CouchDB versions prior to version *note 0.11.0: 4d2. are
vulnerable to timing attacks, also known as side-channel information
leakage, due to using simple break-on-inequality string comparisons
when verifying hashes and passwords.


File: CouchDB.info,  Node: Mitigation,  Next: Example,  Prev: Description,  Up: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability

15.1.2 Mitigation
-----------------

All users should upgrade to CouchDB *note 0.11.0: 4d2.  Upgrades from
the *note 0.10.x: 4de. series should be seamless.  Users on earlier
versions should consult with *note upgrade notes: 4df.


File: CouchDB.info,  Node: Example,  Next: Credit,  Prev: Mitigation,  Up: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability

15.1.3 Example
--------------

A canonical description of the attack can be found in
<http://codahale.com/a-lesson-in-timing-attacks/>


File: CouchDB.info,  Node: Credit,  Prev: Example,  Up: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability

15.1.4 Credit
-------------

This issue was discovered by _Jason Davies_ of the Apache CouchDB
development team.


File: CouchDB.info,  Node: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack,  Next: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue,  Prev: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability,  Up: Security Issues Information

15.2 CVE-2010-2234: Apache CouchDB Cross Site Request Forgery Attack
====================================================================

     Date: 21.02.2010

     Affected: Apache CouchDB 0.8.0 to 0.11.1

     Severity: Important

     Vendor: The Apache Software Foundation

* Menu:

* Description: Description<2>.
* Mitigation: Mitigation<2>.
* Example: Example<2>.
* Credit: Credit<2>.


File: CouchDB.info,  Node: Description<2>,  Next: Mitigation<2>,  Up: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack

15.2.1 Description
------------------

Apache CouchDB versions prior to version *note 0.11.1: 4c5. are
vulnerable to Cross Site Request Forgery(1) (CSRF) attacks.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Cross-site_request_forgery


File: CouchDB.info,  Node: Mitigation<2>,  Next: Example<2>,  Prev: Description<2>,  Up: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack

15.2.2 Mitigation
-----------------

All users should upgrade to CouchDB *note 0.11.2: 4b2.  or *note 1.0.1:
4a0.

  Upgrades from the *note 0.11.x: 4ad. and *note 0.10.x: 4de. series
should be seamless.

  Users on earlier versions should consult with upgrade notes.


File: CouchDB.info,  Node: Example<2>,  Next: Credit<2>,  Prev: Mitigation<2>,  Up: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack

15.2.3 Example
--------------

A malicious website can `POST' arbitrary JavaScript code to well known
CouchDB installation URLs (like <http://localhost:5984/>) and make the
browser execute the injected JavaScript in the security context of
CouchDB's admin interface Futon.

  Unrelated, but in addition the JSONP API has been turned off by
default to avoid potential information leakage.


File: CouchDB.info,  Node: Credit<2>,  Prev: Example<2>,  Up: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack

15.2.4 Credit
-------------

This CSRF issue was discovered by a source that wishes to stay
anonymous.


File: CouchDB.info,  Node: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue,  Next: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows,  Prev: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack,  Up: Security Issues Information

15.3 CVE-2010-3854: Apache CouchDB Cross Site Scripting Issue
=============================================================

     Date: 28.01.2011

     Affected: Apache CouchDB 0.8.0 to 1.0.1

     Severity: Important

     Vendor: The Apache Software Foundation

* Menu:

* Description: Description<3>.
* Mitigation: Mitigation<3>.
* Example: Example<3>.
* Credit: Credit<3>.


File: CouchDB.info,  Node: Description<3>,  Next: Mitigation<3>,  Up: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue

15.3.1 Description
------------------

Apache CouchDB versions prior to version *note 1.0.2: 499. are
vulnerable to Cross Site Scripting(1) (XSS) attacks.

  ---------- Footnotes ----------

  (1) http://en.wikipedia.org/wiki/Cross-site_scripting


File: CouchDB.info,  Node: Mitigation<3>,  Next: Example<3>,  Prev: Description<3>,  Up: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue

15.3.2 Mitigation
-----------------

All users should upgrade to CouchDB *note 1.0.2: 499.

  Upgrades from the *note 0.11.x: 4ad. and *note 0.10.x: 4de. series
should be seamless.

  Users on earlier versions should consult with upgrade notes.


File: CouchDB.info,  Node: Example<3>,  Next: Credit<3>,  Prev: Mitigation<3>,  Up: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue

15.3.3 Example
--------------

Due to inadequate validation of request parameters and cookie data in
Futon, CouchDB's web-based administration UI, a malicious site can
execute arbitrary code in the context of a user's browsing session.


File: CouchDB.info,  Node: Credit<3>,  Prev: Example<3>,  Up: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue

15.3.4 Credit
-------------

This XSS issue was discovered by a source that wishes to stay anonymous.


File: CouchDB.info,  Node: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows,  Next: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash,  Prev: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue,  Up: Security Issues Information

15.4 CVE-2012-5641: Information disclosure via unescaped backslashes in URLs on Windows
=======================================================================================

     Date: 14.01.2013

     Affected: All Windows-based releases of Apache CouchDB, up to and
     including 1.0.3, 1.1.1, and 1.2.0 are vulnerable.

     Severity: Moderate

     Vendor: The Apache Software Foundation

* Menu:

* Description: Description<4>.
* Mitigation: Mitigation<4>.
* Work-Around::
* Acknowledgement::
* References::


File: CouchDB.info,  Node: Description<4>,  Next: Mitigation<4>,  Up: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows

15.4.1 Description
------------------

A specially crafted request could be used to access content directly
that would otherwise be protected by inbuilt CouchDB security
mechanisms. This request could retrieve in binary form any CouchDB
database, including the `_users' or `_replication' databases, or any
other file that the user account used to run CouchDB might have read
access to on the local filesystem. This exploit is due to a
vulnerability in the included MochiWeb HTTP library.


File: CouchDB.info,  Node: Mitigation<4>,  Next: Work-Around,  Prev: Description<4>,  Up: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows

15.4.2 Mitigation
-----------------

Upgrade to a supported CouchDB release that includes this fix, such as:

   - *note 1.0.4: 487.

   - *note 1.1.2: 470.

   - *note 1.2.1: 450.

   - *note 1.3.x: 432.

  All listed releases have included a specific fix for the MochiWeb
component.


File: CouchDB.info,  Node: Work-Around,  Next: Acknowledgement,  Prev: Mitigation<4>,  Up: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows

15.4.3 Work-Around
------------------

Users may simply exclude any file-based web serving components directly
within their configuration file, typically in `local.ini'. On a default
CouchDB installation, this requires amending the *note
httpd_global_handlers/favicon.ico: bb. and *note
httpd_global_handlers/_utils: b9. lines within *note
httpd_global_handlers: ae.:

    [httpd_global_handlers]
    favicon.ico = {couch_httpd_misc_handlers, handle_welcome_req, <<"Forbidden">>}
    _utils = {couch_httpd_misc_handlers, handle_welcome_req, <<"Forbidden">>}

If additional handlers have been added, such as to support Adobe's Flash
`crossdomain.xml' files, these would also need to be excluded.


File: CouchDB.info,  Node: Acknowledgement,  Next: References,  Prev: Work-Around,  Up: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows

15.4.4 Acknowledgement
----------------------

The issue was found and reported by Sriram Melkote to the upstream
MochiWeb project.


File: CouchDB.info,  Node: References,  Prev: Acknowledgement,  Up: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows

15.4.5 References
-----------------

   - <https://github.com/melkote/mochiweb/commit/ac2bf>


File: CouchDB.info,  Node: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash,  Next: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI,  Prev: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows,  Up: Security Issues Information

15.5 CVE-2012-5649: JSONP arbitrary code execution with Adobe Flash
===================================================================

     Date: 14.01.2013

     Affected: Releases up to and including 1.0.3, 1.1.1, and 1.2.0 are
     vulnerable, if administrators have enabled JSONP.

     Severity: Moderate

     Vendor: The Apache Software Foundation

* Menu:

* Description: Description<5>.
* Mitigation: Mitigation<5>.
* Work-Around: Work-Around<2>.


File: CouchDB.info,  Node: Description<5>,  Next: Mitigation<5>,  Up: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash

15.5.1 Description
------------------

A hand-crafted JSONP callback and response can be used to run arbitrary
code inside client-side browsers via Adobe Flash.


File: CouchDB.info,  Node: Mitigation<5>,  Next: Work-Around<2>,  Prev: Description<5>,  Up: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash

15.5.2 Mitigation
-----------------

Upgrade to a supported CouchDB release that includes this fix, such as:

   - *note 1.0.4: 487.

   - *note 1.1.2: 470.

   - *note 1.2.1: 450.

   - *note 1.3.x: 432.

  All listed releases have included a specific fix.


File: CouchDB.info,  Node: Work-Around<2>,  Prev: Mitigation<5>,  Up: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash

15.5.3 Work-Around
------------------

Disable JSONP or don't enable it since it's disabled by default.


File: CouchDB.info,  Node: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI,  Next: CVE-2014-2668 DoS CPU and memory consumption via the count parameter to /_uuids,  Prev: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash,  Up: Security Issues Information

15.6 CVE-2012-5650: DOM based Cross-Site Scripting via Futon UI
===============================================================

     Date: 14.01.2013

     Affected: Apache CouchDB releases up to and including 1.0.3, 1.1.1,
     and 1.2.0 are vulnerable.

     Severity: Moderate

     Vendor: The Apache Software Foundation

* Menu:

* Description: Description<6>.
* Mitigation: Mitigation<6>.
* Work-Around: Work-Around<3>.
* Acknowledgement: Acknowledgement<2>.


File: CouchDB.info,  Node: Description<6>,  Next: Mitigation<6>,  Up: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI

15.6.1 Description
------------------

Query parameters passed into the browser-based test suite are not
sanitised, and can be used to load external resources. An attacker may
execute JavaScript code in the browser, using the context of the remote
user.


File: CouchDB.info,  Node: Mitigation<6>,  Next: Work-Around<3>,  Prev: Description<6>,  Up: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI

15.6.2 Mitigation
-----------------

Upgrade to a supported CouchDB release that includes this fix, such as:

   - *note 1.0.4: 487.

   - *note 1.1.2: 470.

   - *note 1.2.1: 450.

   - *note 1.3.x: 432.

  All listed releases have included a specific fix.


File: CouchDB.info,  Node: Work-Around<3>,  Next: Acknowledgement<2>,  Prev: Mitigation<6>,  Up: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI

15.6.3 Work-Around
------------------

Disable the Futon user interface completely, by adapting `local.ini' and
restarting CouchDB:

    [httpd_global_handlers]
    _utils = {couch_httpd_misc_handlers, handle_welcome_req, <<"Forbidden">>}

Or by removing the UI test suite components:

   - share/www/verify_install.html

   - share/www/couch_tests.html

   - share/www/custom_test.html


File: CouchDB.info,  Node: Acknowledgement<2>,  Prev: Work-Around<3>,  Up: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI

15.6.4 Acknowledgement
----------------------

This vulnerability was discovered & reported to the Apache Software
Foundation by Frederik Braun(1).

  ---------- Footnotes ----------

  (1) https://frederik-braun.com/


File: CouchDB.info,  Node: CVE-2014-2668 DoS CPU and memory consumption via the count parameter to /_uuids,  Prev: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI,  Up: Security Issues Information

15.7 CVE-2014-2668: DoS (CPU and memory consumption) via the count parameter to /_uuids
=======================================================================================

     Date: 26.03.2014

     Affected: Apache CouchDB releases up to and including 1.3.1, 1.4.0,
     and 1.5.0 are vulnerable.

     Severity: Moderate

     Vendor: The Apache Software Foundation

* Menu:

* Description: Description<7>.
* Mitigation: Mitigation<7>.
* Work-Around: Work-Around<4>.


File: CouchDB.info,  Node: Description<7>,  Next: Mitigation<7>,  Up: CVE-2014-2668 DoS CPU and memory consumption via the count parameter to /_uuids

15.7.1 Description
------------------

The *note /_uuids: 367. resource's `count' query parameter is able to
take unreasonable huge numeric value which leads to exhaustion of
server resources (CPU and memory) and to DoS as the result.


File: CouchDB.info,  Node: Mitigation<7>,  Next: Work-Around<4>,  Prev: Description<7>,  Up: CVE-2014-2668 DoS CPU and memory consumption via the count parameter to /_uuids

15.7.2 Mitigation
-----------------

Upgrade to a supported CouchDB release that includes this fix, such as:

   - *note 1.5.1: 425.

   - *note 1.6.0: 420.

  All listed releases have included a specific fix to


File: CouchDB.info,  Node: Work-Around<4>,  Prev: Mitigation<7>,  Up: CVE-2014-2668 DoS CPU and memory consumption via the count parameter to /_uuids

15.7.3 Work-Around
------------------

Disable the *note /_uuids: 367. handler completely, by adapting
`local.ini' and restarting CouchDB:

    [httpd_global_handlers]
    _uuids =



File: CouchDB.info,  Node: Reporting New Security Problems with Apache CouchDB,  Next: About CouchDB Documentation,  Prev: Security Issues Information,  Up: Top

16 Reporting New Security Problems with Apache CouchDB
******************************************************

The Apache Software Foundation takes a very active stance in eliminating
security problems and denial of service attacks against Apache CouchDB.

  We strongly encourage folks to report such problems to our private
security mailing list first, before disclosing them in a public forum.

  Please note that the security mailing list should only be used for
reporting undisclosed security vulnerabilities in Apache CouchDB and
managing the process of fixing such vulnerabilities. We cannot accept
regular bug reports or other queries at this address. All mail sent to
this address that does not relate to an undisclosed security problem in
the Apache CouchDB source code will be ignored.

  If you need to report a bug that isn't an undisclosed security
vulnerability, please use the bug reporting page(1).

  Questions about:

   - How to configure CouchDB securely

   - If a vulnerability applies to your particular application

   - Obtaining further information on a published vulnerability

   - Availability of patches and/or new releases

  should be address to the users mailing list
<user@couchdb.apache.org>. Please see the mailing lists page(2) for
details of how to subscribe.

  The private security mailing address is: <security@couchdb.apache.org>

  Please read how the Apache Software Foundation handles security(3)
reports to know what to expect.

  Note that all networked servers are subject to denial of service
attacks, and we cannot promise magic workarounds to generic problems
(such as a client streaming lots of data to your server, or
re-requesting the same URL repeatedly). In general our philosophy is to
avoid any attacks which can cause the server to consume resources in a
non-linear relationship to the size of inputs.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB

  (2) http://couchdb.apache.org/#mailing-list

  (3) http://apache.org/security/committers.html


File: CouchDB.info,  Node: About CouchDB Documentation,  Next: HTTP API Reference,  Prev: Reporting New Security Problems with Apache CouchDB,  Up: Top

17 About CouchDB Documentation
******************************

* Menu:

* License::


File: CouchDB.info,  Node: License,  Up: About CouchDB Documentation

17.1 License
============


                                    Apache License
                              Version 2.0, January 2004
                           http://www.apache.org/licenses/

      TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

      1. Definitions.

         "License" shall mean the terms and conditions for use, reproduction,
         and distribution as defined by Sections 1 through 9 of this document.

         "Licensor" shall mean the copyright owner or entity authorized by
         the copyright owner that is granting the License.

         "Legal Entity" shall mean the union of the acting entity and all
         other entities that control, are controlled by, or are under common
         control with that entity. For the purposes of this definition,
         "control" means (i) the power, direct or indirect, to cause the
         direction or management of such entity, whether by contract or
         otherwise, or (ii) ownership of fifty percent (50%) or more of the
         outstanding shares, or (iii) beneficial ownership of such entity.

         "You" (or "Your") shall mean an individual or Legal Entity
         exercising permissions granted by this License.

         "Source" form shall mean the preferred form for making modifications,
         including but not limited to software source code, documentation
         source, and configuration files.

         "Object" form shall mean any form resulting from mechanical
         transformation or translation of a Source form, including but
         not limited to compiled object code, generated documentation,
         and conversions to other media types.

         "Work" shall mean the work of authorship, whether in Source or
         Object form, made available under the License, as indicated by a
         copyright notice that is included in or attached to the work
         (an example is provided in the Appendix below).

         "Derivative Works" shall mean any work, whether in Source or Object
         form, that is based on (or derived from) the Work and for which the
         editorial revisions, annotations, elaborations, or other modifications
         represent, as a whole, an original work of authorship. For the purposes
         of this License, Derivative Works shall not include works that remain
         separable from, or merely link (or bind by name) to the interfaces of,
         the Work and Derivative Works thereof.

         "Contribution" shall mean any work of authorship, including
         the original version of the Work and any modifications or additions
         to that Work or Derivative Works thereof, that is intentionally
         submitted to Licensor for inclusion in the Work by the copyright owner
         or by an individual or Legal Entity authorized to submit on behalf of
         the copyright owner. For the purposes of this definition, "submitted"
         means any form of electronic, verbal, or written communication sent
         to the Licensor or its representatives, including but not limited to
         communication on electronic mailing lists, source code control systems,
         and issue tracking systems that are managed by, or on behalf of, the
         Licensor for the purpose of discussing and improving the Work, but
         excluding communication that is conspicuously marked or otherwise
         designated in writing by the copyright owner as "Not a Contribution."

         "Contributor" shall mean Licensor and any individual or Legal Entity
         on behalf of whom a Contribution has been received by Licensor and
         subsequently incorporated within the Work.

      2. Grant of Copyright License. Subject to the terms and conditions of
         this License, each Contributor hereby grants to You a perpetual,
         worldwide, non-exclusive, no-charge, royalty-free, irrevocable
         copyright license to reproduce, prepare Derivative Works of,
         publicly display, publicly perform, sublicense, and distribute the
         Work and such Derivative Works in Source or Object form.

      3. Grant of Patent License. Subject to the terms and conditions of
         this License, each Contributor hereby grants to You a perpetual,
         worldwide, non-exclusive, no-charge, royalty-free, irrevocable
         (except as stated in this section) patent license to make, have made,
         use, offer to sell, sell, import, and otherwise transfer the Work,
         where such license applies only to those patent claims licensable
         by such Contributor that are necessarily infringed by their
         Contribution(s) alone or by combination of their Contribution(s)
         with the Work to which such Contribution(s) was submitted. If You
         institute patent litigation against any entity (including a
         cross-claim or counterclaim in a lawsuit) alleging that the Work
         or a Contribution incorporated within the Work constitutes direct
         or contributory patent infringement, then any patent licenses
         granted to You under this License for that Work shall terminate
         as of the date such litigation is filed.

      4. Redistribution. You may reproduce and distribute copies of the
         Work or Derivative Works thereof in any medium, with or without
         modifications, and in Source or Object form, provided that You
         meet the following conditions:

         (a) You must give any other recipients of the Work or
             Derivative Works a copy of this License; and

         (b) You must cause any modified files to carry prominent notices
             stating that You changed the files; and

         (c) You must retain, in the Source form of any Derivative Works
             that You distribute, all copyright, patent, trademark, and
             attribution notices from the Source form of the Work,
             excluding those notices that do not pertain to any part of
             the Derivative Works; and

         (d) If the Work includes a "NOTICE" text file as part of its
             distribution, then any Derivative Works that You distribute must
             include a readable copy of the attribution notices contained
             within such NOTICE file, excluding those notices that do not
             pertain to any part of the Derivative Works, in at least one
             of the following places: within a NOTICE text file distributed
             as part of the Derivative Works; within the Source form or
             documentation, if provided along with the Derivative Works; or,
             within a display generated by the Derivative Works, if and
             wherever such third-party notices normally appear. The contents
             of the NOTICE file are for informational purposes only and
             do not modify the License. You may add Your own attribution
             notices within Derivative Works that You distribute, alongside
             or as an addendum to the NOTICE text from the Work, provided
             that such additional attribution notices cannot be construed
             as modifying the License.

         You may add Your own copyright statement to Your modifications and
         may provide additional or different license terms and conditions
         for use, reproduction, or distribution of Your modifications, or
         for any such Derivative Works as a whole, provided Your use,
         reproduction, and distribution of the Work otherwise complies with
         the conditions stated in this License.

      5. Submission of Contributions. Unless You explicitly state otherwise,
         any Contribution intentionally submitted for inclusion in the Work
         by You to the Licensor shall be under the terms and conditions of
         this License, without any additional terms or conditions.
         Notwithstanding the above, nothing herein shall supersede or modify
         the terms of any separate license agreement you may have executed
         with Licensor regarding such Contributions.

      6. Trademarks. This License does not grant permission to use the trade
         names, trademarks, service marks, or product names of the Licensor,
         except as required for reasonable and customary use in describing the
         origin of the Work and reproducing the content of the NOTICE file.

      7. Disclaimer of Warranty. Unless required by applicable law or
         agreed to in writing, Licensor provides the Work (and each
         Contributor provides its Contributions) on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
         implied, including, without limitation, any warranties or conditions
         of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
         PARTICULAR PURPOSE. You are solely responsible for determining the
         appropriateness of using or redistributing the Work and assume any
         risks associated with Your exercise of permissions under this License.

      8. Limitation of Liability. In no event and under no legal theory,
         whether in tort (including negligence), contract, or otherwise,
         unless required by applicable law (such as deliberate and grossly
         negligent acts) or agreed to in writing, shall any Contributor be
         liable to You for damages, including any direct, indirect, special,
         incidental, or consequential damages of any character arising as a
         result of this License or out of the use or inability to use the
         Work (including but not limited to damages for loss of goodwill,
         work stoppage, computer failure or malfunction, or any and all
         other commercial damages or losses), even if such Contributor
         has been advised of the possibility of such damages.

      9. Accepting Warranty or Additional Liability. While redistributing
         the Work or Derivative Works thereof, You may choose to offer,
         and charge a fee for, acceptance of support, warranty, indemnity,
         or other liability obligations and/or rights consistent with this
         License. However, in accepting such obligations, You may act only
         on Your own behalf and on Your sole responsibility, not on behalf
         of any other Contributor, and only if You agree to indemnify,
         defend, and hold each Contributor harmless for any liability
         incurred by, or claims asserted against, such Contributor by reason
         of your accepting any such warranty or additional liability.

      END OF TERMS AND CONDITIONS

      APPENDIX: How to apply the Apache License to your work.

         To apply the Apache License to your work, attach the following
         boilerplate notice, with the fields enclosed by brackets "[]"
         replaced with your own identifying information. (Don't include
         the brackets!)  The text should be enclosed in the appropriate
         comment syntax for the file format. We also recommend that a
         file or class name and description of purpose be included on the
         same "printed page" as the copyright notice for easier
         identification within third-party archives.

      Copyright [yyyy] [name of copyright owner]

      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.



File: CouchDB.info,  Node: HTTP API Reference,  Next: Configuration Reference,  Prev: About CouchDB Documentation,  Up: Top

HTTP API Reference
******************

* Menu:

* GET /: 0. Returns the welcome message and version information
* GET /_active_tasks: 1. Obtains a list of the tasks running in the server
* GET /_all_dbs: 2. Returns a list of all the databases
* GET /_config: 3. Obtains a list of the entire server configuration
* GET /_config/{section}: 4. Returns all the configuration values for the
                            specified section
* GET /_config/{section}/{key}: 5. Returns a specific section/configuration
                                    value
* PUT /_config/{section}/{key}: 6. Sets the specified configuration value
* DELETE /_config/{section}/{key}: 7. Removes the current setting
* GET /_db_updates: 8. Return the server changes of databases
* GET /_log: 9. Returns the server log file
* POST /_replicate: a. Starts or cancels the replication
* POST /_restart: b. Restarts the server
* GET /_session: c. Returns Cookie-based login user information
* POST /_session: d. Authenticates user by Cookie-based user login
* DELETE /_session: e. Logout Cookie-based user
* GET /_stats: f. Returns server statistics
* GET /_utils: 10. Redirects to /_utils/
* GET /_utils/: 11. CouchDB administration interface (Futon)
* GET /_uuids: 12. Generates a list of UUIDs from the server
* GET /favicon.ico: 13. Returns the site icon
* HEAD /{db}: 14. Checks the database existence
* GET /{db}: 15. Returns the database information
* POST /{db}: 16. Creates a new document with generated ID if _id is not
                        specified
* PUT /{db}: 17. Creates a new database
* DELETE /{db}: 18. Deletes an existing database
* GET /{db}/_all_docs: 19. Returns a built-in view of all documents in this
                         database
* POST /{db}/_all_docs: 1a. Returns certain rows from the built-in view of all
                          documents
* POST /{db}/_bulk_docs: 1b. Inserts or updates multiple documents in to the
                           database in a single request
* GET /{db}/_changes: 1c. Returns changes for the given database
* POST /{db}/_changes: 1d. Returns changes for the given database for certain
                         document IDs
* POST /{db}/_compact: 1e. Starts a compaction for the database
* POST /{db}/_compact/{ddoc}: 1f. Starts a compaction for all the views in the
                                  selected design document
* HEAD /{db}/_design/{ddoc}: 20. Returns bare information in the HTTP Headers
                                 for the design document
* GET /{db}/_design/{ddoc}: 21. Returns the design document
* PUT /{db}/_design/{ddoc}: 22. Creates a new design document or new version
                                of an existing one
* DELETE /{db}/_design/{ddoc}: 23. Deletes the design document
* COPY /{db}/_design/{ddoc}: 24. Copies the design document
* GET /{db}/_design/{ddoc}/_info: 25. Returns view index information for the
                                      specified design document
* GET /{db}/_design/{ddoc}/_list/{func}/{other-ddoc}/{view}: 26. Execute
                                                                       s a
                                                                       list fu
                                                                       nction
                                                                       against
                                                                       the
                                                                       view
                                                                       from
                                                                       other
                                                                       design
                                                                       documen
                                                                       t
* POST /{db}/_design/{ddoc}/_list/{func}/{other-ddoc}/{view}: 27. Same
                                                                        as GET
                                                                        method
                                                                        for
                                                                        the re
                                                                        lated
                                                                        endpoi
                                                                        nt
* GET /{db}/_design/{ddoc}/_list/{func}/{view}: 28. Executes a list
                                                        function against the
                                                        view from the same
                                                        design document
* POST /{db}/_design/{ddoc}/_list/{func}/{view}: 29. Same as GET method
                                                         for the related
                                                         endpoint
* ANY /{db}/_design/{ddoc}/_rewrite/{path}: 2a. Rewrites HTTP request for
                                                  the specified path by using
                                                  stored routing rules
* GET /{db}/_design/{ddoc}/_show/{func}: 2b. Executes a show function
                                               against null document
* POST /{db}/_design/{ddoc}/_show/{func}: 2c. Same as GET method for the
                                                related endpoint
* GET /{db}/_design/{ddoc}/_show/{func}/{docid}: 2d. Executes a show
                                                         function against the
                                                         specified document
* POST /{db}/_design/{ddoc}/_show/{func}/{docid}: 2e. Same as GET method
                                                          for the related
                                                          endpoint
* POST /{db}/_design/{ddoc}/_update/{func}: 2f. Executes an update function
                                                  against the null document
* PUT /{db}/_design/{ddoc}/_update/{func}/{docid}: 30. Executes an update
                                                           function against
                                                           the specified
                                                           document
* GET /{db}/_design/{ddoc}/_view/{view}: 31. Returns results for the
                                               specified stored view
* POST /{db}/_design/{ddoc}/_view/{view}: 32. Returns certain rows for the
                                                specified stored view
* HEAD /{db}/_design/{ddoc}/{attname}: 33. Returns bare information in the
                                             HTTP Headers for the attachment
* GET /{db}/_design/{ddoc}/{attname}: 34. Gets the attachment of a design
                                            document
* PUT /{db}/_design/{ddoc}/{attname}: 35. Adds an attachment of a design
                                            document
* DELETE /{db}/_design/{ddoc}/{attname}: 36. Deletes an attachment of a
                                               design document
* POST /{db}/_ensure_full_commit: 37. Makes sure all uncommitted changes are
                                    written and synchronized to the disk
* GET /{db}/_local/{docid}: 38. Returns the latest revision of the local
                                document
* PUT /{db}/_local/{docid}: 39. Inserts a new version of the local document
* DELETE /{db}/_local/{docid}: 3a. Deletes the local document
* COPY /{db}/_local/{docid}: 3b. Copies the local document within the same
                                 database
* POST /{db}/_missing_revs: 3c. By given list of document revisions returns the
                              document revisions that do not exist in the
                              database
* POST /{db}/_purge: 3d. Purges some historical documents entirely from
                        database history
* POST /{db}/_revs_diff: 3e. By given list of document revisions returns
                           differences between the given revisions and ones
                           that are in the database
* GET /{db}/_revs_limit: 3f. Returns the limit of historical revisions to store
                           for a single document in the database
* PUT /{db}/_revs_limit: 40. Sets the limit of historical revisions to store for
                           a single document in the database
* GET /{db}/_security: 41. Returns the special security object for the database
* PUT /{db}/_security: 42. Sets the special security object for the database
* POST /{db}/_temp_view: 43. Executes a given view function for all documents
                           and returns the result
* POST /{db}/_view_cleanup: 44. Removes view files that are not used by any
                              design document
* HEAD /{db}/{docid}: 45. Returns bare information in the HTTP Headers for the
                          document
* GET /{db}/{docid}: 46. Returns the document
* PUT /{db}/{docid}: 47. Creates a new document or new version of an existing
                         document
* DELETE /{db}/{docid}: 48. Deletes the document
* COPY /{db}/{docid}: 49. Copies the document within the same database
* HEAD /{db}/{docid}/{attname}: 4a. Returns bare information in the HTTP
                                      Headers for the attachment
* GET /{db}/{docid}/{attname}: 4b. Gets the attachment of a document
* PUT /{db}/{docid}/{attname}: 4c. Adds an attachment of a document
* DELETE /{db}/{docid}/{attname}: 4d. Deletes an attachment of a document


File: CouchDB.info,  Node: Configuration Reference,  Next: Index,  Prev: HTTP API Reference,  Up: Top

Configuration Reference
***********************

* Menu:

* admins: 4e. Server Administrators
* attachments: 4f. Configuration of Attachment Storage
* compressible_types: 50.
* compression_level: 51.
* compaction_daemon: 52. Configuration of Compaction Daemon
* check_interval: 53.
* min_file_size: 54.
* compactions: 55. Compaction Daemon Rules
* cors: 56. Cross-Origin Resource Sharing
* credentials: 57.
* headers: 58.
* methods: 59.
* origins: 5a.
* couch_httpd_auth: 5b. Authentication Configuration
* allow_persistent_cookies: 5c. Persistent cookies
* auth_cache_size: 5d. Authentication cache
* authentication_db: 5e. Users database
* authentication_redirect: 5f. Default redirect for authentication requests
* iterations: 60. PBKDF2 iterations count
* max_iterations: 61. Maximum PBKDF2 iterations count
* min_iterations: 62. Minimum PBKDF2 iterations count
* proxy_use_secret: 63. Force proxy auth use secret token
* public_fields: 64. User documents public fields
* require_valid_user: 65. Force user authentication
* secret: 66. Proxy Auth secret token
* timeout: 67. Session timeout
* users_db_public: 68. Publish user documents
* x_auth_roles: 69. Proxy Auth roles header
* x_auth_token: 6a. Proxy Auth token header
* x_auth_username: 6b. Proxy Auth username header
* couch_httpd_oauth: 6c. HTTP OAuth Configuration
* use_users_db: 6d.
* couchdb: 6e. Base CouchDB Options
* attachment_stream_buffer_size: 6f. Attachment streaming buffer
* database_dir: 70. Databases location directory
* delayed_commits: 71. Delayed commits
* file_compression: 72. Compression method for documents
* fsync_options: 73. Fsync options
* max_dbs_open: 74. Limit of simultaneously opened databases
* max_document_size: 75. Maximum document size
* os_process_timeout: 76. External processes time limit
* uri_file: 77. Discovery CouchDB help file
* util_driver_dir: 78. CouchDB binary utility drivers
* uuid: 79. CouchDB server UUID
* view_index_dir: 7a. View indexes location directory
* daemons: 7b. CouchDB Daemonized Mini Apps
* auth_cache: 7c.
* compaction_daemon: 7d.
* external_manager: 7e.
* httpd: 7f.
* httpsd: 80.
* index_server: 81.
* os_daemons: 82.
* query_servers: 83.
* replicator_manager: 84.
* stats_aggregator: 85.
* stats_collector: 86.
* uuids: 87.
* vhosts: 88.
* database_compaction: 89. Database Compaction Options
* checkpoint_after: 8a. Checkpoint trigger
* doc_buffer_size: 8b. Documents buffer size
* httpd: 8c. HTTP Server Options
* WWW-Authenticate: 8d. Force basic auth
* allow_jsonp: 8e. Enables JSONP support
* authentication_handlers: 8f. Authentication handlers
* bind_address: 90. Listen IP address
* changes_timeout: 91. Changes feed timeout
* config_whitelist: 92. Config options while list
* default_handler: 93. Default request handler
* enable_cors: 94. Activates CORS
* log_max_chunk_size: 95. Logs chunk size
* port: 96. Listen port
* redirect_vhost_handler: 97. Virtual Hosts custom redirect handler
* secure_rewrites: 98. Default request handler
* server_options: 99. MochiWeb Server Options
* socket_options: 9a. Socket Options
* vhost_global_handlers: 9b. Virtual hosts global handlers
* x_forwarded_host: 9c. X-Forwarder-Host
* x_forwarded_proto: 9d. X-Forwarder-Proto
* x_forwarded_ssl: 9e. X-Forwarder-Ssl
* httpd_db_handlers: 9f. Database HTTP Handlers
* _all_docs: a0.
* _changes: a1.
* _compact: a2.
* _design: a3.
* _temp_view: a4.
* _view_cleanup: a5.
* httpd_design_handlers: a6. Design Documents HTTP Handlers
* _compact: a7.
* _info: a8.
* _list: a9.
* _rewrite: aa.
* _show: ab.
* _update: ac.
* _view: ad.
* httpd_global_handlers: ae. Global HTTP Handlers
* /: af.
* _active_tasks: b0.
* _all_dbs: b1.
* _config: b2.
* _log: b3.
* _oauth: b4.
* _replicate: b5.
* _restart: b6.
* _session: b7.
* _stats: b8.
* _utils: b9.
* _uuids: ba.
* favicon.ico: bb.
* log: bc. Logging options
* file: bd. Logging file path
* include_sasl: be.
* level: bf. Logging verbose level
* log_level_by_module: c0. Per module logging
* native_query_servers: c1. Native Erlang Query Server
* oauth_*: c2. OAuth Configuration
* os_daemon_settings: c3. OS Daemons settings
* max_retries: c4. Maximum restart retries
* retry_time: c5. Delay between restart attempts
* os_daemons: c6. OS Daemons
* query_server_config: c7. Query Servers Configuration
* commit_freq: c8. View index commit delay
* os_process_limit: c9. Query Server operation timeout
* reduce_limit: ca. Reduce limit control
* query_servers: cb. Query Servers Definition
* replicator: cc. Replicator Database Configuration
* cert_file: cd.
* checkpoint_interval: ce.
* connection_timeout: cf.
* db: d0.
* http_connections: d1.
* key_file: d2.
* max_replication_retry_count: d3.
* password: d4.
* retries_per_request: d5.
* socket_options: d6.
* ssl_certificate_max_depth: d7.
* ssl_trusted_certificates_file: d8.
* use_checkpoints: d9.
* verify_ssl_certificates: da.
* worker_batch_size: db.
* worker_processes: dc.
* ssl: dd. Secure Socket Level Options
* cacert_file: de. CA Certificate file
* cert_file: df. Certificate file
* key_file: e0. Certificate key file
* password: e1. Certificate key password
* ssl_certificate_max_depth: e2. Maximum peer certificate depth
* verify_fun: e3. SSL verification function
* verify_ssl_certificates: e4. Enable certificate verification
* stats: e5. Statistic Calculation
* rate: e6.
* samples: e7.
* update_notification: e8. Update notifications
* uuids: e9. UUIDs Configuration
* algorithm: ea. Generation Algorithm
* max_count: eb. Per-Request UUID Limit
* utc_id_suffix: ec. UTC ID Suffix
* vendor: ed. Vendor information
* vhosts: ee. Virtual Hosts
* view_compaction: ef. Views Compaction Options
* keyvalue_buffer_size: f0. Key-Values buffer size


File: CouchDB.info,  Node: Index,  Prev: Configuration Reference,  Up: Top

Index
*****

 [index ]
* Menu:

* Emit() (built-in function):            Erlang<2>.           (line   9)
* emit() (built-in function):            Design functions context.
                                                              (line   9)
* filterfun() (built-in function):       Filter functions.    (line   6)
* FoldRows() (built-in function):        Erlang<2>.           (line  20)
* GetRow() (built-in function):          Erlang<2>.           (line  42)
* getRow() (built-in function):          Design functions context.
                                                              (line  25)
* isArray() (built-in function):         Design functions context.
                                                              (line  50)
* JSON (global variable or constant):    Design functions context.
                                                              (line  47)
* listfun() (built-in function):         List functions.      (line   6)
* Log() (built-in function):             Erlang<2>.           (line  63)
* log() (built-in function):             Design functions context.
                                                              (line  61)
* mapfun() (built-in function):          Map functions.       (line   6)
* provides() (built-in function):        Design functions context.
                                                              (line  80)
* redfun() (built-in function):          Reduce and rereduce functions.
                                                              (line   6)
* registerType() (built-in function):    Design functions context.
                                                              (line  90)
* require() (built-in function):         Design functions context.
                                                              (line 132)
* RFC; RFC 1738:                         Definitions.         (line  24)
* RFC; RFC 2109:                         Cookie Authentication<2>.
                                                              (line   6)
* RFC; RFC 2119:                         Language.            (line   8)
* RFC; RFC 2396:                         Definitions.         (line  23)
* RFC; RFC 2616 <1>:                     show list update and validation functions.
                                                              (line   9)
* RFC; RFC 2616:                         Databases.           (line 134)
* RFC; RFC 2616#section-14.27:           HTTP Range Requests. (line  43)
* RFC; RFC 2617:                         Basic Authentication<2>.
                                                              (line   6)
* RFC; RFC 2618:                         Cross-Origin Resource Sharing.
                                                              (line  98)
* RFC; RFC 2817:                         Cross-Origin Resource Sharing.
                                                              (line  98)
* RFC; RFC 2822:                         /_replicate.         (line 103)
* RFC; RFC 4122:                         Definitions.         (line   7)
* RFC; RFC 5789:                         Cross-Origin Resource Sharing.
                                                              (line  98)
* RFC; RFC 5849 <1>:                     OAuth Authentication.
                                                              (line   6)
* RFC; RFC 5849:                         OAuth Configuration. (line   7)
* RFC; RFC 6454:                         Cross-Origin Resource Sharing.
                                                              (line 101)
* Send() (built-in function):            Erlang<2>.           (line  82)
* send() (built-in function):            Design functions context.
                                                              (line 143)
* showfun() (built-in function):         Show functions.      (line   6)
* Start() (built-in function):           Erlang<2>.           (line  98)
* start() (built-in function):           Design functions context.
                                                              (line 159)
* sum() (built-in function):             Design functions context.
                                                              (line 181)
* toJSON() (built-in function):          Design functions context.
                                                              (line 190)
* updatefun() (built-in function):       Update functions.    (line   6)
* validatefun() (built-in function):     Validate document update functions.
                                                              (line   6)



Tag Table:
Node: Top324
Ref: contents doc520
Ref: f1520
Node: Introduction24368
Ref: intro/index introduction24454
Ref: f224454
Ref: intro/index intro24454
Ref: f324454
Ref: intro/index doc24454
Ref: f424454
Ref: Introduction-Footnote-127928
Node: Technical Overview27976
Ref: intro/overview intro-overview28065
Ref: 10028065
Ref: intro/overview technical-overview28065
Ref: 10128065
Ref: intro/overview doc28065
Ref: 10228065
Node: Document Storage28275
Ref: intro/overview document-storage28371
Ref: 10328371
Ref: Document Storage-Footnote-129652
Node: ACID Properties29693
Ref: intro/overview acid-properties29808
Ref: 10529808
Ref: intro/overview restful29808
Ref: 10629808
Ref: ACID Properties-Footnote-132430
Ref: ACID Properties-Footnote-232471
Ref: ACID Properties-Footnote-332540
Node: Compaction32583
Ref: intro/overview b-trees32687
Ref: 10732687
Ref: intro/overview compaction32687
Ref: 10832687
Node: Views33188
Ref: intro/overview views33300
Ref: 10933300
Node: View Model34283
Ref: intro/overview view-model34370
Ref: 10a34370
Node: Javascript View Functions35263
Ref: intro/overview javascript-view-functions35371
Ref: 10b35371
Ref: Javascript View Functions-Footnote-135909
Node: View Indexes35955
Ref: intro/overview view-indexes36044
Ref: 10d36044
Node: Security and Validation38467
Ref: intro/overview security-and-validation38604
Ref: 10e38604
Node: Administrator Access38936
Ref: intro/overview administrator-access39043
Ref: 11039043
Node: Update Validation39384
Ref: intro/overview update-validation39491
Ref: 11139491
Node: Distributed Updates and Replication40591
Ref: intro/overview distributed-updates-and-replication40737
Ref: 11340737
Node: Conflicts42271
Ref: intro/overview conflicts42374
Ref: 11442374
Node: Applications44038
Ref: intro/overview applications44141
Ref: 11544141
Node: Implementation45392
Ref: intro/overview implementation45506
Ref: 11645506
Ref: Implementation-Footnote-147594
Node: Why CouchDB?47624
Ref: intro/why doc47742
Ref: 11747742
Ref: intro/why intro-why47742
Ref: 11847742
Ref: intro/why erlang-otp-platform47742
Ref: 11947742
Ref: intro/why why-couchdb47742
Ref: 11a47742
Node: Relax48549
Ref: intro/why relax48647
Ref: 11b48647
Node: A Different Way to Model Your Data51473
Ref: intro/why a-different-way-to-model-your-data51616
Ref: 11c51616
Node: A Better Fit for Common Applications52641
Ref: intro/why a-better-fit-for-common-applications52813
Ref: 11d52813
Node: Self-Contained Data53336
Ref: intro/why self-contained-data53458
Ref: 11e53458
Ref: intro/why intro-why-0153987
Ref: 11f53987
Node: Syntax and Semantics55140
Ref: intro/why syntax-and-semantics55262
Ref: 12055262
Node: Building Blocks for Larger Systems56700
Ref: intro/why building-blocks-for-larger-systems56857
Ref: 12156857
Ref: intro/why intro-why-figure-0258008
Ref: 12258008
Ref: intro/why intro-why-figure-0358140
Ref: 12358140
Node: CouchDB Replication59004
Ref: intro/why couchdb-replication59143
Ref: 12459143
Ref: CouchDB Replication-Footnote-161125
Node: Local Data Is King61196
Ref: intro/why fallacies-of-distributed-computing61312
Ref: 12561312
Ref: intro/why local-data-is-king61312
Ref: 12661312
Node: Wrapping Up62779
Ref: intro/why wrapping-up62867
Ref: 12762867
Node: Eventual Consistency63079
Ref: intro/consistency intro-consistency63194
Ref: ff63194
Ref: intro/consistency doc63194
Ref: 12863194
Ref: intro/consistency eventual-consistency63194
Ref: 12963194
Node: Working with the Grain63761
Ref: intro/consistency working-with-the-grain63865
Ref: 12a63865
Ref: Working with the Grain-Footnote-165714
Ref: Working with the Grain-Footnote-265788
Node: The CAP Theorem65853
Ref: intro/consistency cap65983
Ref: 12b65983
Ref: intro/consistency the-cap-theorem65983
Ref: 12c65983
Ref: intro/consistency intro-consistency-0166810
Ref: 12d66810
Node: Local Consistency69270
Ref: intro/consistency local-consistency69388
Ref: 12e69388
Node: The Key to Your Data69857
Ref: intro/consistency the-key-to-your-data69951
Ref: 12f69951
Ref: intro/consistency intro-consistency-0270385
Ref: 13070385
Ref: The Key to Your Data-Footnote-171850
Ref: The Key to Your Data-Footnote-271895
Ref: The Key to Your Data-Footnote-371927
Ref: The Key to Your Data-Footnote-471966
Node: No Locking71994
Ref: intro/consistency memcached72088
Ref: 13172088
Ref: intro/consistency no-locking72088
Ref: 13272088
Ref: intro/consistency intro-consistency-0373603
Ref: 13373603
Ref: No Locking-Footnote-174817
Node: Validation74854
Ref: intro/consistency subversion74980
Ref: 13474980
Ref: intro/consistency validation74980
Ref: 13574980
Node: Distributed Consistency76061
Ref: intro/consistency distributed-consistency76193
Ref: 13676193
Node: Incremental Replication76814
Ref: intro/consistency incremental-replication76946
Ref: 13776946
Ref: intro/consistency intro-consistency-0478295
Ref: 13878295
Node: Case Study79538
Ref: intro/consistency case-study79661
Ref: 13979661
Ref: intro/consistency intro-consistency-0580906
Ref: 13a80906
Ref: intro/consistency intro-consistency-0682939
Ref: 13b82939
Ref: intro/consistency intro-consistency-0784080
Ref: 13c84080
Ref: Case Study-Footnote-184279
Node: Wrapping Up<2>84339
Ref: intro/consistency wrapping-up84430
Ref: 13d84430
Node: Getting Started85130
Ref: intro/tour getting-started85245
Ref: 13e85245
Ref: intro/tour intro-tour85245
Ref: 13f85245
Ref: intro/tour doc85245
Ref: 14085245
Node: All Systems Are Go!85681
Ref: intro/tour all-systems-are-go85778
Ref: 14185778
Node: Welcome to Futon89954
Ref: intro/tour welcome-to-futon90092
Ref: 14290092
Ref: intro/tour intro-tour-0191562
Ref: 14391562
Ref: intro/tour intro-tour-0292117
Ref: 14492117
Node: Your First Database and Document92886
Ref: intro/tour your-first-database-and-document93036
Ref: 14593036
Ref: intro/tour intro-tour-0394728
Ref: 14694728
Ref: intro/tour intro-tour-0494843
Ref: 14794843
Ref: intro/tour intro-tour-0595649
Ref: 14895649
Node: Running a Query Using MapReduce95818
Ref: intro/tour running-a-query-using-mapreduce95974
Ref: 14995974
Ref: intro/tour intro-tour-0698273
Ref: 14a98273
Ref: intro/tour intro-tour-08100449
Ref: 14b100449
Ref: intro/tour intro-tour-09101590
Ref: 14c101590
Node: Triggering Replication102622
Ref: intro/tour triggering-replication102760
Ref: 14d102760
Ref: intro/tour intro-tour-10103536
Ref: 14e103536
Node: Wrapping Up<3>104184
Ref: intro/tour wrapping-up104282
Ref: 14f104282
Node: The Core API104801
Ref: intro/api intro-api104904
Ref: 150104904
Ref: intro/api the-core-api104904
Ref: 151104904
Ref: intro/api doc104904
Ref: 152104904
Node: Server106038
Ref: intro/api server106112
Ref: 153106112
Ref: Server-Footnote-1107054
Node: Databases107082
Ref: intro/api curl107174
Ref: 154107174
Ref: intro/api databases107174
Ref: 155107174
Ref: Databases-Footnote-1116384
Ref: Databases-Footnote-2116452
Ref: Databases-Footnote-3116520
Ref: Databases-Footnote-4116588
Ref: Databases-Footnote-5116659
Ref: Databases-Footnote-6116730
Ref: Databases-Footnote-7116800
Ref: Databases-Footnote-8116847
Ref: Databases-Footnote-9116919
Ref: Databases-Footnote-10116991
Ref: Databases-Footnote-11117063
Ref: Databases-Footnote-12117135
Ref: Databases-Footnote-13117207
Ref: Databases-Footnote-14117279
Ref: Databases-Footnote-15117351
Ref: Databases-Footnote-16117380
Ref: Databases-Footnote-17117451
Ref: Databases-Footnote-18117523
Ref: Databases-Footnote-19117595
Node: Documents117666
Ref: intro/api documents117763
Ref: 156117763
Ref: Documents-Footnote-1121291
Ref: Documents-Footnote-2121357
Ref: Documents-Footnote-3121420
Ref: Documents-Footnote-4121488
Node: Revisions121556
Ref: intro/api revisions121640
Ref: 157121640
Ref: Revisions-Footnote-1125809
Node: Documents in Detail125878
Ref: intro/api documents-in-detail125982
Ref: 158125982
Ref: Documents in Detail-Footnote-1128015
Ref: Documents in Detail-Footnote-2128087
Ref: Documents in Detail-Footnote-3128157
Ref: Documents in Detail-Footnote-4128228
Node: Attachments128299
Ref: intro/api attachments128385
Ref: 159128385
Ref: Attachments-Footnote-1131154
Ref: Attachments-Footnote-2131225
Node: Replication131268
Ref: intro/api replication131370
Ref: 15a131370
Ref: Replication-Footnote-1137342
Ref: Replication-Footnote-2137384
Ref: Replication-Footnote-3137452
Ref: Replication-Footnote-4137520
Node: Wrapping Up<4>137568
Ref: intro/api wrapping-up137652
Ref: 15c137652
Node: Security138112
Ref: intro/security security138234
Ref: 161138234
Ref: intro/security doc138234
Ref: 162138234
Ref: intro/security intro-security138234
Ref: 163138234
Node: Authentication138875
Ref: intro/security authentication138967
Ref: 164138967
Node: The Admin Party139159
Ref: intro/security intro-security-admin-party139255
Ref: 165139255
Ref: intro/security the-admin-party139255
Ref: 166139255
Node: Creating New Admin User141809
Ref: intro/security creating-new-admin-user141911
Ref: 167141911
Node: Hashing Passwords142688
Ref: intro/security hashing-passwords142790
Ref: 169142790
Ref: Hashing Passwords-Footnote-1145103
Ref: Hashing Passwords-Footnote-2145154
Node: Basic Authentication145197
Ref: intro/security intro-security-basicauth145323
Ref: 16b145323
Ref: intro/security basic-authentication145323
Ref: 16c145323
Node: Cookie Authentication146751
Ref: intro/security cookie-authentication146853
Ref: 170146853
Ref: intro/security intro-security-cookie146853
Ref: 171146853
Ref: Cookie Authentication-Footnote-1149598
Ref: Cookie Authentication-Footnote-2149670
Node: Authentication Database149726
Ref: intro/security authentication-database149818
Ref: 175149818
Ref: Authentication Database-Footnote-1151961
Ref: Authentication Database-Footnote-2152029
Ref: Authentication Database-Footnote-3152097
Node: Users Documents152165
Ref: intro/security users-documents152267
Ref: 178152267
Ref: Users Documents-Footnote-1153767
Node: Why org couchdb user prefix?153810
Ref: intro/security org-couchdb-user153891
Ref: 179153891
Ref: intro/security why-org-couchdb-user-prefix153891
Ref: 17a153891
Node: Creating New User154375
Ref: intro/security creating-new-user154503
Ref: 17b154503
Ref: Creating New User-Footnote-1156177
Node: Password Changing156245
Ref: intro/security password-changing156382
Ref: 17c156382
Node: Users Public Information159116
Ref: intro/security users-public-information159227
Ref: 17d159227
Ref: Users Public Information-Footnote-1161020
Node: Futon Web GUI Administration Panel161092
Ref: intro/futon intro-futon161231
Ref: fe161231
Ref: intro/futon futon-web-gui-administration-panel161231
Ref: 17f161231
Ref: intro/futon doc161231
Ref: 180161231
Node: Managing Databases and Documents163642
Ref: intro/futon managing-databases-and-documents163778
Ref: 184163778
Ref: intro/futon futon-management163778
Ref: 181163778
Node: Configuring Replication165900
Ref: intro/futon futon-replication166036
Ref: 182166036
Ref: intro/futon configuring-replication166036
Ref: 185166036
Node: cURL Your Command Line Friend167644
Ref: intro/curl curl-your-command-line-friend167766
Ref: 187167766
Ref: intro/curl intro-curl167766
Ref: 188167766
Ref: intro/curl doc167766
Ref: 189167766
Node: Installation171093
Ref: install/index installation171195
Ref: 18a171195
Ref: install/index doc171195
Ref: 18b171195
Ref: install/index install171195
Ref: 18c171195
Node: Installation on Unix-like systems172338
Ref: install/unix install-unix172453
Ref: 18d172453
Ref: install/unix doc172453
Ref: 18e172453
Ref: install/unix installation-on-unix-like-systems172453
Ref: 18f172453
Ref: Installation on Unix-like systems-Footnote-1173204
Node: Troubleshooting173255
Ref: install/unix community-installation-guides173362
Ref: 190173362
Ref: install/unix troubleshooting173362
Ref: 191173362
Ref: Troubleshooting-Footnote-1173664
Ref: Troubleshooting-Footnote-2173718
Ref: Troubleshooting-Footnote-3173756
Node: Dependencies173810
Ref: install/unix dependencies173936
Ref: 192173936
Ref: install/unix install-unix-dependencies173936
Ref: 193173936
Ref: Dependencies-Footnote-1174753
Ref: Dependencies-Footnote-2174779
Ref: Dependencies-Footnote-3174810
Ref: Dependencies-Footnote-4174841
Ref: Dependencies-Footnote-5174888
Ref: Dependencies-Footnote-6174929
Ref: Dependencies-Footnote-7174956
Ref: Dependencies-Footnote-8174992
Ref: Dependencies-Footnote-9175030
Ref: Dependencies-Footnote-10175056
Node: Debian-based Systems175099
Ref: install/unix debian-based-systems175217
Ref: 194175217
Ref: Debian-based Systems-Footnote-1176194
Ref: Debian-based Systems-Footnote-2176253
Node: RedHat-based Fedora Centos RHEL Systems176312
Ref: install/unix redhat-based-fedora-centos-rhel-systems176447
Ref: 195176447
Node: Mac OS X177203
Ref: install/unix mac-os-x177309
Ref: 196177309
Node: Installing177435
Ref: install/unix installing177555
Ref: 198177555
Node: First Run178286
Ref: install/unix first-run178417
Ref: 199178417
Node: Security Considerations178988
Ref: install/unix security-considerations179128
Ref: 19a179128
Ref: Security Considerations-Footnote-1180377
Node: Running as a Daemon180449
Ref: install/unix running-as-a-daemon180571
Ref: 19b180571
Ref: install/unix workgroup-manager180571
Ref: 19c180571
Node: SysV/BSD-style Systems180661
Ref: install/unix sysv-bsd-style-systems180740
Ref: 19d180740
Node: Installation on Windows181960
Ref: install/windows installation-on-windows182108
Ref: 19e182108
Ref: install/windows install-windows182108
Ref: 19f182108
Ref: install/windows doc182108
Ref: 1a0182108
Node: Installation from binaries182287
Ref: install/windows installation-from-binaries182408
Ref: 1a1182408
Ref: Installation from binaries-Footnote-1183911
Ref: Installation from binaries-Footnote-2183947
Ref: Installation from binaries-Footnote-3183974
Ref: Installation from binaries-Footnote-4184032
Node: Installation from sources184068
Ref: install/windows the-latest-windows-binaries184189
Ref: 1a2184189
Ref: install/windows installation-from-sources184189
Ref: 1a3184189
Node: Troubleshooting<2>184494
Ref: install/windows troubleshooting184599
Ref: 1a4184599
Ref: Troubleshooting<2>-Footnote-1184946
Ref: Troubleshooting<2>-Footnote-2185000
Ref: Troubleshooting<2>-Footnote-3185038
Ref: Troubleshooting<2>-Footnote-4185094
Node: Dependencies<2>185148
Ref: install/windows dependencies185275
Ref: 1a5185275
Ref: install/windows windows-specific-tips185275
Ref: 1a6185275
Ref: Dependencies<2>-Footnote-1185906
Ref: Dependencies<2>-Footnote-2185932
Ref: Dependencies<2>-Footnote-3185963
Ref: Dependencies<2>-Footnote-4185994
Ref: Dependencies<2>-Footnote-5186041
Ref: Dependencies<2>-Footnote-6186071
Ref: Dependencies<2>-Footnote-7186139
Ref: Dependencies<2>-Footnote-8186175
Ref: Dependencies<2>-Footnote-9186213
Ref: Dependencies<2>-Footnote-10186239
Node: General Notes186282
Ref: install/windows general-notes186408
Ref: 1a7186408
Node: Setting Up Cygwin187229
Ref: install/windows setting-up-cygwin187355
Ref: 1a8187355
Node: Building Erlang188070
Ref: install/windows building-erlang188199
Ref: 1a9188199
Node: Building CouchDB189351
Ref: install/windows building-couchdb189475
Ref: 1aa189475
Node: First Run<2>190897
Ref: install/windows first-run190997
Ref: 1ab190997
Ref: First Run<2>-Footnote-1191545
Node: Installation on Mac OS X191583
Ref: install/mac install-mac191721
Ref: 1ac191721
Ref: install/mac doc191721
Ref: 1ad191721
Ref: install/mac installation-on-mac-os-x191721
Ref: 1ae191721
Node: Installation using the Apache CouchDB native application191913
Ref: install/mac installation-using-the-apache-couchdb-native-application192066
Ref: 1af192066
Ref: install/mac install-mac-binary192066
Ref: 1b0192066
Ref: Installation using the Apache CouchDB native application-Footnote-1192713
Ref: Installation using the Apache CouchDB native application-Footnote-2192749
Ref: Installation using the Apache CouchDB native application-Footnote-3192807
Node: Installation with HomeBrew192843
Ref: install/mac installation-with-homebrew193031
Ref: 1b1193031
Ref: install/mac install-mac-homebrew193031
Ref: 197193031
Ref: Installation with HomeBrew-Footnote-1195679
Node: Running as a Daemon<2>195719
Ref: install/mac homebrew195805
Ref: 1b2195805
Ref: install/mac running-as-a-daemon195805
Ref: 1b3195805
Node: Installation from MacPorts196639
Ref: install/mac install-mac-macports196762
Ref: 1b4196762
Ref: install/mac installation-from-macports196762
Ref: 1b5196762
Node: Installation on FreeBSD197987
Ref: install/freebsd install-freebsd198093
Ref: 1b6198093
Ref: install/freebsd installation-on-freebsd198093
Ref: 1b7198093
Ref: install/freebsd doc198093
Ref: 1b8198093
Node: Installation from ports198248
Ref: install/freebsd installation-from-ports198332
Ref: 1b9198332
Node: Start script198551
Ref: install/freebsd start-script198645
Ref: 1ba198645
Node: Post install199339
Ref: install/freebsd post-install199433
Ref: 1bb199433
Ref: Post install-Footnote-1200390
Node: Configuring CouchDB200431
Ref: config/index config200535
Ref: 17e200535
Ref: config/index doc200535
Ref: 1bc200535
Ref: config/index man-5-passwd200535
Ref: 1bd200535
Ref: config/index configuring-couchdb200535
Ref: 1be200535
Node: Introduction Into Configuring202342
Ref: config/intro introduction-into-configuring202455
Ref: 1bf202455
Ref: config/intro config-intro202455
Ref: 1c0202455
Ref: config/intro doc202455
Ref: 1c1202455
Node: Configuration files202679
Ref: config/intro configuration-files202800
Ref: 1c2202800
Node: Parameter names and values205225
Ref: config/intro parameter-names-and-values205400
Ref: 1c3205400
Ref: Parameter names and values-Footnote-1205821
Ref: Parameter names and values-Footnote-2205895
Node: Setting parameters via the configuration file205947
Ref: config/intro setting-parameters-via-the-configuration-file206138
Ref: 1c4206138
Ref: config/intro tuple206138
Ref: 1c5206138
Node: Setting parameters via the HTTP API207842
Ref: config/intro setting-parameters-via-the-http-api207998
Ref: 1c6207998
Node: Base Configuration209325
Ref: config/couchdb base-configuration209466
Ref: 1c7209466
Ref: config/couchdb doc209466
Ref: 1c8209466
Node: Base CouchDB Options209548
Ref: config/couchdb base-couchdb-options209624
Ref: 1c9209624
Ref: config/couchdb config-couchdb209624
Ref: 1ca209624
Ref: config/couchdb couchdb209679
Ref: 6e209679
Ref: config/couchdb couchdb/attachment_stream_buffer_size209709
Ref: 6f209709
Ref: config/couchdb couchdb/database_dir210129
Ref: 70210129
Ref: config/couchdb couchdb/delayed_commits210446
Ref: 71210446
Ref: config/couchdb couchdb/file_compression211387
Ref: 72211387
Ref: config/couchdb couchdb/fsync_options212137
Ref: 73212137
Ref: config/couchdb couchdb/max_dbs_open212522
Ref: 74212522
Ref: config/couchdb couchdb/max_document_size213010
Ref: 75213010
Ref: config/couchdb couchdb/os_process_timeout213605
Ref: 76213605
Ref: config/couchdb couchdb/uri_file214048
Ref: 77214048
Ref: config/couchdb couchdb/util_driver_dir214546
Ref: 78214546
Ref: config/couchdb couchdb/uuid214880
Ref: 79214880
Ref: config/couchdb couchdb/view_index_dir215084
Ref: 7a215084
Ref: Base CouchDB Options-Footnote-1215423
Ref: Base CouchDB Options-Footnote-2215495
Ref: Base CouchDB Options-Footnote-3215535
Node: CouchDB HTTP Server215575
Ref: config/http couchdb-http-server215719
Ref: 1cb215719
Ref: config/http doc215719
Ref: 1cc215719
Node: HTTP Server Options215886
Ref: config/http config-httpd215998
Ref: 1cd215998
Ref: config/http http-server-options215998
Ref: 1ce215998
Ref: config/http httpd216051
Ref: 8c216051
Ref: config/http httpd/allow_jsonp216079
Ref: 8e216079
Ref: config/http httpd/authentication_handlers216279
Ref: 8f216279
Ref: config/http httpd/bind_address217296
Ref: 90217296
Ref: config/http httpd/changes_timeout217883
Ref: 91217883
Ref: config/http httpd/config_whitelist218115
Ref: 92218115
Ref: config/http httpd/default_handler218633
Ref: 93218633
Ref: config/http httpd/enable_cors218815
Ref: 94218815
Ref: config/http httpd/log_max_chunk_size218987
Ref: 95218987
Ref: config/http httpd/port219186
Ref: 96219186
Ref: config/http httpd/redirect_vhost_handler219501
Ref: 97219501
Ref: config/http httpd/server_options219851
Ref: 99219851
Ref: config/http httpd/secure_rewrites220107
Ref: 98220107
Ref: config/http httpd/socket_options220275
Ref: 9a220275
Ref: config/http httpd/vhost_global_handlers220744
Ref: 9b220744
Ref: config/http httpd/x_forwarded_host220988
Ref: 9c220988
Ref: config/http httpd/x_forwarded_proto221529
Ref: 9d221529
Ref: config/http httpd/x_forwarded_ssl221950
Ref: 9e221950
Ref: config/http httpd/WWW-Authenticate222347
Ref: 8d222347
Ref: HTTP Server Options-Footnote-1222606
Ref: HTTP Server Options-Footnote-2222636
Ref: HTTP Server Options-Footnote-3222677
Node: Secure Socket Level Options222734
Ref: config/http secure-socket-level-options222884
Ref: 1d1222884
Ref: config/http config-ssl222884
Ref: 16e222884
Ref: config/http ssl222953
Ref: dd222953
Ref: config/http ssl/cacert_file226190
Ref: de226190
Ref: config/http ssl/cert_file226511
Ref: df226511
Ref: config/http ssl/key_file226685
Ref: e0226685
Ref: config/http ssl/password226863
Ref: e1226863
Ref: config/http ssl/ssl_certificate_max_depth227073
Ref: e2227073
Ref: config/http ssl/verify_fun227295
Ref: e3227295
Ref: config/http ssl/verify_ssl_certificates227514
Ref: e4227514
Ref: config/http cors227686
Ref: 56227686
Ref: Secure Socket Level Options-Footnote-1227720
Ref: Secure Socket Level Options-Footnote-2227751
Node: Cross-Origin Resource Sharing227809
Ref: config/http config-cors227953
Ref: 1cf227953
Ref: config/http cross-origin-resource-sharing227953
Ref: 1d2227953
Ref: config/http cors/credentials229682
Ref: 57229682
Ref: config/http cors/origins230226
Ref: 5a230226
Ref: config/http cors/headers230835
Ref: 58230835
Ref: config/http cors/methods230997
Ref: 59230997
Ref: Cross-Origin Resource Sharing-Footnote-1231818
Ref: Cross-Origin Resource Sharing-Footnote-2231875
Ref: Cross-Origin Resource Sharing-Footnote-3231932
Ref: Cross-Origin Resource Sharing-Footnote-4231979
Ref: Cross-Origin Resource Sharing-Footnote-5232026
Ref: Cross-Origin Resource Sharing-Footnote-6232073
Ref: Cross-Origin Resource Sharing-Footnote-7232120
Ref: Cross-Origin Resource Sharing-Footnote-8232153
Ref: Cross-Origin Resource Sharing-Footnote-9232235
Ref: Cross-Origin Resource Sharing-Footnote-10232295
Ref: Cross-Origin Resource Sharing-Footnote-11232363
Ref: Cross-Origin Resource Sharing-Footnote-12232446
Ref: Cross-Origin Resource Sharing-Footnote-13232478
Ref: Cross-Origin Resource Sharing-Footnote-14232531
Node: Per Virtual Host Configuration232609
Ref: config/http per-virtual-host-configuration232706
Ref: 1d3232706
Node: Virtual Hosts233192
Ref: config/http config-vhosts233300
Ref: 1d4233300
Ref: config/http virtual-hosts233300
Ref: 1d5233300
Ref: config/http vhosts233341
Ref: ee233341
Node: Rewriting Hosts to a Path235178
Ref: config/http rewriting-hosts-to-a-path235254
Ref: 1d7235254
Node: Authentication and Authorization235907
Ref: config/auth authentication-and-authorization236057
Ref: 1d8236057
Ref: config/auth doc236057
Ref: 1d9236057
Node: Server Administrators236254
Ref: config/auth server-administrators236382
Ref: 1da236382
Ref: config/auth config-admins236382
Ref: 1db236382
Ref: config/auth admins236439
Ref: 4e236439
Ref: Server Administrators-Footnote-1239439
Node: Authentication Configuration239481
Ref: config/auth config-couch-httpd-auth239642
Ref: 173239642
Ref: config/auth authentication-configuration239642
Ref: 1dc239642
Ref: config/auth couch_httpd_auth239713
Ref: 5b239713
Ref: config/auth couch_httpd_auth/allow_persistent_cookies239752
Ref: 5c239752
Ref: config/auth couch_httpd_auth/auth_cache_size239931
Ref: 5d239931
Ref: config/auth couch_httpd_auth/authentication_db240149
Ref: 5e240149
Ref: config/auth couch_httpd_auth/authentication_redirect240548
Ref: 5f240548
Ref: config/auth couch_httpd_auth/iterations240870
Ref: 60240870
Ref: config/auth couch_httpd_auth/min_iterations241250
Ref: 62241250
Ref: config/auth couch_httpd_auth/max_iterations241554
Ref: 61241554
Ref: config/auth couch_httpd_auth/proxy_use_secret241863
Ref: 63241863
Ref: config/auth couch_httpd_auth/public_fields242142
Ref: 64242142
Ref: config/auth couch_httpd_auth/require_valid_user242916
Ref: 65242916
Ref: config/auth couch_httpd_auth/secret243170
Ref: 66243170
Ref: config/auth couch_httpd_auth/timeout243382
Ref: 67243382
Ref: config/auth couch_httpd_auth/users_db_public243573
Ref: 68243573
Ref: config/auth couch_httpd_auth/x_auth_roles243893
Ref: 69243893
Ref: config/auth couch_httpd_auth/x_auth_token244210
Ref: 6a244210
Ref: config/auth couch_httpd_auth/x_auth_username244893
Ref: 6b244893
Node: HTTP OAuth Configuration245183
Ref: config/auth config-couch-httpd-oauth245342
Ref: 1df245342
Ref: config/auth http-oauth-configuration245342
Ref: 1e0245342
Ref: config/auth couch_httpd_oauth245405
Ref: 6c245405
Ref: config/auth couch_httpd_oauth/use_users_db245471
Ref: 6d245471
Node: OAuth Configuration246542
Ref: config/auth config-oauth246664
Ref: 1e1246664
Ref: config/auth oauth-configuration246664
Ref: 1e2246664
Ref: config/auth oauth_*246717
Ref: c2246717
Ref: OAuth Configuration-Footnote-1247252
Node: Compaction Configuration247299
Ref: config/compaction doc247437
Ref: 1e4247437
Ref: config/compaction compaction-configuration247437
Ref: 1e5247437
Node: Database Compaction Options247634
Ref: config/compaction database-compaction-options247755
Ref: 1e6247755
Ref: config/compaction conifg-database-compaction247755
Ref: 1e7247755
Ref: config/compaction database_compaction247824
Ref: 89247824
Ref: config/compaction database_compaction/doc_buffer_size247866
Ref: 8b247866
Ref: config/compaction database_compaction/checkpoint_after248046
Ref: 8a248046
Node: Compaction Daemon Rules248298
Ref: config/compaction compaction-daemon-rules248462
Ref: 1e8248462
Ref: config/compaction config-compactions248462
Ref: 1e9248462
Ref: config/compaction compactions248523
Ref: 55248523
Node: Configuration of Compaction Daemon252631
Ref: config/compaction config-compaction-daemon252792
Ref: 1eb252792
Ref: config/compaction configuration-of-compaction-daemon252792
Ref: 1ec252792
Ref: config/compaction compaction_daemon252875
Ref: 52252875
Ref: config/compaction compaction_daemon/check_interval252915
Ref: 53252915
Ref: config/compaction compaction_daemon/min_file_size253147
Ref: 54253147
Node: Views Compaction Options253484
Ref: config/compaction config-view-compaction253613
Ref: 1ed253613
Ref: config/compaction views-compaction-options253613
Ref: 1ee253613
Ref: config/compaction view_compaction253676
Ref: ef253676
Ref: config/compaction view_compaction/keyvalue_buffer_size253714
Ref: f0253714
Node: Logging253928
Ref: config/logging logging254044
Ref: 1ef254044
Ref: config/logging doc254044
Ref: 1f0254044
Node: Logging options254122
Ref: config/logging logging-options254209
Ref: 1f1254209
Ref: config/logging config-log254209
Ref: 1f2254209
Ref: config/logging log254254
Ref: bc254254
Ref: config/logging log/file254317
Ref: bd254317
Ref: config/logging log/level254599
Ref: bf254599
Ref: config/logging log/include_sasl255627
Ref: be255627
Ref: Logging options-Footnote-1255803
Node: Per module logging255847
Ref: config/logging per-module-logging255934
Ref: 1f3255934
Ref: config/logging config-log-level-by-module255934
Ref: 1f4255934
Ref: config/logging log_level_by_module255985
Ref: c0255985
Ref: Per module logging-Footnote-1256354
Node: Replicator256436
Ref: config/replicator doc256541
Ref: 1f5256541
Ref: config/replicator replicator256541
Ref: cc256541
Node: Replicator Database Configuration256620
Ref: config/replicator config-replicator256701
Ref: 1f6256701
Ref: config/replicator replicator-database-configuration256701
Ref: 1f7256701
Ref: config/replicator replicator/db256841
Ref: d0256841
Ref: config/replicator replicator/max_replication_retry_count256976
Ref: d3256976
Ref: config/replicator replicator/worker_batch_size257202
Ref: db257202
Ref: config/replicator replicator/worker_processes257471
Ref: dc257471
Ref: config/replicator replicator/http_connections257700
Ref: d1257700
Ref: config/replicator replicator/connection_timeout257870
Ref: cf257870
Ref: config/replicator replicator/retries_per_request258158
Ref: d5258158
Ref: config/replicator replicator/socket_options258356
Ref: d6258356
Ref: config/replicator replicator/checkpoint_interval258830
Ref: ce258830
Ref: config/replicator replicator/use_checkpoints259354
Ref: d9259354
Ref: config/replicator replicator/cert_file260084
Ref: cd260084
Ref: config/replicator replicator/key_file260265
Ref: d2260265
Ref: config/replicator replicator/password260449
Ref: d4260449
Ref: config/replicator replicator/verify_ssl_certificates260666
Ref: da260666
Ref: config/replicator replicator/ssl_trusted_certificates_file260844
Ref: d8260844
Ref: config/replicator replicator/ssl_certificate_max_depth261103
Ref: d7261103
Ref: Replicator Database Configuration-Footnote-1261365
Node: Query Servers261422
Ref: config/query-servers doc261538
Ref: 1fa261538
Ref: config/query-servers query-servers261538
Ref: 1fb261538
Node: Query Servers Definition261677
Ref: config/query-servers config-query-servers261788
Ref: 1fc261788
Ref: config/query-servers query-servers-definition261788
Ref: 1fd261788
Ref: config/query-servers query_servers261851
Ref: cb261851
Ref: Query Servers Definition-Footnote-1263679
Node: Query Servers Configuration263737
Ref: config/query-servers query-servers-configuration263883
Ref: 1ff263883
Ref: config/query-servers config-query-server-config263883
Ref: 200263883
Ref: config/query-servers query_server_config263952
Ref: c7263952
Ref: config/query-servers query_server_config/commit_freq263994
Ref: c8263994
Ref: config/query-servers query_server_config/os_process_limit264227
Ref: c9264227
Ref: config/query-servers query_server_config/reduce_limit264607
Ref: ca264607
Node: Native Erlang Query Server265010
Ref: config/query-servers config-native-query-servers265123
Ref: 1fe265123
Ref: config/query-servers native-erlang-query-server265123
Ref: 202265123
Ref: config/query-servers native_query_servers265190
Ref: c1265190
Node: External Processes267081
Ref: config/externals external-processes267209
Ref: 204267209
Ref: config/externals doc267209
Ref: 205267209
Node: OS Daemons267330
Ref: config/externals os-daemons267424
Ref: 206267424
Ref: config/externals config-os-daemons267424
Ref: 207267424
Ref: config/externals os_daemons267459
Ref: c6267459
Node: OS Daemons settings270541
Ref: config/externals os-daemons-settings270664
Ref: 20a270664
Ref: config/externals config-os-daemon-settings270664
Ref: 20b270664
Ref: config/externals os_daemon_settings270717
Ref: c3270717
Ref: config/externals os_daemon_settings/max_retries270758
Ref: c4270758
Ref: config/externals os_daemon_settings/retry_time270964
Ref: c5270964
Ref: config/externals update-notifications271133
Ref: 20c271133
Node: Update notifications271134
Ref: config/externals config-update-notification271238
Ref: 20d271238
Ref: config/externals id1271238
Ref: 20e271238
Ref: config/externals update_notification271293
Ref: e8271293
Node: HTTP Resource Handlers272470
Ref: config/http-handlers doc272610
Ref: 20f272610
Ref: config/http-handlers http-resource-handlers272610
Ref: 210272610
Node: Global HTTP Handlers272764
Ref: config/http-handlers global-http-handlers272875
Ref: 211272875
Ref: config/http-handlers config-httpd-global-handlers272875
Ref: 212272875
Ref: config/http-handlers httpd_global_handlers272932
Ref: ae272932
Ref: config/http-handlers httpd_global_handlers//273047
Ref: af273047
Ref: config/http-handlers httpd_global_handlers/favicon ico273195
Ref: bb273195
Ref: config/http-handlers httpd_global_handlers/_active_tasks273472
Ref: b0273472
Ref: config/http-handlers httpd_global_handlers/_all_dbs273633
Ref: b1273633
Ref: config/http-handlers httpd_global_handlers/_config274237
Ref: b2274237
Ref: config/http-handlers httpd_global_handlers/_log274623
Ref: b3274623
Ref: config/http-handlers httpd_global_handlers/_oauth274766
Ref: b4274766
Ref: config/http-handlers httpd_global_handlers/_replicate274896
Ref: b5274896
Ref: config/http-handlers httpd_global_handlers/_restart275106
Ref: b6275106
Ref: config/http-handlers httpd_global_handlers/_session275253
Ref: b7275253
Ref: config/http-handlers httpd_global_handlers/_stats275483
Ref: b8275483
Ref: config/http-handlers httpd_global_handlers/_utils275625
Ref: b9275625
Ref: config/http-handlers httpd_global_handlers/_uuids275992
Ref: ba275992
Node: Database HTTP Handlers276327
Ref: config/http-handlers database-http-handlers276477
Ref: 214276477
Ref: config/http-handlers config-httpd-db-handlers276477
Ref: 215276477
Ref: config/http-handlers httpd_db_handlers276538
Ref: 9f276538
Ref: config/http-handlers httpd_db_handlers/_all_docs276646
Ref: a0276646
Ref: config/http-handlers httpd_db_handlers/_changes276784
Ref: a1276784
Ref: config/http-handlers httpd_db_handlers/_compact276916
Ref: a2276916
Ref: config/http-handlers httpd_db_handlers/_design277048
Ref: a3277048
Ref: config/http-handlers httpd_db_handlers/_temp_view277177
Ref: a4277177
Ref: config/http-handlers httpd_db_handlers/_view_cleanup277318
Ref: a5277318
Node: Design Documents HTTP Handlers277463
Ref: config/http-handlers design-documents-http-handlers277584
Ref: 216277584
Ref: config/http-handlers config-httpd-design-handlers277584
Ref: 217277584
Ref: config/http-handlers httpd_design_handlers277661
Ref: a6277661
Ref: config/http-handlers httpd_design_handlers/_compact277766
Ref: a7277766
Ref: config/http-handlers httpd_design_handlers/_info277904
Ref: a8277904
Ref: config/http-handlers httpd_design_handlers/_list278034
Ref: a9278034
Ref: config/http-handlers httpd_design_handlers/_rewrite278169
Ref: aa278169
Ref: config/http-handlers httpd_design_handlers/_show278310
Ref: ab278310
Ref: config/http-handlers httpd_design_handlers/_update278444
Ref: ac278444
Ref: config/http-handlers httpd_design_handlers/_view278584
Ref: ad278584
Node: CouchDB Internal Services278714
Ref: config/services doc278860
Ref: 218278860
Ref: config/services couchdb-internal-services278860
Ref: 219278860
Node: CouchDB Daemonized Mini Apps278966
Ref: config/services couchdb-daemonized-mini-apps279057
Ref: 21a279057
Ref: config/services config-daemons279057
Ref: 21b279057
Ref: config/services daemons279130
Ref: 7b279130
Ref: config/services daemons/auth_cache279160
Ref: 7c279160
Ref: config/services daemons/compaction_daemon279463
Ref: 7d279463
Ref: config/services daemons/external_manager279658
Ref: 7e279658
Ref: config/services daemons/httpd279839
Ref: 7f279839
Ref: config/services daemons/httpsd279977
Ref: 80279977
Ref: config/services daemons/index_server280198
Ref: 81280198
Ref: config/services daemons/os_daemons280592
Ref: 82280592
Ref: config/services daemons/query_servers280757
Ref: 83280757
Ref: config/services daemons/replicator_manager280934
Ref: 84280934
Ref: config/services daemons/stats_aggregator281113
Ref: 85281113
Ref: config/services daemons/stats_collector281290
Ref: 86281290
Ref: config/services daemons/uuids281463
Ref: 87281463
Ref: config/services daemons/vhosts281612
Ref: 88281612
Node: Miscellaneous Parameters281900
Ref: config/misc doc282046
Ref: 21d282046
Ref: config/misc miscellaneous-parameters282046
Ref: 21e282046
Node: Configuration of Attachment Storage282230
Ref: config/misc configuration-of-attachment-storage282357
Ref: 21f282357
Ref: config/misc config-attachments282357
Ref: 220282357
Ref: config/misc attachments282444
Ref: 4f282444
Ref: config/misc attachments/compression_level282478
Ref: 51282478
Ref: config/misc attachments/compressible_types282759
Ref: 50282759
Node: Statistic Calculation283124
Ref: config/misc config-stats283279
Ref: 221283279
Ref: config/misc statistic-calculation283279
Ref: 222283279
Ref: config/misc stats283338
Ref: e5283338
Ref: config/misc stats/rate283366
Ref: e6283366
Ref: config/misc stats/samples283503
Ref: e7283503
Node: UUIDs Configuration283728
Ref: config/misc config-uuids283866
Ref: 21c283866
Ref: config/misc uuids-configuration283866
Ref: 223283866
Ref: config/misc uuids283921
Ref: e9283921
Ref: config/misc uuids/algorithm283949
Ref: ea283949
Ref: config/misc uuids/utc_id_suffix288728
Ref: ec288728
Ref: config/misc uuids/max_count289101
Ref: eb289101
Node: Vendor information289390
Ref: config/misc config-vendor289498
Ref: 224289498
Ref: config/misc vendor-information289498
Ref: 225289498
Ref: config/misc vendor289551
Ref: ed289551
Node: Proxying Configuration289831
Ref: config/proxying config-proxy289943
Ref: 226289943
Ref: config/proxying proxying-configuration289943
Ref: 227289943
Ref: config/proxying doc289943
Ref: 228289943
Ref: config/proxying http-proxying290000
Ref: 208290000
Node: CouchDB As Proxy290031
Ref: config/proxying couchdb-as-proxy290107
Ref: 229290107
Ref: config/proxying config-proxy-couchdb290107
Ref: 22a290107
Node: Replication<2>292528
Ref: replication/index replication292639
Ref: 186292639
Ref: replication/index doc292639
Ref: 22b292639
Ref: replication/index id1292639
Ref: 22c292639
Node: Introduction Into Replications294421
Ref: replication/intro doc294540
Ref: 22d294540
Ref: replication/intro replication-intro294540
Ref: fa294540
Ref: replication/intro introduction-into-replications294540
Ref: 22e294540
Node: Triggering Replication<2>295414
Ref: replication/intro triggering-replication295537
Ref: 22f295537
Node: Replication Procedure296107
Ref: replication/intro replication-procedure296266
Ref: 232296266
Node: Master - Master replication297448
Ref: replication/intro master-master-replication297622
Ref: 233297622
Node: Controlling which Documents to Replicate298041
Ref: replication/intro controlling-which-documents-to-replicate298219
Ref: 234298219
Node: Migrating Data to Clients298788
Ref: replication/intro migrating-data-to-clients298930
Ref: 236298930
Ref: Migrating Data to Clients-Footnote-1299322
Node: CouchDB Replication Protocol299349
Ref: replication/protocol couchdb-replication-protocol299496
Ref: 237299496
Ref: replication/protocol doc299496
Ref: 238299496
Ref: replication/protocol replication-protocol299496
Ref: 239299496
Node: Language299808
Ref: replication/protocol language299896
Ref: 23a299896
Ref: Language-Footnote-1300160
Node: Goals300207
Ref: replication/protocol goals300315
Ref: 23b300315
Ref: Goals-Footnote-1300940
Ref: Goals-Footnote-2300965
Ref: Goals-Footnote-3301039
Ref: Goals-Footnote-4301072
Node: Definitions301120
Ref: replication/protocol definitions301229
Ref: 23c301229
Ref: Definitions-Footnote-1301884
Ref: Definitions-Footnote-2301931
Ref: Definitions-Footnote-3301978
Node: Algorithm302025
Ref: replication/protocol algorithm302147
Ref: 23d302147
Ref: Algorithm-Footnote-1304165
Node: Filter replication304231
Ref: replication/protocol filter-replication304355
Ref: 23e304355
Node: Optimisations304629
Ref: replication/protocol optimisations304757
Ref: 23f304757
Node: API Reference305018
Ref: replication/protocol api-reference305137
Ref: 240305137
Node: Push Only305486
Ref: replication/protocol push-only305564
Ref: 241305564
Node: Pull Only305972
Ref: replication/protocol pull-only306050
Ref: 242306050
Node: Reference306711
Ref: replication/protocol reference306808
Ref: 245306808
Ref: Reference-Footnote-1306971
Ref: Reference-Footnote-2307050
Ref: Reference-Footnote-3307100
Node: Replicator Database307157
Ref: replication/replicator replicator-database307304
Ref: 246307304
Ref: replication/replicator doc307304
Ref: 247307304
Ref: replication/replicator replicator307304
Ref: 1f8307304
Ref: replication/replicator change-notifications307304
Ref: 248307304
Node: Basics308396
Ref: replication/replicator basics308509
Ref: 249308509
Node: Documents describing the same replication312110
Ref: replication/replicator documents-describing-the-same-replication312254
Ref: 24a312254
Node: Canceling replications313784
Ref: replication/replicator canceling-replications313936
Ref: 24b313936
Node: Server restart314542
Ref: replication/replicator server-restart314685
Ref: 24c314685
Node: Changing the Replicator Database315156
Ref: replication/replicator changing-the-replicator-database315312
Ref: 24d315312
Node: Replicating the replicator database317690
Ref: replication/replicator replicating-the-replicator-database317843
Ref: 24e317843
Node: Delegations319051
Ref: replication/replicator delegations319163
Ref: 24f319163
Node: Replication and conflict model321625
Ref: replication/conflicts doc321735
Ref: 250321735
Ref: replication/conflicts replication-conflicts321735
Ref: fb321735
Ref: replication/conflicts replication-and-conflict-model321735
Ref: 251321735
Node: CouchDB replication322711
Ref: replication/conflicts couchdb-replication322825
Ref: 252322825
Node: Conflict avoidance326170
Ref: replication/conflicts conflict-avoidance326313
Ref: 253326313
Ref: Conflict avoidance-Footnote-1327805
Ref: Conflict avoidance-Footnote-2327878
Node: Conflicts in batches327951
Ref: replication/conflicts conflicts-in-batches328088
Ref: 254328088
Node: Revision tree329980
Ref: replication/conflicts revision-tree330133
Ref: 256330133
Node: Working with conflicting documents331590
Ref: replication/conflicts working-with-conflicting-documents331744
Ref: 257331744
Node: Multiple document API334352
Ref: replication/conflicts multiple-document-api334511
Ref: 258334511
Node: View map functions335610
Ref: replication/conflicts view-map-functions335763
Ref: 259335763
Ref: View map functions-Footnote-1340919
Node: Merging and revision history340964
Ref: replication/conflicts merging-and-revision-history341141
Ref: 25a341141
Node: Comparison with other replicating data stores342711
Ref: replication/conflicts comparison-with-other-replicating-data-stores342861
Ref: 25b342861
Node: Unison343171
Ref: replication/conflicts unison343272
Ref: 25c343272
Ref: Unison-Footnote-1344944
Node: Git344994
Ref: replication/conflicts git345095
Ref: 25d345095
Ref: Git-Footnote-1350880
Node: What is the CouchDB replication protocol? Is it like Git?350907
Ref: replication/conflicts replication-conflicts-git351005
Ref: 25e351005
Ref: replication/conflicts what-is-the-couchdb-replication-protocol-is-it-like-git351005
Ref: 25f351005
Node: CouchDB Maintenance355674
Ref: maintenance/index doc355774
Ref: 260355774
Ref: maintenance/index couchdb-maintenance355774
Ref: 261355774
Node: Compaction<2>356418
Ref: maintenance/compaction compact356508
Ref: 262356508
Ref: maintenance/compaction doc356508
Ref: 263356508
Ref: maintenance/compaction compaction356508
Ref: 264356508
Ref: Compaction<2>-Footnote-1357293
Node: Database Compaction357339
Ref: maintenance/compaction database-compaction357434
Ref: 265357434
Ref: maintenance/compaction compact-db357434
Ref: 266357434
Ref: Database Compaction-Footnote-1360474
Ref: Database Compaction-Footnote-2360546
Ref: Database Compaction-Footnote-3360617
Node: Views Compaction360690
Ref: maintenance/compaction views-compaction360814
Ref: 268360814
Ref: maintenance/compaction compact-views360814
Ref: 269360814
Ref: Views Compaction-Footnote-1361490
Node: Views cleanup361562
Ref: maintenance/compaction compact-views-cleanup361629
Ref: 26a361629
Ref: maintenance/compaction views-cleanup361629
Ref: 26b361629
Node: Automatic Compaction362085
Ref: maintenance/compaction compact-auto362181
Ref: 26d362181
Ref: maintenance/compaction automatic-compaction362181
Ref: 26e362181
Node: Performance362812
Ref: maintenance/performance performance362902
Ref: 26f362902
Ref: maintenance/performance doc362902
Ref: 270362902
Ref: maintenance/performance id1362902
Ref: 271362902
Node: Disk I/O363570
Ref: maintenance/performance disk-i-o363658
Ref: 272363658
Node: File Size363750
Ref: maintenance/performance file-size363846
Ref: 273363846
Node: Disk and File System Performance364367
Ref: maintenance/performance disk-and-file-system-performance364463
Ref: 274364463
Ref: Disk and File System Performance-Footnote-1365552
Node: System Resource Limits365594
Ref: maintenance/performance system-resource-limits365698
Ref: 275365698
Ref: maintenance/performance command-line-flag-a-in-erl-1365698
Ref: 276365698
Node: CouchDB Configuration Options366171
Ref: maintenance/performance couchdb-configuration-options366275
Ref: 277366275
Node: delayed_commits366399
Ref: maintenance/performance delayed-commits366502
Ref: 278366502
Node: max_dbs_open366934
Ref: maintenance/performance max-dbs-open367037
Ref: 279367037
Node: Erlang367577
Ref: maintenance/performance erlang367704
Ref: 27a367704
Ref: Erlang-Footnote-1368598
Ref: Erlang-Footnote-2368644
Ref: Erlang-Footnote-3368722
Node: PAM and ulimit368799
Ref: maintenance/performance this-thread-for-a-deeper-explanation368888
Ref: 27b368888
Ref: maintenance/performance pam-and-ulimit368888
Ref: 27c368888
Ref: PAM and ulimit-Footnote-1369791
Node: Network369824
Ref: maintenance/performance pam369927
Ref: 27d369927
Ref: maintenance/performance network369927
Ref: 27e369927
Ref: Network-Footnote-1371617
Node: CouchDB371673
Ref: maintenance/performance couchdb371762
Ref: 280371762
Node: DELETE operation371840
Ref: maintenance/performance delete-operation371923
Ref: 281371923
Ref: DELETE operation-Footnote-1372788
Ref: DELETE operation-Footnote-2372856
Ref: DELETE operation-Footnote-3372924
Node: Document's ID372992
Ref: maintenance/performance document-s-id373075
Ref: 282373075
Node: Views<2>373965
Ref: maintenance/performance views374038
Ref: 283374038
Node: Views Generation374123
Ref: maintenance/performance views-generation374218
Ref: 284374218
Node: Builtin Reduce Functions375085
Ref: maintenance/performance builtin-reduce-functions375180
Ref: 285375180
Ref: Builtin Reduce Functions-Footnote-1376287
Node: CouchApp376421
Ref: couchapp/index id1376528
Ref: 287376528
Ref: couchapp/index doc376528
Ref: 288376528
Ref: couchapp/index couchapp376528
Ref: fd376528
Ref: CouchApp-Footnote-1378616
Node: Design Functions378644
Ref: couchapp/ddocs ddocs378729
Ref: 177378729
Ref: couchapp/ddocs doc378729
Ref: 289378729
Ref: couchapp/ddocs design-functions378729
Ref: 28a378729
Node: View functions379656
Ref: couchapp/ddocs viewfun379747
Ref: 10c379747
Ref: couchapp/ddocs view-functions379747
Ref: 28f379747
Node: Map functions379934
Ref: couchapp/ddocs map-functions380037
Ref: 290380037
Ref: couchapp/ddocs mapfun380037
Ref: 291380037
Node: Reduce and rereduce functions381352
Ref: couchapp/ddocs reducefun381455
Ref: 201381455
Ref: couchapp/ddocs reduce-and-rereduce-functions381455
Ref: 295381455
Ref: couchapp/ddocs redfun381532
Ref: 296381532
Node: Builtin reduce functions382889
Ref: couchapp/ddocs builtin-reduce-functions382980
Ref: 297382980
Ref: couchapp/ddocs reducefun-builtin382980
Ref: 286382980
Node: Show functions386377
Ref: couchapp/ddocs showfun386491
Ref: 176386491
Ref: couchapp/ddocs show-functions386491
Ref: 298386491
Ref: Show functions-Footnote-1390187
Ref: Show functions-Footnote-2390273
Node: List functions390329
Ref: couchapp/ddocs list-functions390445
Ref: 29b390445
Ref: couchapp/ddocs listfun390445
Ref: f8390445
Ref: List functions-Footnote-1391956
Ref: List functions-Footnote-2392066
Node: Update functions392122
Ref: couchapp/ddocs update-functions392240
Ref: 29d392240
Ref: couchapp/ddocs updatefun392240
Ref: 29e392240
Ref: Update functions-Footnote-1394246
Node: Filter functions394309
Ref: couchapp/ddocs filter-functions394447
Ref: 29f394447
Ref: couchapp/ddocs filterfun394447
Ref: 235394447
Node: Classic filters394982
Ref: couchapp/ddocs classic-filters395072
Ref: 2a0395072
Node: View filters398234
Ref: couchapp/ddocs view-filters398324
Ref: 2a1398324
Ref: couchapp/ddocs viewfilter398324
Ref: 2a2398324
Ref: View filters-Footnote-1399185
Ref: View filters-Footnote-2399250
Node: Validate document update functions399321
Ref: couchapp/ddocs validate-document-update-functions399434
Ref: 2a3399434
Ref: couchapp/ddocs vdufun399434
Ref: 112399434
Ref: couchapp/ddocs validatefun399517
Ref: 2a4399517
Ref: Validate document update functions-Footnote-1406467
Ref: Validate document update functions-Footnote-2406529
Node: Guide to Views406594
Ref: couchapp/views/index doc406679
Ref: 2a5406679
Ref: couchapp/views/index guide-to-views406679
Ref: 2a6406679
Ref: couchapp/views/index views406679
Ref: f7406679
Node: Introduction Into The Views408226
Ref: couchapp/views/intro views-intro408329
Ref: 2a7408329
Ref: couchapp/views/intro doc408329
Ref: 2a8408329
Ref: couchapp/views/intro introduction-into-the-views408329
Ref: 2a9408329
Node: What Is a View?409233
Ref: couchapp/views/intro what-is-a-view409339
Ref: 2aa409339
Node: Efficient Lookups414756
Ref: couchapp/views/intro efficient-lookups414905
Ref: 2ab414905
Node: Find One416685
Ref: couchapp/views/intro find-one416766
Ref: 2ac416766
Node: Find Many417888
Ref: couchapp/views/intro find-many417994
Ref: 2ad417994
Node: Reversed Results420239
Ref: couchapp/views/intro reversed-results420328
Ref: 2ae420328
Node: The View to Get Comments for Posts422013
Ref: couchapp/views/intro the-view-to-get-comments-for-posts422162
Ref: 2af422162
Node: Reduce/Rereduce424788
Ref: couchapp/views/intro reduce-rereduce424935
Ref: 2b0424935
Node: Lessons Learned429935
Ref: couchapp/views/intro lessons-learned430062
Ref: 2b1430062
Node: Wrapping Up<5>430528
Ref: couchapp/views/intro wrapping-up430631
Ref: 2b2430631
Ref: Wrapping Up<5>-Footnote-1433848
Node: Views Collation433903
Ref: couchapp/views/collation id1434031
Ref: 2b3434031
Ref: couchapp/views/collation doc434031
Ref: 2b4434031
Ref: couchapp/views/collation googles-paper-on-sawzall434031
Ref: 2b5434031
Ref: couchapp/views/collation views-collation434031
Ref: 2b6434031
Node: Basics<2>434219
Ref: couchapp/views/collation basics434298
Ref: 2b7434298
Node: Examples434854
Ref: couchapp/views/collation examples434958
Ref: 2b8434958
Node: Sorting by Dates436028
Ref: couchapp/views/collation sorting-by-dates436136
Ref: 2b9436136
Node: String Ranges436973
Ref: couchapp/views/collation string-ranges437096
Ref: 2ba437096
Node: Collation Specification437429
Ref: couchapp/views/collation collation-specification437545
Ref: 2bb437545
Ref: Collation Specification-Footnote-1440032
Ref: Collation Specification-Footnote-2440150
Ref: Collation Specification-Footnote-3440186
Node: Key ranges440238
Ref: couchapp/views/collation key-ranges440330
Ref: 2bc440330
Node: Complex keys440759
Ref: couchapp/views/collation complex-keys440851
Ref: 2bd440851
Node: _all_docs441107
Ref: couchapp/views/collation all-docs441223
Ref: 2be441223
Node: Raw collation441567
Ref: couchapp/views/collation raw-collation441651
Ref: 2bf441651
Node: Joins With Views442108
Ref: couchapp/views/joins doc442238
Ref: 2c0442238
Ref: couchapp/views/joins joins-with-views442238
Ref: 2c1442238
Ref: couchapp/views/joins views-json442238
Ref: 2c2442238
Node: Linked Documents442341
Ref: couchapp/views/joins linked-documents442440
Ref: 2c3442440
Node: Using View Collation446457
Ref: couchapp/views/joins using-view-collation446556
Ref: 2c5446556
Ref: Using View Collation-Footnote-1447433
Node: Approach #1 Comments Inlined447485
Ref: couchapp/views/joins approach-1-comments-inlined447609
Ref: 2c6447609
Node: Approach #2 Comments Separate449711
Ref: couchapp/views/joins approach-2-comments-separate449890
Ref: 2c7449890
Node: Optimization Using the Power of View Collation452408
Ref: couchapp/views/joins optimization-using-the-power-of-view-collation452550
Ref: 2c8452550
Node: View Cookbook for SQL Jockeys456932
Ref: couchapp/views/nosql view-cookbook-for-sql-jockeys457064
Ref: 2c9457064
Ref: couchapp/views/nosql doc457064
Ref: 2ca457064
Ref: couchapp/views/nosql views-nosql457064
Ref: 2cb457064
Node: Using Views457793
Ref: couchapp/views/nosql using-views457894
Ref: 2cc457894
Node: Defining a View458368
Ref: couchapp/views/nosql defining-a-view458456
Ref: 2cd458456
Node: Querying a View459950
Ref: couchapp/views/nosql querying-a-view460066
Ref: 2ce460066
Node: MapReduce Functions460677
Ref: couchapp/views/nosql mapreduce-functions460794
Ref: 2cf460794
Node: Map functions<2>461540
Ref: couchapp/views/nosql map-functions461633
Ref: 2d0461633
Node: Look Up by Key462832
Ref: couchapp/views/nosql look-up-by-key462959
Ref: 2d1462959
Node: Look Up by Prefix464671
Ref: couchapp/views/nosql look-up-by-prefix464806
Ref: 2d2464806
Node: Aggregate Functions466286
Ref: couchapp/views/nosql aggregate-functions466424
Ref: 2d3466424
Node: Get Unique Values469701
Ref: couchapp/views/nosql get-unique-values469842
Ref: 2d5469842
Node: Enforcing Uniqueness473343
Ref: couchapp/views/nosql enforcing-uniqueness473456
Ref: 2d6473456
Node: Pagination Recipe474288
Ref: couchapp/views/pagination pagination-recipe474395
Ref: 2d7474395
Ref: couchapp/views/pagination doc474395
Ref: 2d8474395
Ref: couchapp/views/pagination views-pagination474395
Ref: 2d9474395
Node: Example Data475079
Ref: couchapp/views/pagination example-data475161
Ref: 2da475161
Node: A View475626
Ref: couchapp/views/pagination a-view475722
Ref: 2db475722
Node: Setup477495
Ref: couchapp/views/pagination setup477585
Ref: 2dc477585
Node: Paging478131
Ref: couchapp/views/pagination paging478238
Ref: 2dd478238
Node: Paging Alternate Method480375
Ref: couchapp/views/pagination paging-alternate-method480489
Ref: 2de480489
Node: Jump to Page483555
Ref: couchapp/views/pagination jump-to-page483654
Ref: 2df483654
Node: CouchDB Externals API484788
Ref: externals couchdb-externals-api484888
Ref: 2e0484888
Ref: externals doc484888
Ref: 2e1484888
Ref: externals externals484888
Ref: 209484888
Ref: CouchDB Externals API-Footnote-1486212
Node: The New Hotness486268
Ref: externals the-new-hotness486384
Ref: 2e2486384
Ref: The New Hotness-Footnote-1488054
Ref: The New Hotness-Footnote-2488087
Node: How does it work? - HTTP Proxying488118
Ref: externals how-does-it-work-http-proxying488273
Ref: 2e3488273
Ref: How does it work? - HTTP Proxying-Footnote-1489270
Node: How does it work? - OS Daemons489319
Ref: externals how-does-it-work-os-daemons489476
Ref: 2e4489476
Node: Configuration API490317
Ref: externals configuration-api490422
Ref: 2e5490422
Node: Logging API491189
Ref: externals logging-api491318
Ref: 2e6491318
Node: Dynamic Daemons491596
Ref: externals dynamic-daemons491699
Ref: 2e7491699
Node: Neat But So What?491951
Ref: externals neat-but-so-what492066
Ref: 2e8492066
Ref: Neat But So What?-Footnote-1494723
Ref: Neat But So What?-Footnote-2494749
Node: Query Server494808
Ref: query-server/index query-server494907
Ref: 2e9494907
Ref: query-server/index doc494907
Ref: 2ea494907
Ref: query-server/index couchdb-lucene494907
Ref: 2eb494907
Ref: query-server/index id1494907
Ref: 2ec494907
Ref: Query Server-Footnote-1496094
Node: Query Server Protocol496152
Ref: query-server/protocol query-server-protocol496242
Ref: 2ee496242
Ref: query-server/protocol doc496242
Ref: 2ef496242
Ref: query-server/protocol id1496242
Ref: 2f0496242
Node: reset497149
Ref: query-server/protocol reset497229
Ref: 2f1497229
Ref: query-server/protocol qs-reset497229
Ref: 2f2497229
Node: add_lib497792
Ref: query-server/protocol add-lib497888
Ref: 2f3497888
Ref: query-server/protocol qs-add-lib497888
Ref: 2f4497888
Node: add_fun498586
Ref: query-server/protocol qs-add-fun498638
Ref: 2f5498638
Ref: query-server/protocol add-fun498638
Ref: 2f6498638
Node: map_doc499264
Ref: query-server/protocol qs-map-doc499361
Ref: 2f7499361
Ref: query-server/protocol map-doc499361
Ref: 2f8499361
Node: reduce500555
Ref: query-server/protocol qs-reduce500653
Ref: 2f9500653
Ref: query-server/protocol reduce500653
Ref: 2fa500653
Node: rereduce501756
Ref: query-server/protocol rereduce501851
Ref: 2fb501851
Ref: query-server/protocol qs-rereduce501851
Ref: 2fc501851
Node: ddoc502427
Ref: query-server/protocol ddoc502530
Ref: 2fd502530
Ref: query-server/protocol qs-ddoc502530
Ref: 2fe502530
Node: shows504343
Ref: query-server/protocol qs-ddoc-shows504404
Ref: 2ff504404
Ref: query-server/protocol shows504404
Ref: 300504404
Node: lists506354
Ref: query-server/protocol qs-ddoc-lists506431
Ref: 301506431
Ref: query-server/protocol lists506431
Ref: 302506431
Node: updates512474
Ref: query-server/protocol qs-ddoc-updates512553
Ref: 304512553
Ref: query-server/protocol updates512553
Ref: 305512553
Node: filters515229
Ref: query-server/protocol qs-ddoc-filters515308
Ref: 306515308
Ref: query-server/protocol filters515308
Ref: 307515308
Node: views518464
Ref: query-server/protocol qs-ddoc-views518555
Ref: 308518555
Ref: query-server/protocol views518555
Ref: 309518555
Node: validate_doc_update518941
Ref: query-server/protocol qs-ddoc-validate-doc-update519016
Ref: 30a519016
Ref: query-server/protocol validate-doc-update519016
Ref: 30b519016
Node: Raising errors520210
Ref: query-server/protocol raising-errors520315
Ref: 30c520315
Ref: query-server/protocol qs-errors520315
Ref: 30d520315
Node: error521329
Ref: query-server/protocol qs-error521404
Ref: 30e521404
Ref: query-server/protocol error521404
Ref: 30f521404
Node: forbidden522106
Ref: query-server/protocol forbidden522202
Ref: 310522202
Ref: query-server/protocol qs-error-forbidden522202
Ref: 311522202
Node: unauthorized522711
Ref: query-server/protocol qs-error-unauthorized522793
Ref: 312522793
Ref: query-server/protocol unauthorized522793
Ref: 313522793
Node: Logging<2>523254
Ref: query-server/protocol qs-log523346
Ref: 314523346
Ref: query-server/protocol logging523346
Ref: 315523346
Node: JavaScript523811
Ref: query-server/javascript query-server-js523919
Ref: f9523919
Ref: query-server/javascript doc523919
Ref: 316523919
Ref: query-server/javascript javascript523919
Ref: 317523919
Node: Design functions context525315
Ref: query-server/javascript design-functions-context525412
Ref: 31e525412
Ref: query-server/javascript emit525573
Ref: 292525573
Ref: query-server/javascript getRow525907
Ref: 318525907
Ref: query-server/javascript JSON526358
Ref: 319526358
Ref: query-server/javascript isArray526407
Ref: 31a526407
Ref: query-server/javascript log526687
Ref: 31b526687
Ref: query-server/javascript provides527252
Ref: 29a527252
Ref: query-server/javascript registerType527517
Ref: 299527517
Ref: query-server/javascript require528517
Ref: 294528517
Ref: query-server/javascript send528812
Ref: 31c528812
Ref: query-server/javascript start529097
Ref: 303529097
Ref: query-server/javascript sum529852
Ref: 2d4529852
Ref: query-server/javascript toJSON530005
Ref: 31d530005
Ref: Design functions context-Footnote-1530269
Node: CommonJS Modules530361
Ref: query-server/javascript commonjs530458
Ref: 293530458
Ref: query-server/javascript commonjs-modules530458
Ref: 31f530458
Ref: CommonJS Modules-Footnote-1532107
Node: Erlang<2>532158
Ref: query-server/erlang erlang532236
Ref: 320532236
Ref: query-server/erlang query-server-erlang532236
Ref: 203532236
Ref: query-server/erlang doc532236
Ref: 321532236
Ref: query-server/erlang Emit532402
Ref: 322532402
Ref: query-server/erlang FoldRows532697
Ref: 323532697
Ref: query-server/erlang GetRow533310
Ref: 324533310
Ref: query-server/erlang Log533955
Ref: 325533955
Ref: query-server/erlang Send534582
Ref: 326534582
Ref: query-server/erlang Start534887
Ref: 327534887
Node: Fauxton535458
Ref: fauxton/index fauxton535552
Ref: 328535552
Ref: fauxton/index doc535552
Ref: 329535552
Ref: fauxton/index id1535552
Ref: 32a535552
Node: Installation<2>535914
Ref: fauxton/install installation535998
Ref: 32b535998
Ref: fauxton/install fauxton-install535998
Ref: 32c535998
Ref: fauxton/install doc535998
Ref: 32d535998
Ref: Installation<2>-Footnote-1536197
Ref: Installation<2>-Footnote-2536223
Node: Get the source536264
Ref: fauxton/install npm536353
Ref: 32e536353
Ref: fauxton/install get-the-source536353
Ref: 32f536353
Node: Fauxton Setup536507
Ref: fauxton/install fauxton-setup536615
Ref: 330536615
Node: Dev Server537073
Ref: fauxton/install dev-server537181
Ref: 331537181
Node: Deploy Fauxton537323
Ref: fauxton/install deploy-fauxton537409
Ref: 332537409
Node: Understang Fauxton Code layout537684
Ref: fauxton/install understang-fauxton-code-layout537785
Ref: 333537785
Ref: Understang Fauxton Code layout-Footnote-1538734
Ref: Understang Fauxton Code layout-Footnote-2538764
Node: ToDo items538822
Ref: fauxton/install todo-items538923
Ref: 334538923
Ref: fauxton/install backbone-layoutmanager538923
Ref: 335538923
Ref: ToDo items-Footnote-1539043
Node: Writting Addons539115
Ref: fauxton/addons jira539199
Ref: 336539199
Ref: fauxton/addons writting-addons539199
Ref: 337539199
Ref: fauxton/addons doc539199
Ref: 338539199
Ref: fauxton/addons fauxton-addons539199
Ref: 339539199
Node: Generating an Addon539772
Ref: fauxton/addons generating-an-addon539869
Ref: 33a539869
Node: Routes and hooks540659
Ref: fauxton/addons routes-and-hooks540782
Ref: 33b540782
Node: Routes540941
Ref: fauxton/addons routes541015
Ref: 33c541015
Node: Hooks541215
Ref: fauxton/addons hooks541289
Ref: 33d541289
Node: Hello world Addon541910
Ref: fauxton/addons hello-world-addon542005
Ref: 33e542005
Node: API Reference<2>544417
Ref: api/index api-reference544523
Ref: 33f544523
Ref: api/index api544523
Ref: 15d544523
Ref: api/index doc544523
Ref: 340544523
Node: API Basics548602
Ref: api/basics doc548684
Ref: 341548684
Ref: api/basics api-basics548684
Ref: f5548684
Ref: api/basics id1548684
Ref: 342548684
Node: Request Format and Responses550246
Ref: api/basics api-format550343
Ref: 343550343
Ref: api/basics request-format-and-responses550343
Ref: 345550343
Node: HTTP Headers551955
Ref: api/basics http-headers552072
Ref: 346552072
Node: Request Headers552536
Ref: api/basics request-headers552626
Ref: 347552626
Node: Response Headers555249
Ref: api/basics response-headers555339
Ref: 348555339
Node: JSON Basics557121
Ref: api/basics json557227
Ref: 104557227
Ref: api/basics json-basics557227
Ref: 349557227
Node: Number Handling559284
Ref: api/basics number-handling559348
Ref: 34a559348
Ref: api/basics json-numbers559348
Ref: 34b559348
Ref: Number Handling-Footnote-1566480
Ref: Number Handling-Footnote-2566531
Ref: Number Handling-Footnote-3566568
Ref: Number Handling-Footnote-4566638
Node: HTTP Status Codes566677
Ref: api/basics http-status-codes566762
Ref: 34c566762
Ref: api/basics errors566762
Ref: 344566762
Node: Server<2>569669
Ref: api/server/index doc569772
Ref: 34d569772
Ref: api/server/index api-server569772
Ref: 15e569772
Ref: api/server/index server569772
Ref: 34e569772
Node: /570188
Ref: api/server/common api-server-root570259
Ref: 34f570259
Ref: api/server/common doc570259
Ref: 350570259
Ref: api/server/common id1570259
Ref: 351570259
Ref: api/server/common get--570282
Ref: 0570282
Ref: /-Footnote-1571567
Ref: /-Footnote-2571637
Ref: /-Footnote-3571708
Node: /_active_tasks571780
Ref: api/server/common api-server-active-tasks571869
Ref: 183571869
Ref: api/server/common active-tasks571869
Ref: 352571869
Ref: api/server/common get--_active_tasks571918
Ref: 1571918
Ref: /_active_tasks-Footnote-1575736
Ref: /_active_tasks-Footnote-2575806
Ref: /_active_tasks-Footnote-3575877
Ref: /_active_tasks-Footnote-4575949
Node: /_all_dbs576021
Ref: api/server/common all-dbs576121
Ref: 353576121
Ref: api/server/common api-server-all-dbs576121
Ref: 354576121
Ref: api/server/common get--_all_dbs576160
Ref: 2576160
Ref: /_all_dbs-Footnote-1577141
Ref: /_all_dbs-Footnote-2577211
Ref: /_all_dbs-Footnote-3577282
Node: /_db_updates577354
Ref: api/server/common db-updates577445
Ref: 355577445
Ref: api/server/common api-server-db-updates577445
Ref: 356577445
Ref: api/server/common get--_db_updates577511
Ref: 8577511
Ref: /_db_updates-Footnote-1579570
Ref: /_db_updates-Footnote-2579640
Ref: /_db_updates-Footnote-3579684
Ref: /_db_updates-Footnote-4579755
Ref: /_db_updates-Footnote-5579826
Ref: /_db_updates-Footnote-6579898
Node: /_log579970
Ref: api/server/common log580063
Ref: 357580063
Ref: api/server/common api-server-log580063
Ref: 1d0580063
Ref: api/server/common get--_log580094
Ref: 9580094
Ref: /_log-Footnote-1582472
Ref: /_log-Footnote-2582542
Ref: /_log-Footnote-3582613
Ref: /_log-Footnote-4582684
Ref: /_log-Footnote-5582756
Node: /_replicate582828
Ref: api/server/common replicate582918
Ref: 358582918
Ref: api/server/common api-server-replicate582918
Ref: 15b582918
Ref: api/server/common post--_replicate582961
Ref: a582961
Ref: /_replicate-Footnote-1588615
Ref: /_replicate-Footnote-2588685
Ref: /_replicate-Footnote-3588756
Ref: /_replicate-Footnote-4588827
Ref: /_replicate-Footnote-5588899
Ref: /_replicate-Footnote-6588971
Ref: /_replicate-Footnote-7589043
Ref: /_replicate-Footnote-8589115
Ref: /_replicate-Footnote-9589187
Ref: /_replicate-Footnote-10589259
Ref: /_replicate-Footnote-11589307
Node: Replication Operation589355
Ref: api/server/common replication-operation589475
Ref: 359589475
Node: Specifying the Source and Target Database590449
Ref: api/server/common specifying-the-source-and-target-database590596
Ref: 35a590596
Node: Single Replication592160
Ref: api/server/common single-replication592308
Ref: 35b592308
Node: Continuous Replication593852
Ref: api/server/common continuous-replication593991
Ref: 35c593991
Node: Canceling Continuous Replication595085
Ref: api/server/common canceling-continuous-replication595197
Ref: 35d595197
Node: /_restart596362
Ref: api/server/common api-server-restart596454
Ref: 35e596454
Ref: api/server/common restart596454
Ref: 35f596454
Ref: api/server/common post--_restart596493
Ref: b596493
Ref: /_restart-Footnote-1597765
Ref: /_restart-Footnote-2597835
Ref: /_restart-Footnote-3597906
Ref: /_restart-Footnote-4597977
Ref: /_restart-Footnote-5598049
Ref: /_restart-Footnote-6598121
Ref: /_restart-Footnote-7598194
Node: /_stats598265
Ref: api/server/common api-server-stats598353
Ref: 360598353
Ref: api/server/common stats598353
Ref: 361598353
Ref: api/server/common get--_stats598388
Ref: f598388
Ref: /_stats-Footnote-1600267
Ref: /_stats-Footnote-2600337
Ref: /_stats-Footnote-3600408
Node: couchdb600480
Ref: api/server/common couchdb600562
Ref: 362600562
Node: httpd_request_methods601554
Ref: api/server/common httpd-request-methods601663
Ref: 363601663
Node: httpd_status_codes602275
Ref: api/server/common httpd-status-codes602382
Ref: 364602382
Node: httpd603757
Ref: api/server/common httpd603834
Ref: 365603834
Node: /_utils605303
Ref: api/server/common utils605389
Ref: 366605389
Ref: api/server/common api-server-utils605389
Ref: 213605389
Ref: api/server/common get--_utils605424
Ref: 10605424
Ref: api/server/common get--_utils-605713
Ref: 11605713
Ref: /_utils-Footnote-1605998
Ref: /_utils-Footnote-2606068
Ref: /_utils-Footnote-3606140
Ref: /_utils-Footnote-4606211
Ref: /_utils-Footnote-5606282
Node: /_uuids606354
Ref: api/server/common api-server-uuids606445
Ref: 367606445
Ref: api/server/common uuids606445
Ref: 368606445
Ref: api/server/common get--_uuids606509
Ref: 12606509
Ref: /_uuids-Footnote-1609113
Ref: /_uuids-Footnote-2609183
Ref: /_uuids-Footnote-3609254
Ref: /_uuids-Footnote-4609325
Ref: /_uuids-Footnote-5609397
Node: /favicon ico609469
Ref: api/server/common api-server-favicon609570
Ref: 36a609570
Ref: api/server/common favicon-ico609570
Ref: 36b609570
Ref: api/server/common get--favicon ico609617
Ref: 13609617
Ref: /favicon ico-Footnote-1609983
Ref: /favicon ico-Footnote-2610054
Ref: /favicon ico-Footnote-3610126
Node: Authentication<2>610198
Ref: api/server/authn authentication610305
Ref: 36c610305
Ref: api/server/authn api-auth610305
Ref: 36d610305
Ref: api/server/authn doc610305
Ref: 36e610305
Node: Basic Authentication<2>610694
Ref: api/server/authn api-auth-basic610805
Ref: 16f610805
Ref: api/server/authn basic-authentication610805
Ref: 36f610805
Ref: Basic Authentication<2>-Footnote-1611741
Ref: Basic Authentication<2>-Footnote-2611805
Node: Cookie Authentication<2>611852
Ref: api/server/authn api-auth-cookie611992
Ref: 174611992
Ref: api/server/authn cookie-authentication611992
Ref: 370611992
Ref: Cookie Authentication<2>-Footnote-1612703
Node: /_session612750
Ref: api/server/authn api-auth-session612821
Ref: 172612821
Ref: api/server/authn session612821
Ref: 371612821
Ref: api/server/authn post--_session612866
Ref: d612866
Ref: api/server/authn get--_session615811
Ref: c615811
Ref: api/server/authn delete--_session617381
Ref: e617381
Ref: /_session-Footnote-1618160
Ref: /_session-Footnote-2618231
Ref: /_session-Footnote-3618287
Ref: /_session-Footnote-4618359
Ref: /_session-Footnote-5618431
Ref: /_session-Footnote-6618503
Ref: /_session-Footnote-7618575
Ref: /_session-Footnote-8618647
Ref: /_session-Footnote-9618719
Node: Proxy Authentication618791
Ref: api/server/authn api-auth-proxy618928
Ref: 1de618928
Ref: api/server/authn proxy-authentication618928
Ref: 372618928
Node: OAuth Authentication621179
Ref: api/server/authn oauth-authentication621283
Ref: 373621283
Ref: api/server/authn api-auth-oauth621283
Ref: 1e3621283
Ref: OAuth Authentication-Footnote-1624177
Node: Configuration624224
Ref: api/server/configuration configuration624310
Ref: 374624310
Ref: api/server/configuration doc624310
Ref: 375624310
Ref: api/server/configuration api-config624310
Ref: 168624310
Node: /_config624571
Ref: api/server/configuration config624655
Ref: 376624655
Ref: api/server/configuration get--_config624698
Ref: 3624698
Ref: /_config-Footnote-1630661
Ref: /_config-Footnote-2630731
Ref: /_config-Footnote-3630802
Ref: /_config-Footnote-4630874
Node: /_config/section630946
Ref: api/server/configuration config-section631059
Ref: 377631059
Ref: api/server/configuration api-config-section631059
Ref: 378631059
Ref: api/server/configuration get--_config-section631118
Ref: 4631118
Ref: /_config/section-Footnote-1632750
Ref: /_config/section-Footnote-2632820
Ref: /_config/section-Footnote-3632891
Ref: /_config/section-Footnote-4632963
Node: /_config/section/key633035
Ref: api/server/configuration config-section-key633131
Ref: 379633131
Ref: api/server/configuration api-config-section-key633131
Ref: 369633131
Ref: api/server/configuration get--_config-section-key633198
Ref: 5633198
Ref: api/server/configuration put--_config-section-key634548
Ref: 6634548
Ref: api/server/configuration delete--_config-section-key636123
Ref: 7636123
Ref: /_config/section/key-Footnote-1637407
Ref: /_config/section/key-Footnote-2637477
Ref: /_config/section/key-Footnote-3637548
Ref: /_config/section/key-Footnote-4637620
Ref: /_config/section/key-Footnote-5637692
Ref: /_config/section/key-Footnote-6637762
Ref: /_config/section/key-Footnote-7637833
Ref: /_config/section/key-Footnote-8637904
Ref: /_config/section/key-Footnote-9637976
Ref: /_config/section/key-Footnote-10638048
Ref: /_config/section/key-Footnote-11638121
Ref: /_config/section/key-Footnote-12638194
Ref: /_config/section/key-Footnote-13638265
Ref: /_config/section/key-Footnote-14638337
Ref: /_config/section/key-Footnote-15638410
Ref: /_config/section/key-Footnote-16638483
Node: Databases<2>638556
Ref: api/database/index api-database638661
Ref: 15f638661
Ref: api/database/index doc638661
Ref: 37a638661
Ref: api/database/index databases638661
Ref: 37b638661
Node: /db639921
Ref: api/database/common db639996
Ref: 37c639996
Ref: api/database/common doc639996
Ref: 37d639996
Ref: api/database/common api-db639996
Ref: 267639996
Ref: api/database/common head--db640023
Ref: 14640023
Ref: api/database/common get--db640767
Ref: 15640767
Ref: api/database/common put--db643474
Ref: 17643474
Ref: api/database/common delete--db646718
Ref: 18646718
Ref: api/database/common post--db648302
Ref: 16648302
Ref: /db-Footnote-1651109
Ref: /db-Footnote-2651181
Ref: /db-Footnote-3651253
Ref: /db-Footnote-4651323
Ref: /db-Footnote-5651394
Ref: /db-Footnote-6651466
Ref: /db-Footnote-7651538
Ref: /db-Footnote-8651593
Ref: /db-Footnote-9651663
Ref: /db-Footnote-10651734
Ref: /db-Footnote-11651805
Ref: /db-Footnote-12651878
Ref: /db-Footnote-13651951
Ref: /db-Footnote-14652024
Ref: /db-Footnote-15652098
Ref: /db-Footnote-16652169
Ref: /db-Footnote-17652241
Ref: /db-Footnote-18652314
Ref: /db-Footnote-19652387
Ref: /db-Footnote-20652460
Ref: /db-Footnote-21652533
Ref: /db-Footnote-22652604
Ref: /db-Footnote-23652676
Ref: /db-Footnote-24652748
Ref: /db-Footnote-25652820
Ref: /db-Footnote-26652891
Ref: /db-Footnote-27652964
Ref: /db-Footnote-28653037
Ref: /db-Footnote-29653110
Ref: /db-Footnote-30653183
Ref: /db-Footnote-31653256
Node: Specifying the Document ID653330
Ref: api/database/common specifying-the-document-id653423
Ref: 37f653423
Node: Batch Mode Writes654474
Ref: api/database/common batch-mode-writes654567
Ref: 380654567
Ref: api/database/common api-doc-batch-writes654567
Ref: 37e654567
Ref: Batch Mode Writes-Footnote-1656133
Node: /db/_all_docs656205
Ref: api/database/bulk-api api-db-all-docs656303
Ref: 27f656303
Ref: api/database/bulk-api doc656303
Ref: 381656303
Ref: api/database/bulk-api regular-expressions656303
Ref: 382656303
Ref: api/database/bulk-api db-all-docs656303
Ref: 383656303
Ref: api/database/bulk-api get--db-_all_docs656350
Ref: 19656350
Ref: api/database/bulk-api post--db-_all_docs662077
Ref: 1a662077
Ref: /db/_all_docs-Footnote-1663497
Ref: /db/_all_docs-Footnote-2663567
Ref: /db/_all_docs-Footnote-3663638
Ref: /db/_all_docs-Footnote-4663709
Node: /db/_bulk_docs663781
Ref: api/database/bulk-api api-db-bulk-docs663888
Ref: 255663888
Ref: api/database/bulk-api db-bulk-docs663888
Ref: 384663888
Ref: api/database/bulk-api post--db-_bulk_docs663937
Ref: 1b663937
Ref: /db/_bulk_docs-Footnote-1667663
Ref: /db/_bulk_docs-Footnote-2667733
Ref: /db/_bulk_docs-Footnote-3667804
Ref: /db/_bulk_docs-Footnote-4667875
Ref: /db/_bulk_docs-Footnote-5667947
Ref: /db/_bulk_docs-Footnote-6668019
Ref: /db/_bulk_docs-Footnote-7668092
Node: Inserting Documents in Bulk668164
Ref: api/database/bulk-api inserting-documents-in-bulk668278
Ref: 386668278
Ref: Inserting Documents in Bulk-Footnote-1671322
Node: Updating Documents in Bulk671394
Ref: api/database/bulk-api updating-documents-in-bulk671553
Ref: 388671553
Ref: Updating Documents in Bulk-Footnote-1674316
Node: Bulk Documents Transaction Semantics674388
Ref: api/database/bulk-api bulk-documents-transaction-semantics674564
Ref: 389674564
Ref: api/database/bulk-api api-db-bulk-docs-semantics674564
Ref: 385674564
Node: Bulk Document Validation and Conflict Errors679040
Ref: api/database/bulk-api api-db-bulk-docs-validation679181
Ref: 387679181
Ref: api/database/bulk-api bulk-document-validation-and-conflict-errors679181
Ref: 38a679181
Node: /db/_changes681141
Ref: api/database/changes db-changes681247
Ref: 38b681247
Ref: api/database/changes api-db-changes681247
Ref: 38c681247
Ref: api/database/changes doc681247
Ref: 38d681247
Ref: api/database/changes get--db-_changes681292
Ref: 1c681292
Ref: api/database/changes post--db-_changes689664
Ref: 1d689664
Ref: /db/_changes-Footnote-1691131
Ref: /db/_changes-Footnote-2691201
Ref: /db/_changes-Footnote-3691256
Ref: /db/_changes-Footnote-4691304
Ref: /db/_changes-Footnote-5691361
Ref: /db/_changes-Footnote-6691431
Ref: /db/_changes-Footnote-7691502
Ref: /db/_changes-Footnote-8691573
Ref: /db/_changes-Footnote-9691644
Ref: /db/_changes-Footnote-10691716
Node: Changes Feeds691789
Ref: api/database/changes changes691870
Ref: fc691870
Ref: api/database/changes changes-feeds691870
Ref: 393691870
Node: Polling691988
Ref: api/database/changes changes-normal692067
Ref: 243692067
Ref: api/database/changes polling692067
Ref: 394692067
Node: Long Polling694042
Ref: api/database/changes long-polling694140
Ref: 395694140
Ref: api/database/changes changes-longpoll694140
Ref: 244694140
Node: Continuous694986
Ref: api/database/changes continuous695089
Ref: 396695089
Ref: api/database/changes changes-continuous695089
Ref: 38f695089
Node: Event Source696448
Ref: api/database/changes changes-eventsource696530
Ref: 392696530
Ref: api/database/changes event-source696530
Ref: 397696530
Ref: Event Source-Footnote-1697705
Node: Filtering697746
Ref: api/database/changes filtering697827
Ref: 398697827
Ref: api/database/changes changes-filter697827
Ref: 399697827
Node: _doc_ids698675
Ref: api/database/changes doc-ids698746
Ref: 39a698746
Ref: api/database/changes changes-filter-doc-ids698746
Ref: 38e698746
Node: _design698960
Ref: api/database/changes design699045
Ref: 39b699045
Ref: api/database/changes changes-filter-design699045
Ref: 39c699045
Node: _view700450
Ref: api/database/changes view700518
Ref: 39d700518
Ref: api/database/changes changes-filter-view700518
Ref: 391700518
Node: /db/_compact702447
Ref: api/database/compact db-compact702562
Ref: 39e702562
Ref: api/database/compact doc702562
Ref: 39f702562
Ref: api/database/compact api-db-compact702562
Ref: 3a0702562
Ref: api/database/compact post--db-_compact702607
Ref: 1e702607
Ref: /db/_compact-Footnote-1705197
Ref: /db/_compact-Footnote-2705267
Ref: /db/_compact-Footnote-3705338
Ref: /db/_compact-Footnote-4705409
Ref: /db/_compact-Footnote-5705481
Ref: /db/_compact-Footnote-6705553
Ref: /db/_compact-Footnote-7705625
Ref: /db/_compact-Footnote-8705698
Node: /db/_compact/design-doc705769
Ref: api/database/compact api-db-compact-ddoc705895
Ref: 3a1705895
Ref: api/database/compact db-compact-design-doc705895
Ref: 3a2705895
Ref: api/database/compact post--db-_compact-ddoc705962
Ref: 1f705962
Ref: /db/_compact/design-doc-Footnote-1708001
Ref: /db/_compact/design-doc-Footnote-2708071
Ref: /db/_compact/design-doc-Footnote-3708142
Ref: /db/_compact/design-doc-Footnote-4708213
Ref: /db/_compact/design-doc-Footnote-5708285
Ref: /db/_compact/design-doc-Footnote-6708357
Ref: /db/_compact/design-doc-Footnote-7708429
Ref: /db/_compact/design-doc-Footnote-8708501
Ref: /db/_compact/design-doc-Footnote-9708574
Node: /db/_ensure_full_commit708645
Ref: api/database/compact db-ensure-full-commit708776
Ref: 3a3708776
Ref: api/database/compact api-db-ensure-full-commit708776
Ref: 3a4708776
Ref: api/database/compact post--db-_ensure_full_commit708843
Ref: 37708843
Ref: /db/_ensure_full_commit-Footnote-1710705
Ref: /db/_ensure_full_commit-Footnote-2710775
Ref: /db/_ensure_full_commit-Footnote-3710846
Ref: /db/_ensure_full_commit-Footnote-4710917
Ref: /db/_ensure_full_commit-Footnote-5710989
Ref: /db/_ensure_full_commit-Footnote-6711061
Ref: /db/_ensure_full_commit-Footnote-7711134
Node: /db/_view_cleanup711205
Ref: api/database/compact db-view-cleanup711326
Ref: 3a5711326
Ref: api/database/compact api-db-view-cleanup711326
Ref: 26c711326
Ref: api/database/compact post--db-_view_cleanup711381
Ref: 44711381
Ref: /db/_view_cleanup-Footnote-1713044
Ref: /db/_view_cleanup-Footnote-2713114
Ref: /db/_view_cleanup-Footnote-3713185
Ref: /db/_view_cleanup-Footnote-4713256
Ref: /db/_view_cleanup-Footnote-5713328
Ref: /db/_view_cleanup-Footnote-6713400
Ref: /db/_view_cleanup-Footnote-7713472
Ref: /db/_view_cleanup-Footnote-8713545
Node: /db/_security713616
Ref: api/database/security api-db-security713728
Ref: 10f713728
Ref: api/database/security db-security713728
Ref: 3a6713728
Ref: api/database/security doc713728
Ref: 3a7713728
Ref: api/database/security get--db-_security713775
Ref: 41713775
Ref: api/database/security put--db-_security717651
Ref: 42717651
Ref: /db/_security-Footnote-1719720
Ref: /db/_security-Footnote-2719790
Ref: /db/_security-Footnote-3719861
Ref: /db/_security-Footnote-4719933
Ref: /db/_security-Footnote-5720003
Ref: /db/_security-Footnote-6720074
Ref: /db/_security-Footnote-7720145
Ref: /db/_security-Footnote-8720217
Node: /db/_temp_view720289
Ref: api/database/temp-views api-db-temp-view720394
Ref: 2ed720394
Ref: api/database/temp-views db-temp-view720394
Ref: 3a9720394
Ref: api/database/temp-views doc720394
Ref: 3aa720394
Ref: api/database/temp-views post--db-_temp_view720445
Ref: 43720445
Node: /db/_purge722249
Ref: api/database/misc db-purge722358
Ref: 3ab722358
Ref: api/database/misc doc722358
Ref: 3ac722358
Ref: api/database/misc api-db-purge722358
Ref: 3ad722358
Ref: api/database/misc post--db-_purge722401
Ref: 3d722401
Ref: /db/_purge-Footnote-1726054
Ref: /db/_purge-Footnote-2726124
Ref: /db/_purge-Footnote-3726195
Ref: /db/_purge-Footnote-4726266
Ref: /db/_purge-Footnote-5726338
Ref: /db/_purge-Footnote-6726410
Ref: /db/_purge-Footnote-7726483
Node: Updating Indexes726554
Ref: api/database/misc updating-indexes726618
Ref: 3ae726618
Node: /db/_missing_revs727519
Ref: api/database/misc db-missing-revs727628
Ref: 3af727628
Ref: api/database/misc api-db-missing-revs727628
Ref: 3b0727628
Ref: api/database/misc post--db-_missing_revs727685
Ref: 3c727685
Ref: /db/_missing_revs-Footnote-1729507
Ref: /db/_missing_revs-Footnote-2729577
Ref: /db/_missing_revs-Footnote-3729648
Ref: /db/_missing_revs-Footnote-4729719
Ref: /db/_missing_revs-Footnote-5729791
Node: /db/_revs_diff729863
Ref: api/database/misc api-db-revs-diff729977
Ref: 3b1729977
Ref: api/database/misc db-revs-diff729977
Ref: 3b2729977
Ref: api/database/misc post--db-_revs_diff730028
Ref: 3e730028
Ref: /db/_revs_diff-Footnote-1733213
Ref: /db/_revs_diff-Footnote-2733283
Ref: /db/_revs_diff-Footnote-3733354
Ref: /db/_revs_diff-Footnote-4733425
Ref: /db/_revs_diff-Footnote-5733497
Node: /db/_revs_limit733569
Ref: api/database/misc api-db-revs-limit733657
Ref: 3a8733657
Ref: api/database/misc db-revs-limit733657
Ref: 3b3733657
Ref: api/database/misc get--db-_revs_limit733710
Ref: 3f733710
Ref: api/database/misc put--db-_revs_limit734602
Ref: 40734602
Ref: /db/_revs_limit-Footnote-1736032
Ref: /db/_revs_limit-Footnote-2736102
Ref: /db/_revs_limit-Footnote-3736173
Ref: /db/_revs_limit-Footnote-4736245
Ref: /db/_revs_limit-Footnote-5736315
Ref: /db/_revs_limit-Footnote-6736386
Ref: /db/_revs_limit-Footnote-7736457
Ref: /db/_revs_limit-Footnote-8736529
Node: Documents<2>736601
Ref: api/document/index api-document736713
Ref: 160736713
Ref: api/document/index documents736713
Ref: 3b4736713
Ref: api/document/index doc736713
Ref: 3b5736713
Node: /db/doc737466
Ref: api/document/common db-doc737550
Ref: 3b6737550
Ref: api/document/common doc737550
Ref: 3b7737550
Ref: api/document/common api-doc737550
Ref: f6737550
Ref: api/document/common head--db-docid737585
Ref: 45737585
Ref: api/document/common get--db-docid739350
Ref: 46739350
Ref: api/document/common put--db-docid744751
Ref: 47744751
Ref: api/document/common delete--db-docid747783
Ref: 48747783
Ref: api/document/common copy--db-docid750997
Ref: 49750997
Ref: /db/doc-Footnote-1754464
Ref: /db/doc-Footnote-2754535
Ref: /db/doc-Footnote-3754606
Ref: /db/doc-Footnote-4754677
Ref: /db/doc-Footnote-5754748
Ref: /db/doc-Footnote-6754819
Ref: /db/doc-Footnote-7754891
Ref: /db/doc-Footnote-8754963
Ref: /db/doc-Footnote-9755035
Ref: /db/doc-Footnote-10755107
Ref: /db/doc-Footnote-11755178
Ref: /db/doc-Footnote-12755250
Ref: /db/doc-Footnote-13755322
Ref: /db/doc-Footnote-14755394
Ref: /db/doc-Footnote-15755466
Ref: /db/doc-Footnote-16755539
Ref: /db/doc-Footnote-17755612
Ref: /db/doc-Footnote-18755685
Ref: /db/doc-Footnote-19755758
Ref: /db/doc-Footnote-20755831
Ref: /db/doc-Footnote-21755900
Ref: /db/doc-Footnote-22755971
Ref: /db/doc-Footnote-23756043
Ref: /db/doc-Footnote-24756115
Ref: /db/doc-Footnote-25756187
Ref: /db/doc-Footnote-26756259
Ref: /db/doc-Footnote-27756330
Ref: /db/doc-Footnote-28756403
Ref: /db/doc-Footnote-29756476
Ref: /db/doc-Footnote-30756549
Ref: /db/doc-Footnote-31756622
Ref: /db/doc-Footnote-32756695
Ref: /db/doc-Footnote-33756769
Ref: /db/doc-Footnote-34756841
Ref: /db/doc-Footnote-35756912
Ref: /db/doc-Footnote-36756984
Ref: /db/doc-Footnote-37757056
Ref: /db/doc-Footnote-38757128
Ref: /db/doc-Footnote-39757201
Ref: /db/doc-Footnote-40757274
Ref: /db/doc-Footnote-41757347
Ref: /db/doc-Footnote-42757420
Ref: /db/doc-Footnote-43757493
Ref: /db/doc-Footnote-44757567
Ref: /db/doc-Footnote-45757639
Ref: /db/doc-Footnote-46757694
Ref: /db/doc-Footnote-47757749
Ref: /db/doc-Footnote-48757820
Ref: /db/doc-Footnote-49757875
Ref: /db/doc-Footnote-50757947
Ref: /db/doc-Footnote-51758019
Ref: /db/doc-Footnote-52758091
Ref: /db/doc-Footnote-53758162
Ref: /db/doc-Footnote-54758235
Ref: /db/doc-Footnote-55758308
Ref: /db/doc-Footnote-56758381
Ref: /db/doc-Footnote-57758454
Ref: /db/doc-Footnote-58758527
Node: Attachments<2>758601
Ref: api/document/common attachments758696
Ref: 3b9758696
Ref: api/document/common api-doc-attachments758696
Ref: 390758696
Node: Basic Attachments Info761032
Ref: api/document/common basic-attachments-info761145
Ref: 3ba761145
Node: Retrieving Attachments Content762711
Ref: api/document/common retrieving-attachments-content762869
Ref: 3bb762869
Ref: api/document/common api-doc-retrieving-deleted-documents762869
Ref: 3b8762869
Node: Efficient Multiple Attachments Retrieving766019
Ref: api/document/common efficient-multiple-attachments-retrieving766128
Ref: 3bc766128
Node: Retrieving Attachments Encoding Info767843
Ref: api/document/common retrieving-attachments-encoding-info768008
Ref: 3bd768008
Node: Creating Multiple Attachments769907
Ref: api/document/common creating-multiple-attachments770033
Ref: 3be770033
Ref: Creating Multiple Attachments-Footnote-1772392
Ref: Creating Multiple Attachments-Footnote-2772463
Node: Getting a List of Revisions772534
Ref: api/document/common getting-a-list-of-revisions772676
Ref: 3bf772676
Node: Obtaining an Extended Revision History774435
Ref: api/document/common obtaining-an-extended-revision-history774592
Ref: 3c0774592
Node: Obtaining a Specific Revision777097
Ref: api/document/common obtaining-a-specific-revision777256
Ref: 3c1777256
Node: Retrieving Deleted Documents778349
Ref: api/document/common retrieving-deleted-documents778444
Ref: 3c2778444
Ref: Retrieving Deleted Documents-Footnote-1779828
Node: Updating an Existing Document779900
Ref: api/document/common updating-an-existing-document780053
Ref: 3c3780053
Node: Copying from a Specific Revision781853
Ref: api/document/common copying-from-a-specific-revision782008
Ref: 3c4782008
Ref: Copying from a Specific Revision-Footnote-1782943
Node: Copying to an Existing Document783014
Ref: api/document/common copying-to-an-existing-document783131
Ref: 3c5783131
Ref: Copying to an Existing Document-Footnote-1784172
Node: /db/doc/attachment784226
Ref: api/document/attachments doc784310
Ref: 3c6784310
Ref: api/document/attachments db-doc-attachment784310
Ref: 3c7784310
Ref: api/document/attachments api-doc-attachment784310
Ref: 3c8784310
Ref: api/document/attachments head--db-docid-attname784367
Ref: 4a784367
Ref: api/document/attachments get--db-docid-attname786769
Ref: 4b786769
Ref: api/document/attachments put--db-docid-attname788666
Ref: 4c788666
Ref: api/document/attachments delete--db-docid-attname792270
Ref: 4d792270
Ref: /db/doc/attachment-Footnote-1795308
Ref: /db/doc/attachment-Footnote-2795379
Ref: /db/doc/attachment-Footnote-3795450
Ref: /db/doc/attachment-Footnote-4795521
Ref: /db/doc/attachment-Footnote-5795591
Ref: /db/doc/attachment-Footnote-6795662
Ref: /db/doc/attachment-Footnote-7795733
Ref: /db/doc/attachment-Footnote-8795804
Ref: /db/doc/attachment-Footnote-9795875
Ref: /db/doc/attachment-Footnote-10795947
Ref: /db/doc/attachment-Footnote-11796020
Ref: /db/doc/attachment-Footnote-12796092
Ref: /db/doc/attachment-Footnote-13796164
Ref: /db/doc/attachment-Footnote-14796237
Ref: /db/doc/attachment-Footnote-15796310
Ref: /db/doc/attachment-Footnote-16796382
Ref: /db/doc/attachment-Footnote-17796454
Ref: /db/doc/attachment-Footnote-18796526
Ref: /db/doc/attachment-Footnote-19796597
Ref: /db/doc/attachment-Footnote-20796669
Ref: /db/doc/attachment-Footnote-21796741
Ref: /db/doc/attachment-Footnote-22796813
Ref: /db/doc/attachment-Footnote-23796885
Ref: /db/doc/attachment-Footnote-24796958
Ref: /db/doc/attachment-Footnote-25797031
Ref: /db/doc/attachment-Footnote-26797103
Ref: /db/doc/attachment-Footnote-27797175
Ref: /db/doc/attachment-Footnote-28797248
Ref: /db/doc/attachment-Footnote-29797321
Ref: /db/doc/attachment-Footnote-30797393
Ref: /db/doc/attachment-Footnote-31797465
Ref: /db/doc/attachment-Footnote-32797537
Ref: /db/doc/attachment-Footnote-33797608
Ref: /db/doc/attachment-Footnote-34797680
Ref: /db/doc/attachment-Footnote-35797752
Ref: /db/doc/attachment-Footnote-36797824
Ref: /db/doc/attachment-Footnote-37797896
Ref: /db/doc/attachment-Footnote-38797969
Ref: /db/doc/attachment-Footnote-39798042
Ref: /db/doc/attachment-Footnote-40798115
Ref: /db/doc/attachment-Footnote-41798188
Ref: /db/doc/attachment-Footnote-42798261
Ref: /db/doc/attachment-Footnote-43798335
Ref: /db/doc/attachment-Footnote-44798407
Ref: /db/doc/attachment-Footnote-45798478
Ref: /db/doc/attachment-Footnote-46798550
Ref: /db/doc/attachment-Footnote-47798622
Ref: /db/doc/attachment-Footnote-48798694
Ref: /db/doc/attachment-Footnote-49798767
Ref: /db/doc/attachment-Footnote-50798840
Ref: /db/doc/attachment-Footnote-51798913
Ref: /db/doc/attachment-Footnote-52798986
Ref: /db/doc/attachment-Footnote-53799059
Ref: /db/doc/attachment-Footnote-54799133
Node: HTTP Range Requests799205
Ref: api/document/attachments api-doc-attachment-range799280
Ref: 3c9799280
Ref: api/document/attachments http-range-requests799280
Ref: 3ca799280
Ref: HTTP Range Requests-Footnote-1801144
Node: Design Documents801205
Ref: api/ddoc/index api-design-docs801336
Ref: 3cb801336
Ref: api/ddoc/index design-documents801336
Ref: 3cc801336
Ref: api/ddoc/index doc801336
Ref: 3cd801336
Node: /db/_design/design-doc802498
Ref: api/ddoc/common api-ddoc802616
Ref: 3ce802616
Ref: api/ddoc/common doc802616
Ref: 3cf802616
Ref: api/ddoc/common db-design-design-doc802616
Ref: 3d0802616
Ref: api/ddoc/common head--db-_design-ddoc802681
Ref: 20802681
Ref: api/ddoc/common get--db-_design-ddoc802888
Ref: 21802888
Ref: api/ddoc/common put--db-_design-ddoc803235
Ref: 22803235
Ref: api/ddoc/common delete--db-_design-ddoc804576
Ref: 23804576
Ref: api/ddoc/common copy--db-_design-ddoc804847
Ref: 24804847
Ref: /db/_design/design-doc-Footnote-1805285
Ref: /db/_design/design-doc-Footnote-2805353
Node: /db/_design/design-doc/attachment805407
Ref: api/ddoc/common api-ddoc-attachment805562
Ref: 3d1805562
Ref: api/ddoc/common db-design-design-doc-attachment805562
Ref: 3d2805562
Ref: api/ddoc/common head--db-_design-ddoc-attname805649
Ref: 33805649
Ref: api/ddoc/common get--db-_design-ddoc-attname805871
Ref: 34805871
Ref: api/ddoc/common put--db-_design-ddoc-attname806160
Ref: 35806160
Ref: api/ddoc/common delete--db-_design-ddoc-attname806423
Ref: 36806423
Node: /db/_design/design-doc/_info806603
Ref: api/ddoc/common api-ddoc-info806774
Ref: 1ea806774
Ref: api/ddoc/common db-design-design-doc-info806774
Ref: 3d3806774
Ref: api/ddoc/common get--db-_design-ddoc-_info806851
Ref: 25806851
Ref: /db/_design/design-doc/_info-Footnote-1808689
Ref: /db/_design/design-doc/_info-Footnote-2808759
Ref: /db/_design/design-doc/_info-Footnote-3808830
Node: View Index Information808902
Ref: api/ddoc/common api-ddoc-view-index-info808990
Ref: 3d4808990
Ref: api/ddoc/common view-index-information808990
Ref: 3d5808990
Node: /db/_design/design-doc/_view/view-name810086
Ref: api/ddoc/views db-design-design-doc-view-view-name810262
Ref: 3d6810262
Ref: api/ddoc/views api-ddoc-view810262
Ref: 2c4810262
Ref: api/ddoc/views doc810262
Ref: 3d7810262
Ref: api/ddoc/views get--db-_design-ddoc-_view-view810359
Ref: 31810359
Ref: api/ddoc/views post--db-_design-ddoc-_view-view816422
Ref: 32816422
Ref: /db/_design/design-doc/_view/view-name-Footnote-1818063
Ref: /db/_design/design-doc/_view/view-name-Footnote-2818133
Ref: /db/_design/design-doc/_view/view-name-Footnote-3818204
Ref: /db/_design/design-doc/_view/view-name-Footnote-4818275
Ref: /db/_design/design-doc/_view/view-name-Footnote-5818346
Ref: /db/_design/design-doc/_view/view-name-Footnote-6818418
Ref: /db/_design/design-doc/_view/view-name-Footnote-7818490
Ref: /db/_design/design-doc/_view/view-name-Footnote-8818562
Ref: /db/_design/design-doc/_view/view-name-Footnote-9818634
Ref: /db/_design/design-doc/_view/view-name-Footnote-10818706
Ref: /db/_design/design-doc/_view/view-name-Footnote-11818775
Node: View Options818844
Ref: api/ddoc/views view-options818967
Ref: 3d8818967
Ref: api/ddoc/views api-ddoc-view-options818967
Ref: 3d9818967
Node: Querying Views and Indexes819853
Ref: api/ddoc/views api-ddoc-view-indexing820006
Ref: 3da820006
Ref: api/ddoc/views querying-views-and-indexes820006
Ref: 3db820006
Node: Sorting Returned Rows824381
Ref: api/ddoc/views api-ddoc-view-sorting824552
Ref: 3dc824552
Ref: api/ddoc/views sorting-returned-rows824552
Ref: 3dd824552
Node: Sorting order and startkey/endkey830830
Ref: api/ddoc/views sorting-order-and-startkey-endkey830947
Ref: 3de830947
Node: Raw collation<2>832368
Ref: api/ddoc/views api-ddoc-view-sorting-raw832485
Ref: 3df832485
Ref: api/ddoc/views raw-collation832485
Ref: 3e0832485
Ref: Raw collation<2>-Footnote-1832974
Node: Using Limits and Skipping Rows833010
Ref: api/ddoc/views api-ddoc-view-limiting833146
Ref: 3e1833146
Ref: api/ddoc/views using-limits-and-skipping-rows833146
Ref: 3e2833146
Node: /db/_design/design-doc/_show/show-name836779
Ref: api/ddoc/render db-design-design-doc-show-show-name836972
Ref: 3e3836972
Ref: api/ddoc/render api-ddoc-show836972
Ref: 3e4836972
Ref: api/ddoc/render doc836972
Ref: 3e5836972
Ref: api/ddoc/render get--db-_design-ddoc-_show-func837069
Ref: 2b837069
Ref: api/ddoc/render post--db-_design-ddoc-_show-func837117
Ref: 2c837117
Ref: /db/_design/design-doc/_show/show-name-Footnote-1838610
Ref: /db/_design/design-doc/_show/show-name-Footnote-2838681
Ref: /db/_design/design-doc/_show/show-name-Footnote-3838753
Node: /db/_design/design-doc/_show/show-name/doc-id838825
Ref: api/ddoc/render db-design-design-doc-show-show-name-doc-id839028
Ref: 3e6839028
Ref: api/ddoc/render api-ddoc-show-id839028
Ref: 3e7839028
Ref: api/ddoc/render get--db-_design-ddoc-_show-func-docid839139
Ref: 2d839139
Ref: api/ddoc/render post--db-_design-ddoc-_show-func-docid839195
Ref: 2e839195
Ref: /db/_design/design-doc/_show/show-name/doc-id-Footnote-1840847
Ref: /db/_design/design-doc/_show/show-name/doc-id-Footnote-2840918
Ref: /db/_design/design-doc/_show/show-name/doc-id-Footnote-3840990
Node: /db/_design/design-doc/_list/list-name/view-name841062
Ref: api/ddoc/render api-ddoc-list841286
Ref: 3e8841286
Ref: api/ddoc/render db-design-design-doc-list-list-name-view-name841286
Ref: 3e9841286
Ref: api/ddoc/render get--db-_design-ddoc-_list-func-view841403
Ref: 28841403
Ref: api/ddoc/render post--db-_design-ddoc-_list-func-view841458
Ref: 29841458
Ref: /db/_design/design-doc/_list/list-name/view-name-Footnote-1843112
Ref: /db/_design/design-doc/_list/list-name/view-name-Footnote-2843183
Ref: /db/_design/design-doc/_list/list-name/view-name-Footnote-3843254
Ref: /db/_design/design-doc/_list/list-name/view-name-Footnote-4843326
Node: /db/_design/design-doc/_list/list-name/other-ddoc/view-name843398
Ref: api/ddoc/render db-design-design-doc-list-list-name-other-ddoc-view-name843619
Ref: 3ea843619
Ref: api/ddoc/render api-ddoc-list-ddoc843619
Ref: 3eb843619
Ref: api/ddoc/render get--db-_design-ddoc-_list-func-other-ddoc-view843758
Ref: 26843758
Ref: api/ddoc/render post--db-_design-ddoc-_list-func-other-ddoc-view843826
Ref: 27843826
Ref: /db/_design/design-doc/_list/list-name/other-ddoc/view-name-Footnote-1845600
Ref: /db/_design/design-doc/_list/list-name/other-ddoc/view-name-Footnote-2845671
Ref: /db/_design/design-doc/_list/list-name/other-ddoc/view-name-Footnote-3845742
Ref: /db/_design/design-doc/_list/list-name/other-ddoc/view-name-Footnote-4845814
Node: /db/_design/design-doc/_update/update-name845886
Ref: api/ddoc/render api-ddoc-update846108
Ref: 3ec846108
Ref: api/ddoc/render db-design-design-doc-update-update-name846108
Ref: 3ed846108
Ref: api/ddoc/render post--db-_design-ddoc-_update-func846213
Ref: 2f846213
Ref: /db/_design/design-doc/_update/update-name-Footnote-1847913
Ref: /db/_design/design-doc/_update/update-name-Footnote-2847985
Ref: /db/_design/design-doc/_update/update-name-Footnote-3848057
Node: /db/_design/design-doc/_update/update-name/doc-id848129
Ref: api/ddoc/render api-ddoc-update-id848328
Ref: 3ee848328
Ref: api/ddoc/render db-design-design-doc-update-update-name-doc-id848328
Ref: 3ef848328
Ref: api/ddoc/render put--db-_design-ddoc-_update-func-docid848449
Ref: 30848449
Ref: /db/_design/design-doc/_update/update-name/doc-id-Footnote-1850269
Ref: /db/_design/design-doc/_update/update-name/doc-id-Footnote-2850341
Ref: /db/_design/design-doc/_update/update-name/doc-id-Footnote-3850413
Node: /db/_design/design-doc/_rewrite/path850485
Ref: api/ddoc/rewrites api-ddoc-rewrite850633
Ref: 1d6850633
Ref: api/ddoc/rewrites db-design-design-doc-rewrite-path850633
Ref: 3f0850633
Ref: api/ddoc/rewrites doc850633
Ref: 3f1850633
Ref: api/ddoc/rewrites any--db-_design-ddoc-_rewrite-path850728
Ref: 2a850728
Ref: /db/_design/design-doc/_rewrite/path-Footnote-1854134
Node: Local non-replicating Documents854206
Ref: api/local api-local854316
Ref: 1f9854316
Ref: api/local doc854316
Ref: 3f2854316
Ref: api/local local-non-replicating-documents854316
Ref: 3f3854316
Node: /db/_local/id855841
Ref: api/local db-local-id855923
Ref: 3f4855923
Ref: api/local api-local-doc855923
Ref: 3f5855923
Ref: api/local get--db-_local-docid855970
Ref: 38855970
Ref: api/local put--db-_local-docid856225
Ref: 39856225
Ref: api/local delete--db-_local-docid856475
Ref: 3a856475
Ref: api/local copy--db-_local-docid856741
Ref: 3b856741
Node: JSON Structure Reference856994
Ref: json-structure json-structure-reference857114
Ref: 3f6857114
Ref: json-structure doc857114
Ref: 3f7857114
Node: All Database Documents857929
Ref: json-structure all-database-documents858044
Ref: 3f8858044
Node: Bulk Document Response858534
Ref: json-structure bulk-document-response858672
Ref: 3f9858672
Node: Bulk Documents859102
Ref: json-structure bulk-documents859252
Ref: 3fa859252
Node: Changes information for a database859840
Ref: json-structure changes-information-for-a-database859984
Ref: 3fb859984
Node: CouchDB Document860567
Ref: json-structure couchdb-document860717
Ref: 3fc860717
Node: CouchDB Error Status861036
Ref: json-structure couchdb-error-status861187
Ref: 3fd861187
Node: CouchDB database information object861547
Ref: json-structure couchdb-database-information-object861697
Ref: 3fe861697
Ref: json-structure dbinfo-object861697
Ref: 28b861697
Node: Design Document863096
Ref: json-structure design-document863253
Ref: 3ff863253
Node: Design Document Information863769
Ref: json-structure design-document-information863916
Ref: 400863916
Node: Document with Attachments865268
Ref: json-structure document-with-attachments865420
Ref: 401865420
Node: List of Active Tasks866015
Ref: json-structure list-of-active-tasks866160
Ref: 402866160
Node: Replication Settings866608
Ref: json-structure replication-settings866746
Ref: 230866746
Ref: json-structure id1866746
Ref: 403866746
Node: Replication Status868104
Ref: json-structure replication-status868236
Ref: 231868236
Ref: json-structure id2868236
Ref: 404868236
Node: Request object869526
Ref: json-structure id3869653
Ref: 405869653
Ref: json-structure request-object869653
Ref: 28c869653
Node: Response object874253
Ref: json-structure response-object874415
Ref: 28d874415
Ref: json-structure id4874415
Ref: 406874415
Node: Returned CouchDB Document with Detailed Revision Info876082
Ref: json-structure returned-couchdb-document-with-detailed-revision-info876274
Ref: 407876274
Node: Returned CouchDB Document with Revision Info876864
Ref: json-structure returned-couchdb-document-with-revision-info877075
Ref: 408877075
Node: Returned Document with Attachments877726
Ref: json-structure returned-document-with-attachments877899
Ref: 409877899
Node: Security Object878653
Ref: json-structure id5878801
Ref: 40a878801
Ref: json-structure security-object878801
Ref: 28e878801
Node: User Context Object879692
Ref: json-structure user-context-object879827
Ref: 40b879827
Ref: json-structure userctx-object879827
Ref: 1dd879827
Node: View Head Information880365
Ref: json-structure view-head-info-object880476
Ref: 29c880476
Ref: json-structure view-head-information880476
Ref: 40c880476
Node: Experimental Features880877
Ref: experimental doc881015
Ref: 40d881015
Ref: experimental experimental881015
Ref: 40e881015
Ref: experimental experimental-features881015
Ref: 40f881015
Node: NodeJS Query Server881537
Ref: experimental nodejs-query-server881631
Ref: 410881631
Node: Setup<2>881945
Ref: experimental setup882065
Ref: 411882065
Ref: Setup<2>-Footnote-1882966
Node: Differences from the SpiderMonkey Query Server883001
Ref: experimental differences-from-the-spidermonkey-query-server883121
Ref: 412883121
Node: Plugins883392
Ref: experimental plugins883486
Ref: 413883486
Node: Contributing to this Documentation883549
Ref: contributing contributing883678
Ref: 414883678
Ref: contributing contributing-to-this-documentation883678
Ref: 415883678
Ref: contributing doc883678
Ref: 416883678
Ref: Contributing to this Documentation-Footnote-1888469
Node: Release History888530
Ref: whatsnew/index doc888665
Ref: 417888665
Ref: whatsnew/index releases888665
Ref: 418888665
Ref: whatsnew/index release-history888665
Ref: 419888665
Node: 1 6 x Branch896067
Ref: whatsnew/1 6 doc896153
Ref: 41a896153
Ref: whatsnew/1 6 x-branch896153
Ref: 41b896153
Ref: whatsnew/1 6 release-1-6-x896153
Ref: 41c896153
Node: Upgrade Notes896250
Ref: whatsnew/1 6 release-1-6-x-upgrade896335
Ref: 41d896335
Ref: whatsnew/1 6 upgrade-notes896335
Ref: 41e896335
Node: Version 1 6 0896786
Ref: whatsnew/1 6 version-1-6-0896871
Ref: 41f896871
Ref: whatsnew/1 6 release-1-6-0896871
Ref: 420896871
Ref: Version 1 6 0-Footnote-1899706
Ref: Version 1 6 0-Footnote-2899764
Ref: Version 1 6 0-Footnote-3899845
Ref: Version 1 6 0-Footnote-4899903
Ref: Version 1 6 0-Footnote-5899984
Ref: Version 1 6 0-Footnote-6900042
Ref: Version 1 6 0-Footnote-7900123
Ref: Version 1 6 0-Footnote-8900181
Ref: Version 1 6 0-Footnote-9900262
Ref: Version 1 6 0-Footnote-10900320
Ref: Version 1 6 0-Footnote-11900402
Ref: Version 1 6 0-Footnote-12900461
Ref: Version 1 6 0-Footnote-13900543
Ref: Version 1 6 0-Footnote-14900602
Ref: Version 1 6 0-Footnote-15900684
Ref: Version 1 6 0-Footnote-16900766
Ref: Version 1 6 0-Footnote-17900825
Ref: Version 1 6 0-Footnote-18900906
Ref: Version 1 6 0-Footnote-19900965
Ref: Version 1 6 0-Footnote-20901047
Ref: Version 1 6 0-Footnote-21901106
Ref: Version 1 6 0-Footnote-22901188
Ref: Version 1 6 0-Footnote-23901247
Ref: Version 1 6 0-Footnote-24901329
Ref: Version 1 6 0-Footnote-25901388
Ref: Version 1 6 0-Footnote-26901470
Ref: Version 1 6 0-Footnote-27901529
Ref: Version 1 6 0-Footnote-28901611
Ref: Version 1 6 0-Footnote-29901693
Ref: Version 1 6 0-Footnote-30901752
Ref: Version 1 6 0-Footnote-31901834
Ref: Version 1 6 0-Footnote-32901893
Ref: Version 1 6 0-Footnote-33901975
Ref: Version 1 6 0-Footnote-34902034
Ref: Version 1 6 0-Footnote-35902116
Ref: Version 1 6 0-Footnote-36902175
Ref: Version 1 6 0-Footnote-37902257
Ref: Version 1 6 0-Footnote-38902316
Node: 1 5 x Branch902398
Ref: whatsnew/1 5 doc902505
Ref: 422902505
Ref: whatsnew/1 5 release-1-5-x902505
Ref: 423902505
Ref: whatsnew/1 5 x-branch902505
Ref: 424902505
Node: Version 1 5 1902767
Ref: whatsnew/1 5 release-1-5-1902852
Ref: 425902852
Ref: whatsnew/1 5 version-1-5-1902852
Ref: 426902852
Node: Version 1 5 0903129
Ref: whatsnew/1 5 release-1-5-0903214
Ref: 427903214
Ref: whatsnew/1 5 version-1-5-0903214
Ref: 428903214
Ref: Version 1 5 0-Footnote-1904503
Ref: Version 1 5 0-Footnote-2904561
Ref: Version 1 5 0-Footnote-3904641
Ref: Version 1 5 0-Footnote-4904699
Ref: Version 1 5 0-Footnote-5904779
Ref: Version 1 5 0-Footnote-6904859
Ref: Version 1 5 0-Footnote-7904917
Ref: Version 1 5 0-Footnote-8904975
Ref: Version 1 5 0-Footnote-9905033
Node: 1 4 x Branch905113
Ref: whatsnew/1 4 release-1-4-x905220
Ref: 429905220
Ref: whatsnew/1 4 doc905220
Ref: 42a905220
Ref: whatsnew/1 4 x-branch905220
Ref: 42b905220
Node: Upgrade Notes<2>905583
Ref: whatsnew/1 4 upgrade-notes905671
Ref: 42c905671
Ref: whatsnew/1 4 release-1-4-x-upgrade905671
Ref: 42d905671
Node: Version 1 4 0905915
Ref: whatsnew/1 4 release-1-4-0906003
Ref: 42e906003
Ref: whatsnew/1 4 version-1-4-0906003
Ref: 42f906003
Ref: Version 1 4 0-Footnote-1907274
Ref: Version 1 4 0-Footnote-2907332
Ref: Version 1 4 0-Footnote-3907413
Ref: Version 1 4 0-Footnote-4907471
Ref: Version 1 4 0-Footnote-5907552
Ref: Version 1 4 0-Footnote-6907610
Ref: Version 1 4 0-Footnote-7907691
Ref: Version 1 4 0-Footnote-8907749
Ref: Version 1 4 0-Footnote-9907830
Ref: Version 1 4 0-Footnote-10907888
Ref: Version 1 4 0-Footnote-11907970
Ref: Version 1 4 0-Footnote-12908052
Ref: Version 1 4 0-Footnote-13908111
Ref: Version 1 4 0-Footnote-14908193
Ref: Version 1 4 0-Footnote-15908275
Ref: Version 1 4 0-Footnote-16908357
Node: 1 3 x Branch908439
Ref: whatsnew/1 3 doc908546
Ref: 430908546
Ref: whatsnew/1 3 x-branch908546
Ref: 431908546
Ref: whatsnew/1 3 release-1-3-x908546
Ref: 432908546
Node: Upgrade Notes<3>908941
Ref: whatsnew/1 3 release-1-3-x-upgrade909029
Ref: 433909029
Ref: whatsnew/1 3 upgrade-notes909029
Ref: 434909029
Node: Version 1 3 1909847
Ref: whatsnew/1 3 version-1-3-1909957
Ref: 435909957
Ref: whatsnew/1 3 release-1-3-1909957
Ref: 436909957
Node: Replicator<2>910088
Ref: whatsnew/1 3 replicator910171
Ref: 437910171
Ref: Replicator<2>-Footnote-1910352
Ref: Replicator<2>-Footnote-2910410
Node: Log System910491
Ref: whatsnew/1 3 log-system910594
Ref: 438910594
Ref: Log System-Footnote-1910794
Ref: Log System-Footnote-2910852
Node: View Server910933
Ref: whatsnew/1 3 view-server911036
Ref: 439911036
Ref: View Server-Footnote-1911212
Ref: View Server-Footnote-2911270
Node: Miscellaneous911351
Ref: whatsnew/1 3 miscellaneous911435
Ref: 43a911435
Ref: Miscellaneous-Footnote-1911697
Ref: Miscellaneous-Footnote-2911755
Node: Version 1 3 0911836
Ref: whatsnew/1 3 version-1-3-0911921
Ref: 43b911921
Ref: whatsnew/1 3 release-1-3-0911921
Ref: 16a911921
Node: Database core912262
Ref: whatsnew/1 3 database-core912348
Ref: 43c912348
Ref: Database core-Footnote-1912571
Ref: Database core-Footnote-2912629
Ref: Database core-Footnote-3912710
Node: Documentation912791
Ref: whatsnew/1 3 documentation912891
Ref: 43d912891
Ref: Documentation-Footnote-1913069
Ref: Documentation-Footnote-2913127
Node: Futon913159
Ref: whatsnew/1 3 futon913260
Ref: 43e913260
Ref: Futon-Footnote-1913820
Ref: Futon-Footnote-2913877
Ref: Futon-Footnote-3913958
Ref: Futon-Footnote-4914015
Ref: Futon-Footnote-5914096
Ref: Futon-Footnote-6914154
Ref: Futon-Footnote-7914234
Ref: Futon-Footnote-8914292
Ref: Futon-Footnote-9914373
Ref: Futon-Footnote-10914431
Ref: Futon-Footnote-11914490
Node: HTTP Interface914572
Ref: whatsnew/1 3 http-interface914673
Ref: 43f914673
Ref: HTTP Interface-Footnote-1917709
Ref: HTTP Interface-Footnote-2917766
Ref: HTTP Interface-Footnote-3917847
Ref: HTTP Interface-Footnote-4917904
Ref: HTTP Interface-Footnote-5917961
Ref: HTTP Interface-Footnote-6918018
Ref: HTTP Interface-Footnote-7918101
Ref: HTTP Interface-Footnote-8918158
Ref: HTTP Interface-Footnote-9918308
Ref: HTTP Interface-Footnote-10918389
Ref: HTTP Interface-Footnote-11918447
Ref: HTTP Interface-Footnote-12918529
Ref: HTTP Interface-Footnote-13918588
Ref: HTTP Interface-Footnote-14918670
Ref: HTTP Interface-Footnote-15918729
Ref: HTTP Interface-Footnote-16918811
Ref: HTTP Interface-Footnote-17918870
Ref: HTTP Interface-Footnote-18918952
Ref: HTTP Interface-Footnote-19919011
Ref: HTTP Interface-Footnote-20919093
Ref: HTTP Interface-Footnote-21919152
Ref: HTTP Interface-Footnote-22919234
Ref: HTTP Interface-Footnote-23919293
Ref: HTTP Interface-Footnote-24919375
Ref: HTTP Interface-Footnote-25919434
Ref: HTTP Interface-Footnote-26919516
Ref: HTTP Interface-Footnote-27919575
Ref: HTTP Interface-Footnote-28919657
Ref: HTTP Interface-Footnote-29919716
Ref: HTTP Interface-Footnote-30919798
Ref: HTTP Interface-Footnote-31919857
Ref: HTTP Interface-Footnote-32919939
Ref: HTTP Interface-Footnote-33919998
Ref: HTTP Interface-Footnote-34920080
Ref: HTTP Interface-Footnote-35920139
Ref: HTTP Interface-Footnote-36920223
Ref: HTTP Interface-Footnote-37920282
Ref: HTTP Interface-Footnote-38920364
Ref: HTTP Interface-Footnote-39920423
Ref: HTTP Interface-Footnote-40920505
Ref: HTTP Interface-Footnote-41920587
Ref: HTTP Interface-Footnote-42920669
Ref: HTTP Interface-Footnote-43920753
Ref: HTTP Interface-Footnote-44920837
Ref: HTTP Interface-Footnote-45920919
Ref: HTTP Interface-Footnote-46921003
Node: Log System<2>921087
Ref: whatsnew/1 3 id1921196
Ref: 440921196
Ref: Log System<2>-Footnote-1921597
Ref: Log System<2>-Footnote-2921655
Ref: Log System<2>-Footnote-3921736
Ref: Log System<2>-Footnote-4921819
Ref: Log System<2>-Footnote-5921900
Node: Replicator<3>921983
Ref: whatsnew/1 3 id2922089
Ref: 441922089
Ref: Replicator<3>-Footnote-1922736
Ref: Replicator<3>-Footnote-2922794
Ref: Replicator<3>-Footnote-3922875
Ref: Replicator<3>-Footnote-4922933
Ref: Replicator<3>-Footnote-5923016
Ref: Replicator<3>-Footnote-6923074
Ref: Replicator<3>-Footnote-7923155
Ref: Replicator<3>-Footnote-8923213
Ref: Replicator<3>-Footnote-9923294
Node: Security<2>923352
Ref: whatsnew/1 3 security923462
Ref: 442923462
Ref: Security<2>-Footnote-1923660
Ref: Security<2>-Footnote-2923718
Node: Source Repository923799
Ref: whatsnew/1 3 source-repository923910
Ref: 443923910
Ref: Source Repository-Footnote-1924064
Ref: Source Repository-Footnote-2924112
Node: Storage System924171
Ref: whatsnew/1 3 storage-system924281
Ref: 444924281
Ref: whatsnew/1 3 git924281
Ref: 445924281
Node: Test Suite924425
Ref: whatsnew/1 3 test-suite924539
Ref: 446924539
Ref: Test Suite-Footnote-1925258
Ref: Test Suite-Footnote-2925316
Ref: Test Suite-Footnote-3925374
Ref: Test Suite-Footnote-4925454
Ref: Test Suite-Footnote-5925512
Ref: Test Suite-Footnote-6925592
Ref: Test Suite-Footnote-7925650
Ref: Test Suite-Footnote-8925708
Node: URL Rewriter & Vhosts925790
Ref: whatsnew/1 3 url-rewriter-vhosts925905
Ref: 447925905
Ref: URL Rewriter & Vhosts-Footnote-1926118
Ref: URL Rewriter & Vhosts-Footnote-2926176
Node: UUID Algorithms926257
Ref: whatsnew/1 3 uuid-algorithms926383
Ref: 448926383
Ref: UUID Algorithms-Footnote-1926534
Ref: UUID Algorithms-Footnote-2926592
Node: Query and View Server926673
Ref: whatsnew/1 3 query-and-view-server926785
Ref: 449926785
Ref: Query and View Server-Footnote-1927696
Ref: Query and View Server-Footnote-2927753
Ref: Query and View Server-Footnote-3927833
Ref: Query and View Server-Footnote-4927890
Ref: Query and View Server-Footnote-5927948
Ref: Query and View Server-Footnote-6928006
Ref: Query and View Server-Footnote-7928087
Ref: Query and View Server-Footnote-8928145
Ref: Query and View Server-Footnote-9928203
Ref: Query and View Server-Footnote-10928284
Ref: Query and View Server-Footnote-11928343
Ref: Query and View Server-Footnote-12928425
Node: Windows928509
Ref: whatsnew/1 3 windows928597
Ref: 44a928597
Ref: Windows-Footnote-1928843
Ref: Windows-Footnote-2928901
Ref: Windows-Footnote-3928982
Node: 1 2 x Branch929065
Ref: whatsnew/1 2 release-1-2-x929172
Ref: 44b929172
Ref: whatsnew/1 2 doc929172
Ref: 44c929172
Ref: whatsnew/1 2 x-branch929172
Ref: 44d929172
Node: Upgrade Notes<4>929923
Ref: whatsnew/1 2 release-1-2-x-upgrade930011
Ref: 44e930011
Ref: whatsnew/1 2 upgrade-notes930011
Ref: 44f930011
Node: Security changes930508
Ref: whatsnew/1 2 security-changes930607
Ref: 451930607
Node: Database Compression931620
Ref: whatsnew/1 2 database-compression931719
Ref: 452931719
Node: Version 1 2 2932290
Ref: whatsnew/1 2 release-1-2-2932400
Ref: 453932400
Ref: whatsnew/1 2 version-1-2-2932400
Ref: 454932400
Node: Build System932507
Ref: whatsnew/1 2 build-system932596
Ref: 455932596
Node: HTTP Interface<2>932735
Ref: whatsnew/1 2 http-interface932824
Ref: 456932824
Node: Version 1 2 1932996
Ref: whatsnew/1 2 version-1-2-1933103
Ref: 457933103
Ref: whatsnew/1 2 release-1-2-1933103
Ref: 450933103
Node: Build System<2>933332
Ref: whatsnew/1 2 id1933415
Ref: 458933415
Node: Futon<2>933527
Ref: whatsnew/1 2 futon933636
Ref: 459933636
Node: HTTP Interface<3>933735
Ref: whatsnew/1 2 id2933840
Ref: 45a933840
Node: Security<3>934106
Ref: whatsnew/1 2 security934217
Ref: 45b934217
Node: Replication<3>934546
Ref: whatsnew/1 2 replication934654
Ref: 45f934654
Node: View Server<2>934727
Ref: whatsnew/1 2 view-server934815
Ref: 460934815
Node: Version 1 2 0934915
Ref: whatsnew/1 2 version-1-2-0935000
Ref: 461935000
Ref: whatsnew/1 2 release-1-2-0935000
Ref: 462935000
Node: Authentication<3>935286
Ref: whatsnew/1 2 authentication935378
Ref: 463935378
Node: Build System<3>936246
Ref: whatsnew/1 2 id3936355
Ref: 464936355
Ref: Build System<3>-Footnote-1936871
Node: Futon<3>936929
Ref: whatsnew/1 2 id4937038
Ref: 465937038
Node: HTTP Interface<4>937299
Ref: whatsnew/1 2 id5937398
Ref: 466937398
Node: OAuth937912
Ref: whatsnew/1 2 oauth938016
Ref: 467938016
Node: Replicator<4>938115
Ref: whatsnew/1 2 replicator938219
Ref: 468938219
Node: Storage System<2>938894
Ref: whatsnew/1 2 storage-system939007
Ref: 469939007
Node: View Server<3>940077
Ref: whatsnew/1 2 id6940168
Ref: 46a940168
Node: 1 1 x Branch940621
Ref: whatsnew/1 1 release-1-1-x940728
Ref: 46b940728
Ref: whatsnew/1 1 doc940728
Ref: 46c940728
Ref: whatsnew/1 1 x-branch940728
Ref: 46d940728
Node: Upgrade Notes<5>940906
Ref: whatsnew/1 1 upgrade-notes940994
Ref: 46e940994
Ref: whatsnew/1 1 release-1-1-x-upgrade940994
Ref: 46f940994
Node: Version 1 1 2941188
Ref: whatsnew/1 1 version-1-1-2941298
Ref: 471941298
Ref: whatsnew/1 1 release-1-1-2941298
Ref: 470941298
Node: Build System<4>941535
Ref: whatsnew/1 1 build-system941627
Ref: 472941627
Node: HTTP Interface<5>941823
Ref: whatsnew/1 1 http-interface941937
Ref: 473941937
Node: Log System<3>942218
Ref: whatsnew/1 1 log-system942330
Ref: 474942330
Node: Replicator<5>942431
Ref: whatsnew/1 1 replicator942537
Ref: 475942537
Node: Security<4>942710
Ref: whatsnew/1 1 security942817
Ref: 476942817
Node: View Server<4>943146
Ref: whatsnew/1 1 view-server943231
Ref: 477943231
Node: Version 1 1 1943355
Ref: whatsnew/1 1 release-1-1-1943462
Ref: 478943462
Ref: whatsnew/1 1 version-1-1-1943462
Ref: 479943462
Node: Version 1 1 0944958
Ref: whatsnew/1 1 release-1-1-0945043
Ref: 16d945043
Ref: whatsnew/1 1 version-1-1-0945043
Ref: 47a945043
Node: Externals945379
Ref: whatsnew/1 1 externals945456
Ref: 47b945456
Node: Futon<4>945623
Ref: whatsnew/1 1 futon945726
Ref: 47c945726
Node: HTTP Interface<6>945807
Ref: whatsnew/1 1 id1945914
Ref: 47d945914
Node: Replicator<6>946558
Ref: whatsnew/1 1 id2946674
Ref: 47e946674
Node: Storage System<3>947064
Ref: whatsnew/1 1 storage-system947187
Ref: 47f947187
Node: URL Rewriter & Vhosts<2>947290
Ref: whatsnew/1 1 url-rewriter-vhosts947414
Ref: 480947414
Node: View Server<5>947512
Ref: whatsnew/1 1 id3947610
Ref: 481947610
Node: 1 0 x Branch948068
Ref: whatsnew/1 0 release-1-0-x948176
Ref: 482948176
Ref: whatsnew/1 0 doc948176
Ref: 483948176
Ref: whatsnew/1 0 x-branch948176
Ref: 484948176
Node: Upgrade Notes<6>948418
Ref: whatsnew/1 0 release-1-0-x-upgrade948506
Ref: 485948506
Ref: whatsnew/1 0 upgrade-notes948506
Ref: 486948506
Node: Version 1 0 4949566
Ref: whatsnew/1 0 release-1-0-4949676
Ref: 487949676
Ref: whatsnew/1 0 version-1-0-4949676
Ref: 488949676
Node: HTTP Interface<7>949865
Ref: whatsnew/1 0 http-interface949955
Ref: 489949955
Node: Log System<4>950104
Ref: whatsnew/1 0 log-system950216
Ref: 48a950216
Node: Replicator<7>950299
Ref: whatsnew/1 0 replicator950405
Ref: 48b950405
Node: Security<5>950505
Ref: whatsnew/1 0 security950609
Ref: 48c950609
Node: View System950938
Ref: whatsnew/1 0 view-system951020
Ref: 48d951020
Node: Version 1 0 3951144
Ref: whatsnew/1 0 version-1-0-3951251
Ref: 48e951251
Ref: whatsnew/1 0 release-1-0-3951251
Ref: 48f951251
Node: General951506
Ref: whatsnew/1 0 general951588
Ref: 490951588
Node: Etap Test Suite951676
Ref: whatsnew/1 0 etap-test-suite951775
Ref: 491951775
Node: Futon<5>951966
Ref: whatsnew/1 0 futon952075
Ref: 492952075
Node: HTTP Interface<8>952147
Ref: whatsnew/1 0 id1952254
Ref: 493952254
Node: Replicator<8>952578
Ref: whatsnew/1 0 id2952688
Ref: 494952688
Node: Security<6>952988
Ref: whatsnew/1 0 id3953098
Ref: 495953098
Node: Storage System<4>953229
Ref: whatsnew/1 0 storage-system953336
Ref: 496953336
Node: Windows<2>953492
Ref: whatsnew/1 0 windows953579
Ref: 497953579
Ref: Windows<2>-Footnote-1953800
Ref: Windows<2>-Footnote-2953858
Node: Version 1 0 2953915
Ref: whatsnew/1 0 version-1-0-2954022
Ref: 498954022
Ref: whatsnew/1 0 release-1-0-2954022
Ref: 499954022
Node: Futon<6>954257
Ref: whatsnew/1 0 id4954342
Ref: 49a954342
Node: HTTP Interface<9>954582
Ref: whatsnew/1 0 id5954689
Ref: 49b954689
Ref: HTTP Interface<9>-Footnote-1955000
Node: Log System<5>955058
Ref: whatsnew/1 0 id6955170
Ref: 49c955170
Node: Replicator<9>955289
Ref: whatsnew/1 0 id7955401
Ref: 49d955401
Node: Storage System<5>955847
Ref: whatsnew/1 0 id8955960
Ref: 49e955960
Ref: Storage System<5>-Footnote-1957120
Ref: Storage System<5>-Footnote-2957177
Node: View Server<6>957234
Ref: whatsnew/1 0 view-server957325
Ref: 49f957325
Ref: View Server<6>-Footnote-1957907
Node: Version 1 0 1957964
Ref: whatsnew/1 0 release-1-0-1958071
Ref: 4a0958071
Ref: whatsnew/1 0 version-1-0-1958071
Ref: 4a1958071
Node: Authentication<4>958318
Ref: whatsnew/1 0 authentication958423
Ref: 4a2958423
Node: Build and System Integration958595
Ref: whatsnew/1 0 build-and-system-integration958717
Ref: 4a3958717
Node: Futon<7>958851
Ref: whatsnew/1 0 id9958974
Ref: 4a4958974
Node: HTTP Interface<10>959069
Ref: whatsnew/1 0 id10959178
Ref: 4a5959178
Node: Replicator<10>959418
Ref: whatsnew/1 0 id11959536
Ref: 4a6959536
Node: Storage System<6>959760
Ref: whatsnew/1 0 id12959851
Ref: 4a7959851
Ref: Storage System<6>-Footnote-1960056
Node: Version 1 0 0960113
Ref: whatsnew/1 0 release-1-0-0960198
Ref: 4a8960198
Ref: whatsnew/1 0 version-1-0-0960198
Ref: 4a9960198
Node: Security<7>960344
Ref: whatsnew/1 0 id13960432
Ref: 4aa960432
Node: Storage System<7>960618
Ref: whatsnew/1 0 id14960729
Ref: 4ab960729
Node: View Server<7>961006
Ref: whatsnew/1 0 id15961097
Ref: 4ac961097
Node: 0 11 x Branch961237
Ref: whatsnew/0 11 release-0-11-x961346
Ref: 4ad961346
Ref: whatsnew/0 11 doc961346
Ref: 4ae961346
Ref: whatsnew/0 11 x-branch961346
Ref: 4af961346
Node: Upgrade Notes<7>962822
Ref: whatsnew/0 11 release-0-11-x-upgrade962912
Ref: 4b0962912
Ref: whatsnew/0 11 upgrade-notes962912
Ref: 4b1962912
Node: Changes Between 0 11 0 and 0 11 1963262
Ref: whatsnew/0 11 changes-between-0-11-0-and-0-11-1963391
Ref: 4b3963391
Node: Changes Between 0 10 x and 0 11 0964061
Ref: whatsnew/0 11 changes-between-0-10-x-and-0-11-0964190
Ref: 4b4964190
Node: show list update and validation functions964515
Ref: whatsnew/0 11 show-list-update-and-validation-functions964656
Ref: 4b5964656
Ref: show list update and validation functions-Footnote-1965048
Node: _admins -> _security965095
Ref: whatsnew/0 11 admins-security965253
Ref: 4b6965253
Node: json2 js965963
Ref: whatsnew/0 11 json2-js966096
Ref: 4b7966096
Ref: json2 js-Footnote-1966796
Ref: json2 js-Footnote-2966868
Node: WWW-Authenticate966949
Ref: whatsnew/0 11 www-authenticate967088
Ref: 4b8967088
Ref: whatsnew/0 11 id1967088
Ref: 4b9967088
Node: Query server line protocol967373
Ref: whatsnew/0 11 query-server-line-protocol967513
Ref: 4ba967513
Node: UTF8 JSON968005
Ref: whatsnew/0 11 utf8-json968149
Ref: 4bb968149
Node: _changes line format968311
Ref: whatsnew/0 11 changes-line-format968420
Ref: 4bc968420
Node: Version 0 11 2968577
Ref: whatsnew/0 11 release-0-11-2968690
Ref: 4b2968690
Ref: whatsnew/0 11 version-0-11-2968690
Ref: 4bd968690
Node: Authentication<5>968894
Ref: whatsnew/0 11 authentication968980
Ref: 4be968980
Node: Futon<8>969092
Ref: whatsnew/0 11 futon969205
Ref: 4bf969205
Node: HTTP Interface<11>969300
Ref: whatsnew/0 11 http-interface969410
Ref: 4c0969410
Node: Replicator<11>969512
Ref: whatsnew/0 11 replicator969625
Ref: 4c1969625
Node: Security<8>969867
Ref: whatsnew/0 11 security969953
Ref: 4c2969953
Node: Version 0 11 1970151
Ref: whatsnew/0 11 version-0-11-1970262
Ref: 4c4970262
Ref: whatsnew/0 11 release-0-11-1970262
Ref: 4c5970262
Node: Build and System Integration<2>970712
Ref: whatsnew/0 11 build-and-system-integration970824
Ref: 4c6970824
Node: Configuration System971183
Ref: whatsnew/0 11 configuration-system971312
Ref: 4c7971312
Node: Futon<9>971416
Ref: whatsnew/0 11 id2971532
Ref: 4c8971532
Node: HTTP Interface<12>971923
Ref: whatsnew/0 11 id3972037
Ref: 4c9972037
Node: JavaScript Clients972545
Ref: whatsnew/0 11 javascript-clients972664
Ref: 4ca972664
Node: Log System<6>973216
Ref: whatsnew/0 11 log-system973335
Ref: 4cb973335
Node: Replication System973499
Ref: whatsnew/0 11 replication-system973611
Ref: 4cc973611
Node: Security<9>973802
Ref: whatsnew/0 11 id4973918
Ref: 4cd973918
Node: Storage System<8>974170
Ref: whatsnew/0 11 storage-system974281
Ref: 4ce974281
Node: Test Suite<2>974767
Ref: whatsnew/0 11 test-suite974881
Ref: 4cf974881
Node: View Server<8>974973
Ref: whatsnew/0 11 view-server975094
Ref: 4d0975094
Node: URL Rewriter & Vhosts<3>975394
Ref: whatsnew/0 11 url-rewriter-vhosts975493
Ref: 4d1975493
Node: Version 0 11 0975781
Ref: whatsnew/0 11 release-0-11-0975869
Ref: 4d2975869
Ref: whatsnew/0 11 version-0-11-0975869
Ref: 4d3975869
Node: Build and System Integration<3>976195
Ref: whatsnew/0 11 id5976296
Ref: 4d4976296
Node: Futon<10>976886
Ref: whatsnew/0 11 id6977014
Ref: 4d5977014
Node: HTTP Interface<13>977683
Ref: whatsnew/0 11 id7977794
Ref: 4d6977794
Node: Replication<4>977970
Ref: whatsnew/0 11 replication978090
Ref: 4d7978090
Node: Runtime Statistics978386
Ref: whatsnew/0 11 runtime-statistics978500
Ref: 4d8978500
Node: Security<10>978786
Ref: whatsnew/0 11 id8978903
Ref: 4d9978903
Node: Storage System<9>979322
Ref: whatsnew/0 11 id9979435
Ref: 4da979435
Node: View Server<9>979689
Ref: whatsnew/0 11 id10979781
Ref: 4db979781
Node: 0 10 x Branch980468
Ref: whatsnew/0 10 doc980577
Ref: 4dc980577
Ref: whatsnew/0 10 x-branch980577
Ref: 4dd980577
Ref: whatsnew/0 10 release-0-10-x980577
Ref: 4de980577
Node: Upgrade Notes<8>981410
Ref: whatsnew/0 10 release-0-10-x-upgrade981500
Ref: 4df981500
Ref: whatsnew/0 10 upgrade-notes981500
Ref: 4e0981500
Node: Modular Configuration Directories981873
Ref: whatsnew/0 10 modular-configuration-directories981993
Ref: 4e2981993
Ref: Modular Configuration Directories-Footnote-1982594
Node: Show and List API change982633
Ref: whatsnew/0 10 show-and-list-api-change982814
Ref: 4e3982814
Ref: whatsnew/0 10 glob-7982814
Ref: 4e4982814
Ref: Show and List API change-Footnote-1983029
Node: Stricter enforcing of reduciness in reduce-functions983097
Ref: whatsnew/0 10 formatting-with-show-and-list983283
Ref: 4e5983283
Ref: whatsnew/0 10 stricter-enforcing-of-reduciness-in-reduce-functions983283
Ref: 4e6983283
Node: View query reduce parameter strictness983485
Ref: whatsnew/0 10 view-query-reduce-parameter-strictness983638
Ref: 4e7983638
Node: Version 0 10 2983868
Ref: whatsnew/0 10 version-0-10-2983981
Ref: 4e8983981
Ref: whatsnew/0 10 release-0-10-2983981
Ref: 4e1983981
Node: Build and System Integration<4>984157
Ref: whatsnew/0 10 build-and-system-integration984261
Ref: 4e9984261
Node: Security<11>984401
Ref: whatsnew/0 10 security984528
Ref: 4ea984528
Node: Replicator<12>984652
Ref: whatsnew/0 10 replicator984739
Ref: 4ec984739
Node: Version 0 10 1984852
Ref: whatsnew/0 10 release-0-10-1984963
Ref: 4ed984963
Ref: whatsnew/0 10 version-0-10-1984963
Ref: 4ee984963
Node: Build and System Integration<5>985156
Ref: whatsnew/0 10 id1985262
Ref: 4ef985262
Node: Replicator<13>985393
Ref: whatsnew/0 10 id2985523
Ref: 4f0985523
Node: Query Server<2>985631
Ref: whatsnew/0 10 query-server985735
Ref: 4f1985735
Node: Stats985850
Ref: whatsnew/0 10 stats985931
Ref: 4f2985931
Node: Version 0 10 0986011
Ref: whatsnew/0 10 version-0-10-0986099
Ref: 4f3986099
Ref: whatsnew/0 10 release-0-10-0986099
Ref: 4f4986099
Node: Build and System Integration<6>986308
Ref: whatsnew/0 10 id3986418
Ref: 4f5986418
Node: HTTP Interface<14>986632
Ref: whatsnew/0 10 http-interface986765
Ref: 4f6986765
Node: Storage Format986934
Ref: whatsnew/0 10 storage-format987051
Ref: 4f7987051
Node: View Server<10>987217
Ref: whatsnew/0 10 view-server987307
Ref: 4f8987307
Node: 0 9 x Branch987417
Ref: whatsnew/0 9 release-0-9-x987525
Ref: 4f9987525
Ref: whatsnew/0 9 doc987525
Ref: 4fa987525
Ref: whatsnew/0 9 x-branch987525
Ref: 4fb987525
Node: Upgrade Notes<9>988600
Ref: whatsnew/0 9 upgrade-notes988688
Ref: 4fc988688
Ref: whatsnew/0 9 release-0-9-x-upgrade988688
Ref: 4fd988688
Node: Response to Bulk Creation/Updates988924
Ref: whatsnew/0 9 response-to-bulk-creation-updates989040
Ref: 4fe989040
Node: Database File Format989369
Ref: whatsnew/0 9 database-file-format989520
Ref: 4ff989520
Ref: Database File Format-Footnote-1989902
Node: Renamed "count" to "limit"989950
Ref: whatsnew/0 9 couchdb-python990083
Ref: 500990083
Ref: whatsnew/0 9 renamed-count-to-limit990083
Ref: 501990083
Node: Moved View URLs990332
Ref: whatsnew/0 9 moved-view-urls990459
Ref: 502990459
Ref: Moved View URLs-Footnote-1990876
Node: Attachments<3>991014
Ref: whatsnew/0 9 rest-hypermedia-and-couchapps991126
Ref: 503991126
Ref: whatsnew/0 9 attachments991126
Ref: 504991126
Node: Error Codes991244
Ref: whatsnew/0 9 error-codes991356
Ref: 505991356
Node: ini file format991732
Ref: whatsnew/0 9 ini-file-format991821
Ref: 506991821
Node: Version 0 9 2992393
Ref: whatsnew/0 9 version-0-9-2992503
Ref: 507992503
Ref: whatsnew/0 9 release-0-9-2992503
Ref: 508992503
Node: Build and System Integration<7>992654
Ref: whatsnew/0 9 build-and-system-integration992759
Ref: 509992759
Node: Replication<5>992939
Ref: whatsnew/0 9 replication993044
Ref: 50a993044
Ref: Replication<5>-Footnote-1993214
Node: Version 0 9 1993271
Ref: whatsnew/0 9 release-0-9-1993378
Ref: 50b993378
Ref: whatsnew/0 9 version-0-9-1993378
Ref: 50c993378
Node: Build and System Integration<8>993689
Ref: whatsnew/0 9 id1993810
Ref: 50d993810
Node: Configuration and stats system994180
Ref: whatsnew/0 9 configuration-and-stats-system994323
Ref: 50e994323
Node: Database Core994513
Ref: whatsnew/0 9 database-core994642
Ref: 50f994642
Ref: Database Core-Footnote-1994988
Node: External Handlers995045
Ref: whatsnew/0 9 external-handlers995153
Ref: 510995153
Node: Futon<11>995235
Ref: whatsnew/0 9 futon995348
Ref: 511995348
Node: HTTP Interface<15>995445
Ref: whatsnew/0 9 http-interface995563
Ref: 512995563
Node: JavaScript View Server995682
Ref: whatsnew/0 9 javascript-view-server995805
Ref: 513995805
Node: Replication<6>995912
Ref: whatsnew/0 9 id2996008
Ref: 514996008
Node: Version 0 9 0996433
Ref: whatsnew/0 9 release-0-9-0996518
Ref: 515996518
Ref: whatsnew/0 9 version-0-9-0996518
Ref: 516996518
Node: Build and System Integration<9>996871
Ref: whatsnew/0 9 id3996995
Ref: 517996995
Node: Configuration and stats system<2>997714
Ref: whatsnew/0 9 id4997863
Ref: 518997863
Node: Database Core<2>998096
Ref: whatsnew/0 9 id5998244
Ref: 519998244
Node: Design Document Resource Paths998626
Ref: whatsnew/0 9 design-document-resource-paths998761
Ref: 51a998761
Node: Futon Utility Client999079
Ref: whatsnew/0 9 futon-utility-client999216
Ref: 51b999216
Node: HTTP Interface<16>1000137
Ref: whatsnew/0 9 id61000258
Ref: 51c1000258
Node: Replication<7>1001127
Ref: whatsnew/0 9 id71001219
Ref: 51d1001219
Node: 0 8 x Branch1001443
Ref: whatsnew/0 8 doc1001529
Ref: 51e1001529
Ref: whatsnew/0 8 release-0-8-x1001529
Ref: 51f1001529
Ref: whatsnew/0 8 x-branch1001529
Ref: 5201001529
Node: Version 0 8 1-incubating1002164
Ref: whatsnew/0 8 version-0-8-1-incubating1002271
Ref: 5211002271
Ref: whatsnew/0 8 release-0-8-11002271
Ref: 5221002271
Node: Build and System Integration<10>1002560
Ref: whatsnew/0 8 build-and-system-integration1002679
Ref: 5231002679
Node: Database Core<3>1003038
Ref: whatsnew/0 8 database-core1003175
Ref: 5241003175
Node: Futon<12>1003799
Ref: whatsnew/0 8 futon1003929
Ref: 5251003929
Ref: Futon<12>-Footnote-11004157
Node: JavaScript View Server<2>1004213
Ref: whatsnew/0 8 javascript-view-server1004345
Ref: 5261004345
Ref: JavaScript View Server<2>-Footnote-11004644
Node: HTTP Interface<17>1004700
Ref: whatsnew/0 8 http-interface1004814
Ref: 5271004814
Ref: HTTP Interface<17>-Footnote-11005429
Ref: HTTP Interface<17>-Footnote-21005485
Node: Version 0 8 0-incubating1005541
Ref: whatsnew/0 8 version-0-8-0-incubating1005648
Ref: 5281005648
Ref: whatsnew/0 8 release-0-8-01005648
Ref: 5291005648
Node: Build and System Integration<11>1005937
Ref: whatsnew/0 8 id11006056
Ref: 52a1006056
Node: Database Core<4>1006613
Ref: whatsnew/0 8 id21006750
Ref: 52b1006750
Node: Futon<13>1007694
Ref: whatsnew/0 8 id31007824
Ref: 52c1007824
Ref: Futon<13>-Footnote-11009134
Ref: Futon<13>-Footnote-21009190
Ref: Futon<13>-Footnote-31009246
Node: JavaScript View Server<3>1009302
Ref: whatsnew/0 8 id41009434
Ref: 52d1009434
Ref: JavaScript View Server<3>-Footnote-11010190
Node: HTTP Interface<18>1010246
Ref: whatsnew/0 8 id51010360
Ref: 52e1010360
Ref: HTTP Interface<18>-Footnote-11012171
Ref: HTTP Interface<18>-Footnote-21012226
Node: Security Issues Information1012282
Ref: cve/index security-issues-information1012434
Ref: 52f1012434
Ref: cve/index cve1012434
Ref: 5301012434
Ref: cve/index doc1012434
Ref: 5311012434
Node: CVE-2010-0009 Apache CouchDB Timing Attack Vulnerability1014626
Ref: cve/2010-0009 doc1014818
Ref: 5321014818
Ref: cve/2010-0009 cve-2010-00091014818
Ref: 4eb1014818
Ref: cve/2010-0009 cve-2010-0009-apache-couchdb-timing-attack-vulnerability1014818
Ref: 5331014818
Node: Description1015150
Ref: cve/2010-0009 description1015274
Ref: 5341015274
Node: Mitigation1015552
Ref: cve/2010-0009 mitigation1015692
Ref: 5351015692
Node: Example1015923
Ref: cve/2010-0009 example1016058
Ref: 5361016058
Node: Credit1016194
Ref: cve/2010-0009 credit1016310
Ref: 5371016310
Node: CVE-2010-2234 Apache CouchDB Cross Site Request Forgery Attack1016424
Ref: cve/2010-2234 cve-2010-22341016680
Ref: 4c31016680
Ref: cve/2010-2234 doc1016680
Ref: 5381016680
Ref: cve/2010-2234 cve-2010-2234-apache-couchdb-cross-site-request-forgery-attack1016680
Ref: 5391016680
Node: Description<2>1017074
Ref: cve/2010-2234 description1017210
Ref: 53a1017210
Ref: Description<2>-Footnote-11017409
Node: Mitigation<2>1017472
Ref: cve/2010-2234 mitigation1017627
Ref: 53b1017627
Ref: cve/2010-2234 cross-site-request-forgery1017627
Ref: 53c1017627
Node: Example<2>1017896
Ref: cve/2010-2234 example1018046
Ref: 53d1018046
Node: Credit<2>1018435
Ref: cve/2010-2234 credit1018563
Ref: 53e1018563
Node: CVE-2010-3854 Apache CouchDB Cross Site Scripting Issue1018667
Ref: cve/2010-3854 cve-2010-3854-apache-couchdb-cross-site-scripting-issue1018948
Ref: 53f1018948
Ref: cve/2010-3854 doc1018948
Ref: 5401018948
Ref: cve/2010-3854 cve-2010-38541018948
Ref: 5411018948
Node: Description<3>1019327
Ref: cve/2010-3854 description1019456
Ref: 5421019456
Ref: Description<3>-Footnote-11019647
Node: Mitigation<3>1019704
Ref: cve/2010-3854 cross-site-scripting1019852
Ref: 5431019852
Ref: cve/2010-3854 mitigation1019852
Ref: 5441019852
Node: Example<3>1020098
Ref: cve/2010-3854 example1020241
Ref: 5451020241
Node: Credit<3>1020478
Ref: cve/2010-3854 credit1020599
Ref: 5461020599
Node: CVE-2012-5641 Information disclosure via unescaped backslashes in URLs on Windows1020702
Ref: cve/2012-5641 cve-2012-5641-information-disclosure-via-unescaped-backslashes-in-urls-on-windows1020982
Ref: 5471020982
Ref: cve/2012-5641 doc1020982
Ref: 5481020982
Ref: cve/2012-5641 cve-2012-56411020982
Ref: 45c1020982
Node: Description<4>1021500
Ref: cve/2012-5641 description1021655
Ref: 5491021655
Node: Mitigation<4>1022144
Ref: cve/2012-5641 mitigation1022319
Ref: 54a1022319
Node: Work-Around1022605
Ref: cve/2012-5641 work-around1022781
Ref: 54b1022781
Node: Acknowledgement1023477
Ref: cve/2012-5641 acknowledgement1023650
Ref: 54c1023650
Node: References1023783
Ref: cve/2012-5641 references1023936
Ref: 54d1023936
Node: CVE-2012-5649 JSONP arbitrary code execution with Adobe Flash1024030
Ref: cve/2012-5649 cve-2012-5649-jsonp-arbitrary-code-execution-with-adobe-flash1024312
Ref: 54e1024312
Ref: cve/2012-5649 doc1024312
Ref: 54f1024312
Ref: cve/2012-5649 cve-2012-56491024312
Ref: 45d1024312
Node: Description<5>1024771
Ref: cve/2012-5649 description1024906
Ref: 5501024906
Node: Mitigation<5>1025068
Ref: cve/2012-5649 mitigation1025226
Ref: 5511025226
Node: Work-Around<2>1025485
Ref: cve/2012-5649 work-around1025620
Ref: 5521025620
Node: CVE-2012-5650 DOM based Cross-Site Scripting via Futon UI1025725
Ref: cve/2012-5650 cve-2012-56501026005
Ref: 45e1026005
Ref: cve/2012-5650 cve-2012-5650-dom-based-cross-site-scripting-via-futon-ui1026005
Ref: 5531026005
Ref: cve/2012-5650 doc1026005
Ref: 5541026005
Node: Description<6>1026472
Ref: cve/2012-5650 description1026603
Ref: 5551026603
Node: Mitigation<6>1026858
Ref: cve/2012-5650 mitigation1027012
Ref: 5561027012
Node: Work-Around<3>1027271
Ref: cve/2012-5650 work-around1027429
Ref: 5571027429
Node: Acknowledgement<2>1027817
Ref: cve/2012-5650 acknowledgement1027953
Ref: 5581027953
Ref: Acknowledgement<2>-Footnote-11028137
Node: CVE-2014-2668 DoS CPU and memory consumption via the count parameter to /_uuids1028172
Ref: cve/2014-2668 cve-2014-26681028382
Ref: 4211028382
Ref: cve/2014-2668 doc1028382
Ref: 5591028382
Ref: cve/2014-2668 cve-2014-2668-dos-cpu-and-memory-consumption-via-the-count-parameter-to-uuids1028382
Ref: 55a1028382
Ref: cve/2014-2668 frederik-braun1028382
Ref: 55b1028382
Node: Description<7>1028858
Ref: cve/2014-2668 description1029011
Ref: 55c1029011
Node: Mitigation<7>1029247
Ref: cve/2014-2668 mitigation1029423
Ref: 55d1029423
Node: Work-Around<4>1029636
Ref: cve/2014-2668 work-around1029789
Ref: 55e1029789
Node: Reporting New Security Problems with Apache CouchDB1029972
Ref: cve/index cve-report1030136
Ref: 55f1030136
Ref: cve/index reporting-new-security-problems-with-apache-couchdb1030136
Ref: 5601030136
Ref: Reporting New Security Problems with Apache CouchDB-Footnote-11032034
Ref: Reporting New Security Problems with Apache CouchDB-Footnote-21032087
Ref: Reporting New Security Problems with Apache CouchDB-Footnote-31032134
Node: About CouchDB Documentation1032184
Ref: about about1032339
Ref: 5611032339
Ref: about doc1032339
Ref: 5621032339
Ref: about about-couchdb-documentation1032339
Ref: 5631032339
Ref: about users-mailing-list1032339
Ref: 5641032339
Node: License1032424
Ref: about license1032496
Ref: 5651032496
Node: HTTP API Reference1044390
Node: Configuration Reference1054167
Node: Index1059955

End Tag Table


Local Variables:
coding: utf-8
End:
